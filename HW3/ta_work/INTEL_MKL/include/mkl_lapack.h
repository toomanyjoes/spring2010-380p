/*******************************************************************************
!                             INTEL CONFIDENTIAL
!   Copyright(C) 1999-2007 Intel Corporation. All Rights Reserved.
!   The source code contained  or  described herein and all documents related to
!   the source code ("Material") are owned by Intel Corporation or its suppliers
!   or licensors.  Title to the  Material remains with  Intel Corporation or its
!   suppliers and licensors. The Material contains trade secrets and proprietary
!   and  confidential  information of  Intel or its suppliers and licensors. The
!   Material  is  protected  by  worldwide  copyright  and trade secret laws and
!   treaty  provisions. No part of the Material may be used, copied, reproduced,
!   modified, published, uploaded, posted, transmitted, distributed or disclosed
!   in any way without Intel's prior express written permission.
!   No license  under any  patent, copyright, trade secret or other intellectual
!   property right is granted to or conferred upon you by disclosure or delivery
!   of the Materials, either expressly, by implication, inducement, estoppel or
!   otherwise.  Any  license  under  such  intellectual property  rights must be
!   express and approved by Intel in writing.
!
!*******************************************************************************
!  Content:
!      Intel(R) Math Kernel Library (MKL) interface for LAPACK routines
!******************************************************************************/

#ifndef _MKL_LAPACK_H_
#define _MKL_LAPACK_H_

#include "mkl_types.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

void    CBDSQR( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *c, MKL_INT *ldc, float *rwork, MKL_INT *info );
void    CBDSQR_( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *c, MKL_INT *ldc, float *rwork, MKL_INT *info );
void    cbdsqr( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *c, MKL_INT *ldc, float *rwork, MKL_INT *info );
void    cbdsqr_( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *c, MKL_INT *ldc, float *rwork, MKL_INT *info );
void    CGBBRD( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *pt, MKL_INT *ldpt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGBBRD_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *pt, MKL_INT *ldpt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgbbrd( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *pt, MKL_INT *ldpt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgbbrd_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *pt, MKL_INT *ldpt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGBCON( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGBCON_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgbcon( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgbcon_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGBEQU( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    CGBEQU_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    cgbequ( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    cgbequ_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    CGBRFS( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGBRFS_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgbrfs( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgbrfs_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGBSV( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGBSV_( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgbsv( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgbsv_( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGBSVX( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, float *r, float *c, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGBSVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, float *r, float *c, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgbsvx( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, float *r, float *c, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgbsvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, float *r, float *c, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGBTF2( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    CGBTF2_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    cgbtf2( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    cgbtf2_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    CGBTRF( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    CGBTRF_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    cgbtrf( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    cgbtrf_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    CGBTRS( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGBTRS_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgbtrs( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgbtrs_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGEBAK( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *m, MKL_Complex8 *v, MKL_INT *ldv, MKL_INT *info );
void    CGEBAK_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *m, MKL_Complex8 *v, MKL_INT *ldv, MKL_INT *info );
void    cgebak( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *m, MKL_Complex8 *v, MKL_INT *ldv, MKL_INT *info );
void    cgebak_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *m, MKL_Complex8 *v, MKL_INT *ldv, MKL_INT *info );
void    CGEBAL( char *job, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *info );
void    CGEBAL_( char *job, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *info );
void    cgebal( char *job, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *info );
void    cgebal_( char *job, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *info );
void    CGEBD2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *work, MKL_INT *info );
void    CGEBD2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *work, MKL_INT *info );
void    cgebd2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *work, MKL_INT *info );
void    cgebd2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *work, MKL_INT *info );
void    CGEBRD( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGEBRD_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgebrd( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgebrd_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGECON( char *norm, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGECON_( char *norm, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgecon( char *norm, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgecon_( char *norm, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGEEQU( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    CGEEQU_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    cgeequ( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    cgeequ_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    CGEES( char *jobvs, char *sort, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex8 *w, MKL_Complex8 *vs, MKL_INT *ldvs, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    CGEES_( char *jobvs, char *sort, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex8 *w, MKL_Complex8 *vs, MKL_INT *ldvs, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    cgees( char *jobvs, char *sort, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex8 *w, MKL_Complex8 *vs, MKL_INT *ldvs, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    cgees_( char *jobvs, char *sort, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex8 *w, MKL_Complex8 *vs, MKL_INT *ldvs, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    CGEESX( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex8 *w, MKL_Complex8 *vs, MKL_INT *ldvs, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    CGEESX_( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex8 *w, MKL_Complex8 *vs, MKL_INT *ldvs, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    cgeesx( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex8 *w, MKL_Complex8 *vs, MKL_INT *ldvs, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    cgeesx_( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex8 *w, MKL_Complex8 *vs, MKL_INT *ldvs, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    CGEEV( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEEV_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgeev( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgeev_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEEVX( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEEVX_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgeevx( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgeevx_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEGS( char *jobvsl, char *jobvsr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEGS_( char *jobvsl, char *jobvsr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgegs( char *jobvsl, char *jobvsr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgegs_( char *jobvsl, char *jobvsr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEGV( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEGV_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgegv( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgegv_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEHD2( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGEHD2_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cgehd2( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cgehd2_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGEHRD( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGEHRD_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgehrd( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgehrd_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGELQ2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGELQ2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cgelq2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cgelq2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGELQF( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGELQF_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgelqf( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgelqf_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGELS( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGELS_( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgels( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgels_( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGELSD( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CGELSD_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    cgelsd( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    cgelsd_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CGELSS( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGELSS_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgelss( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgelss_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGELSX( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGELSX_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgelsx( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgelsx_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGELSY( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGELSY_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgelsy( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgelsy_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEQL2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGEQL2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cgeql2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cgeql2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGEQLF( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGEQLF_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgeqlf( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgeqlf_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGEQP3( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEQP3_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgeqp3( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgeqp3_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGEQPF( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGEQPF_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgeqpf( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgeqpf_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGEQR2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGEQR2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cgeqr2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cgeqr2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGEQRF( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGEQRF_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgeqrf( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgeqrf_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGERFS( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGERFS_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgerfs( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgerfs_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGERQ2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGERQ2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cgerq2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cgerq2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGERQF( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGERQF_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgerqf( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgerqf_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGESC2( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *rhs, MKL_INT *ipiv, MKL_INT *jpiv, float *scale );
void    CGESC2_( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *rhs, MKL_INT *ipiv, MKL_INT *jpiv, float *scale );
void    cgesc2( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *rhs, MKL_INT *ipiv, MKL_INT *jpiv, float *scale );
void    cgesc2_( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *rhs, MKL_INT *ipiv, MKL_INT *jpiv, float *scale );
void    CGESDD( char *jobz, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CGESDD_( char *jobz, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    cgesdd( char *jobz, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    cgesdd_( char *jobz, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CGESV( MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGESV_( MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgesv( MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgesv_( MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGESVD( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGESVD_( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgesvd( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cgesvd_( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *vt, MKL_INT *ldvt, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGESVX( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, float *r, float *c, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGESVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, float *r, float *c, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgesvx( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, float *r, float *c, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgesvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, float *r, float *c, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGETC2( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    CGETC2_( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    cgetc2( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    cgetc2_( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    CGETF2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    CGETF2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    cgetf2( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    cgetf2_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    CGETRF( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    CGETRF_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    cgetrf( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    cgetrf_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    CGETRI( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGETRI_( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgetri( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgetri_( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGETRS( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGETRS_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgetrs( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgetrs_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGGBAK( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, MKL_INT *m, MKL_Complex8 *v, MKL_INT *ldv, MKL_INT *info );
void    CGGBAK_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, MKL_INT *m, MKL_Complex8 *v, MKL_INT *ldv, MKL_INT *info );
void    cggbak( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, MKL_INT *m, MKL_Complex8 *v, MKL_INT *ldv, MKL_INT *info );
void    cggbak_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, MKL_INT *m, MKL_Complex8 *v, MKL_INT *ldv, MKL_INT *info );
void    CGGBAL( char *job, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *work, MKL_INT *info );
void    CGGBAL_( char *job, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *work, MKL_INT *info );
void    cggbal( char *job, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *work, MKL_INT *info );
void    cggbal_( char *job, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *work, MKL_INT *info );
void    CGGES( char *jobvsl, char *jobvsr, char *sort, void *selctg, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    CGGES_( char *jobvsl, char *jobvsr, char *sort, void *selctg, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    cgges( char *jobvsl, char *jobvsr, char *sort, void *selctg, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    cgges_( char *jobvsl, char *jobvsr, char *sort, void *selctg, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, void *bwork, MKL_INT *info );
void    CGGESX( char *jobvsl, char *jobvsr, char *sort, void *selctg, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    CGGESX_( char *jobvsl, char *jobvsr, char *sort, void *selctg, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    cggesx( char *jobvsl, char *jobvsr, char *sort, void *selctg, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    cggesx_( char *jobvsl, char *jobvsr, char *sort, void *selctg, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vsl, MKL_INT *ldvsl, MKL_Complex8 *vsr, MKL_INT *ldvsr, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    CGGEV( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGGEV_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cggev( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cggev_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CGGEVX( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    CGGEVX_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    cggevx( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    cggevx_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    CGGGLM( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *d, MKL_Complex8 *x, MKL_Complex8 *y, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGGGLM_( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *d, MKL_Complex8 *x, MKL_Complex8 *y, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cggglm( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *d, MKL_Complex8 *x, MKL_Complex8 *y, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cggglm_( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *d, MKL_Complex8 *x, MKL_Complex8 *y, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGGHRD( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *info );
void    CGGHRD_( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *info );
void    cgghrd( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *info );
void    cgghrd_( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *info );
void    CGGLSE( MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_Complex8 *d, MKL_Complex8 *x, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGGLSE_( MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_Complex8 *d, MKL_Complex8 *x, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgglse( MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_Complex8 *d, MKL_Complex8 *x, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cgglse_( MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_Complex8 *d, MKL_Complex8 *x, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGGQRF( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *taua, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *taub, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGGQRF_( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *taua, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *taub, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cggqrf( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *taua, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *taub, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cggqrf_( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *taua, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *taub, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGGRQF( MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *taua, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *taub, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGGRQF_( MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *taua, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *taub, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cggrqf( MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *taua, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *taub, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cggrqf_( MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *taua, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *taub, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CGGSVD( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *alpha, float *beta, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CGGSVD_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *alpha, float *beta, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    cggsvd( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *alpha, float *beta, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    cggsvd_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *alpha, float *beta, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CGGSVP( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *tola, float *tolb, MKL_INT *k, MKL_INT *l, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_INT *iwork, float *rwork, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGGSVP_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *tola, float *tolb, MKL_INT *k, MKL_INT *l, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_INT *iwork, float *rwork, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cggsvp( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *tola, float *tolb, MKL_INT *k, MKL_INT *l, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_INT *iwork, float *rwork, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cggsvp_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *tola, float *tolb, MKL_INT *k, MKL_INT *l, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_INT *iwork, float *rwork, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CGTCON( char *norm, MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    CGTCON_( char *norm, MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    cgtcon( char *norm, MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    cgtcon_( char *norm, MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    CGTRFS( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *dlf, MKL_Complex8 *df, MKL_Complex8 *duf, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGTRFS_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *dlf, MKL_Complex8 *df, MKL_Complex8 *duf, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgtrfs( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *dlf, MKL_Complex8 *df, MKL_Complex8 *duf, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgtrfs_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *dlf, MKL_Complex8 *df, MKL_Complex8 *duf, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGTSV( MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGTSV_( MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgtsv( MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgtsv_( MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGTSVX( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *dlf, MKL_Complex8 *df, MKL_Complex8 *duf, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGTSVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *dlf, MKL_Complex8 *df, MKL_Complex8 *duf, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgtsvx( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *dlf, MKL_Complex8 *df, MKL_Complex8 *duf, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cgtsvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *dlf, MKL_Complex8 *df, MKL_Complex8 *duf, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CGTTRF( MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_INT *info );
void    CGTTRF_( MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_INT *info );
void    cgttrf( MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_INT *info );
void    cgttrf_( MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_INT *info );
void    CGTTRS( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGTTRS_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgttrs( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cgttrs_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CGTTS2( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb );
void    CGTTS2_( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb );
void    cgtts2( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb );
void    cgtts2_( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *du2, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb );
void    CHBEV( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHBEV_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chbev( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chbev_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHBEVD( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHBEVD_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    chbevd( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    chbevd_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHBEVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHBEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    chbevx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    chbevx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHBGST( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, MKL_Complex8 *x, MKL_INT *ldx, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHBGST_( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, MKL_Complex8 *x, MKL_INT *ldx, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chbgst( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, MKL_Complex8 *x, MKL_INT *ldx, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chbgst_( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, MKL_Complex8 *x, MKL_INT *ldx, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHBGV( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHBGV_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chbgv( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chbgv_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHBGVD( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHBGVD_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    chbgvd( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    chbgvd_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHBGVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, MKL_Complex8 *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHBGVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, MKL_Complex8 *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    chbgvx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, MKL_Complex8 *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    chbgvx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *bb, MKL_INT *ldbb, MKL_Complex8 *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHBTRD( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *info );
void    CHBTRD_( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *info );
void    chbtrd( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *info );
void    chbtrd_( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *info );
void    CHECON( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    CHECON_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    checon( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    checon_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    CHEEV( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CHEEV_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cheev( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    cheev_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CHEEVD( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHEEVD_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    cheevd( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    cheevd_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHEEVR( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHEEVR_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    cheevr( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    cheevr_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHEEVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHEEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    cheevx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    cheevx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHEGS2( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CHEGS2_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    chegs2( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    chegs2_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CHEGST( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CHEGST_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    chegst( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    chegst_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CHEGV( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CHEGV_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    chegv( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    chegv_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CHEGVD( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHEGVD_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    chegvd( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    chegvd_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *w, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHEGVX( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHEGVX_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    chegvx( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    chegvx_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHERDB( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_Complex8* z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CHERDB_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_Complex8* z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cherdb( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_Complex8* z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cherdb_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_Complex8* z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CHERFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHERFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cherfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cherfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHESV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CHESV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    chesv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    chesv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CHESVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CHESVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    chesvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    chesvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CHETD2( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_INT *info );
void    CHETD2_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_INT *info );
void    chetd2( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_INT *info );
void    chetd2_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_INT *info );
void    CHETF2( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    CHETF2_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    chetf2( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    chetf2_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    CHETRD( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CHETRD_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    chetrd( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    chetrd_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CHETRF( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CHETRF_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    chetrf( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    chetrf_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CHETRI( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *info );
void    CHETRI_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *info );
void    chetri( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *info );
void    chetri_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *info );
void    CHETRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CHETRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    chetrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    chetrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CHGEQZ( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CHGEQZ_( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    chgeqz( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    chgeqz_( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CHPCON( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    CHPCON_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    chpcon( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    chpcon_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    CHPEV( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHPEV_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chpev( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chpev_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHPEVD( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHPEVD_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    chpevd( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    chpevd_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHPEVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHPEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    chpevx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    chpevx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHPGST( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, MKL_INT *info );
void    CHPGST_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, MKL_INT *info );
void    chpgst( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, MKL_INT *info );
void    chpgst_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, MKL_INT *info );
void    CHPGV( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHPGV_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chpgv( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chpgv_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHPGVD( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHPGVD_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    chpgvd( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    chpgvd_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CHPGVX( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHPGVX_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    chpgvx( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    chpgvx_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *bp, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CHPRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHPRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chprfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chprfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHPSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CHPSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    chpsv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    chpsv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CHPSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHPSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chpsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    chpsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CHPTRD( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *d, float *e, MKL_Complex8 *tau, MKL_INT *info );
void    CHPTRD_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *d, float *e, MKL_Complex8 *tau, MKL_INT *info );
void    chptrd( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *d, float *e, MKL_Complex8 *tau, MKL_INT *info );
void    chptrd_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *d, float *e, MKL_Complex8 *tau, MKL_INT *info );
void    CHPTRF( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_INT *info );
void    CHPTRF_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_INT *info );
void    chptrf( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_INT *info );
void    chptrf_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_INT *info );
void    CHPTRI( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *work, MKL_INT *info );
void    CHPTRI_( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *work, MKL_INT *info );
void    chptri( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *work, MKL_INT *info );
void    chptri_( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *work, MKL_INT *info );
void    CHPTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CHPTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    chptrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    chptrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CHSEIN( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    CHSEIN_( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    chsein( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    chsein_( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    CHSEQR( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CHSEQR_( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    chseqr( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    chseqr_( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CLABRD( MKL_INT *m, MKL_INT *n, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *x, MKL_INT *ldx, MKL_Complex8 *y, MKL_INT *ldy );
void    CLABRD_( MKL_INT *m, MKL_INT *n, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *x, MKL_INT *ldx, MKL_Complex8 *y, MKL_INT *ldy );
void    clabrd( MKL_INT *m, MKL_INT *n, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *x, MKL_INT *ldx, MKL_Complex8 *y, MKL_INT *ldy );
void    clabrd_( MKL_INT *m, MKL_INT *n, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, float *d, float *e, MKL_Complex8 *tauq, MKL_Complex8 *taup, MKL_Complex8 *x, MKL_INT *ldx, MKL_Complex8 *y, MKL_INT *ldy );
void    CLACGV( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx );
void    CLACGV_( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx );
void    clacgv( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx );
void    clacgv_( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx );
void    CLACON( MKL_INT *n, MKL_Complex8 *v, float *x, float *est, MKL_INT *kase );
void    CLACON_( MKL_INT *n, MKL_Complex8 *v, float *x, float *est, MKL_INT *kase );
void    clacon( MKL_INT *n, MKL_Complex8 *v, float *x, float *est, MKL_INT *kase );
void    clacon_( MKL_INT *n, MKL_Complex8 *v, float *x, float *est, MKL_INT *kase );
void    CLACP2( char *uplo, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb );
void    CLACP2_( char *uplo, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb );
void    clacp2( char *uplo, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb );
void    clacp2_( char *uplo, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb );
void    CLACPY( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb );
void    CLACPY_( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb );
void    clacpy( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb );
void    clacpy_( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb );
void    CLACRM( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *rwork );
void    CLACRM_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *rwork );
void    clacrm( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *rwork );
void    clacrm_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *rwork );
void    CLACRT( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx, MKL_Complex8 *cy, MKL_INT *incy, MKL_Complex8 *c, MKL_Complex8 *s );
void    CLACRT_( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx, MKL_Complex8 *cy, MKL_INT *incy, MKL_Complex8 *c, MKL_Complex8 *s );
void    clacrt( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx, MKL_Complex8 *cy, MKL_INT *incy, MKL_Complex8 *c, MKL_Complex8 *s );
void    clacrt_( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx, MKL_Complex8 *cy, MKL_INT *incy, MKL_Complex8 *c, MKL_Complex8 *s );
void    CLADIV( MKL_Complex8 *pres, MKL_Complex8 *x, MKL_Complex8 *y );
void    CLADIV_( MKL_Complex8 *pres, MKL_Complex8 *x, MKL_Complex8 *y );
void    cladiv( MKL_Complex8 *pres, MKL_Complex8 *x, MKL_Complex8 *y );
void    cladiv_( MKL_Complex8 *pres, MKL_Complex8 *x, MKL_Complex8 *y );
void    CLAED0( MKL_INT *qsiz, MKL_INT *n, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *qstore, MKL_INT *ldqs, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CLAED0_( MKL_INT *qsiz, MKL_INT *n, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *qstore, MKL_INT *ldqs, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    claed0( MKL_INT *qsiz, MKL_INT *n, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *qstore, MKL_INT *ldqs, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    claed0_( MKL_INT *qsiz, MKL_INT *n, float *d, float *e, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *qstore, MKL_INT *ldqs, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CLAED7( MKL_INT *n, MKL_INT *cutpnt, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, float *d, MKL_Complex8 *q, MKL_INT *ldq, float *rho, MKL_INT *indxq, float *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CLAED7_( MKL_INT *n, MKL_INT *cutpnt, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, float *d, MKL_Complex8 *q, MKL_INT *ldq, float *rho, MKL_INT *indxq, float *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    claed7( MKL_INT *n, MKL_INT *cutpnt, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, float *d, MKL_Complex8 *q, MKL_INT *ldq, float *rho, MKL_INT *indxq, float *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    claed7_( MKL_INT *n, MKL_INT *cutpnt, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, float *d, MKL_Complex8 *q, MKL_INT *ldq, float *rho, MKL_INT *indxq, float *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CLAED8( MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, MKL_Complex8 *q, MKL_INT *ldq, float *d, float *rho, MKL_INT *cutpnt, float *z, float *dlamda, MKL_Complex8 *q2, MKL_INT *ldq2, float *w, MKL_INT *indxp, MKL_INT *indx, MKL_INT *indxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_INT *info );
void    CLAED8_( MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, MKL_Complex8 *q, MKL_INT *ldq, float *d, float *rho, MKL_INT *cutpnt, float *z, float *dlamda, MKL_Complex8 *q2, MKL_INT *ldq2, float *w, MKL_INT *indxp, MKL_INT *indx, MKL_INT *indxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_INT *info );
void    claed8( MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, MKL_Complex8 *q, MKL_INT *ldq, float *d, float *rho, MKL_INT *cutpnt, float *z, float *dlamda, MKL_Complex8 *q2, MKL_INT *ldq2, float *w, MKL_INT *indxp, MKL_INT *indx, MKL_INT *indxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_INT *info );
void    claed8_( MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, MKL_Complex8 *q, MKL_INT *ldq, float *d, float *rho, MKL_INT *cutpnt, float *z, float *dlamda, MKL_Complex8 *q2, MKL_INT *ldq2, float *w, MKL_INT *indxp, MKL_INT *indx, MKL_INT *indxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_INT *info );
void    CLAEIN( void *rightv, void *noinit, MKL_INT *n, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *v, MKL_Complex8 *b, MKL_INT *ldb, float *rwork, float *eps3, float *smlnum, MKL_INT *info );
void    CLAEIN_( void *rightv, void *noinit, MKL_INT *n, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *v, MKL_Complex8 *b, MKL_INT *ldb, float *rwork, float *eps3, float *smlnum, MKL_INT *info );
void    claein( void *rightv, void *noinit, MKL_INT *n, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *v, MKL_Complex8 *b, MKL_INT *ldb, float *rwork, float *eps3, float *smlnum, MKL_INT *info );
void    claein_( void *rightv, void *noinit, MKL_INT *n, MKL_Complex8 *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_Complex8 *v, MKL_Complex8 *b, MKL_INT *ldb, float *rwork, float *eps3, float *smlnum, MKL_INT *info );
void    CLAESY( MKL_Complex8 *a, MKL_Complex8 *b, MKL_Complex8 *c, MKL_Complex8 *rt1, MKL_Complex8 *rt2, MKL_Complex8 *evscal, MKL_Complex8 *cs1, MKL_Complex8 *sn1 );
void    CLAESY_( MKL_Complex8 *a, MKL_Complex8 *b, MKL_Complex8 *c, MKL_Complex8 *rt1, MKL_Complex8 *rt2, MKL_Complex8 *evscal, MKL_Complex8 *cs1, MKL_Complex8 *sn1 );
void    claesy( MKL_Complex8 *a, MKL_Complex8 *b, MKL_Complex8 *c, MKL_Complex8 *rt1, MKL_Complex8 *rt2, MKL_Complex8 *evscal, MKL_Complex8 *cs1, MKL_Complex8 *sn1 );
void    claesy_( MKL_Complex8 *a, MKL_Complex8 *b, MKL_Complex8 *c, MKL_Complex8 *rt1, MKL_Complex8 *rt2, MKL_Complex8 *evscal, MKL_Complex8 *cs1, MKL_Complex8 *sn1 );
void    CLAEV2( MKL_Complex8 *a, MKL_Complex8 *b, MKL_Complex8 *c, float *rt1, float *rt2, float *cs1, MKL_Complex8 *sn1 );
void    CLAEV2_( MKL_Complex8 *a, MKL_Complex8 *b, MKL_Complex8 *c, float *rt1, float *rt2, float *cs1, MKL_Complex8 *sn1 );
void    claev2( MKL_Complex8 *a, MKL_Complex8 *b, MKL_Complex8 *c, float *rt1, float *rt2, float *cs1, MKL_Complex8 *sn1 );
void    claev2_( MKL_Complex8 *a, MKL_Complex8 *b, MKL_Complex8 *c, float *rt1, float *rt2, float *cs1, MKL_Complex8 *sn1 );
void    CLAGS2( void *upper, float *a1, MKL_Complex8 *a2, float *a3, float *b1, MKL_Complex8 *b2, float *b3, float *csu, MKL_Complex8 *snu, float *csv, MKL_Complex8 *snv, float *csq, MKL_Complex8 *snq );
void    CLAGS2_( void *upper, float *a1, MKL_Complex8 *a2, float *a3, float *b1, MKL_Complex8 *b2, float *b3, float *csu, MKL_Complex8 *snu, float *csv, MKL_Complex8 *snv, float *csq, MKL_Complex8 *snq );
void    clags2( void *upper, float *a1, MKL_Complex8 *a2, float *a3, float *b1, MKL_Complex8 *b2, float *b3, float *csu, MKL_Complex8 *snu, float *csv, MKL_Complex8 *snv, float *csq, MKL_Complex8 *snq );
void    clags2_( void *upper, float *a1, MKL_Complex8 *a2, float *a3, float *b1, MKL_Complex8 *b2, float *b3, float *csu, MKL_Complex8 *snu, float *csv, MKL_Complex8 *snv, float *csq, MKL_Complex8 *snq );
void    CLAGTM( char *trans, MKL_INT *n, MKL_INT *nrhs, float *alpha, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *x, MKL_INT *ldx, float *beta, MKL_Complex8 *b, MKL_INT *ldb );
void    CLAGTM_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *alpha, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *x, MKL_INT *ldx, float *beta, MKL_Complex8 *b, MKL_INT *ldb );
void    clagtm( char *trans, MKL_INT *n, MKL_INT *nrhs, float *alpha, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *x, MKL_INT *ldx, float *beta, MKL_Complex8 *b, MKL_INT *ldb );
void    clagtm_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *alpha, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du, MKL_Complex8 *x, MKL_INT *ldx, float *beta, MKL_Complex8 *b, MKL_INT *ldb );
void    CLAHEF( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *w, MKL_INT *ldw, MKL_INT *info );
void    CLAHEF_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *w, MKL_INT *ldw, MKL_INT *info );
void    clahef( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *w, MKL_INT *ldw, MKL_INT *info );
void    clahef_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *w, MKL_INT *ldw, MKL_INT *info );
void    CLAHQR( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_INT *iloz, MKL_INT *ihiz, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *info );
void    CLAHQR_( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_INT *iloz, MKL_INT *ihiz, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *info );
void    clahqr( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_INT *iloz, MKL_INT *ihiz, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *info );
void    clahqr_( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, MKL_Complex8 *w, MKL_INT *iloz, MKL_INT *ihiz, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *info );
void    CLAHRD( MKL_INT *n, MKL_INT *k, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *y, MKL_INT *ldy );
void    CLAHRD_( MKL_INT *n, MKL_INT *k, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *y, MKL_INT *ldy );
void    clahrd( MKL_INT *n, MKL_INT *k, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *y, MKL_INT *ldy );
void    clahrd_( MKL_INT *n, MKL_INT *k, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *y, MKL_INT *ldy );
void    CLAIC1( MKL_INT *job, MKL_INT *j, MKL_Complex8 *x, float *sest, MKL_Complex8 *w, MKL_Complex8 *gamma, float *sestpr, MKL_Complex8 *s, MKL_Complex8 *c );
void    CLAIC1_( MKL_INT *job, MKL_INT *j, MKL_Complex8 *x, float *sest, MKL_Complex8 *w, MKL_Complex8 *gamma, float *sestpr, MKL_Complex8 *s, MKL_Complex8 *c );
void    claic1( MKL_INT *job, MKL_INT *j, MKL_Complex8 *x, float *sest, MKL_Complex8 *w, MKL_Complex8 *gamma, float *sestpr, MKL_Complex8 *s, MKL_Complex8 *c );
void    claic1_( MKL_INT *job, MKL_INT *j, MKL_Complex8 *x, float *sest, MKL_Complex8 *w, MKL_Complex8 *gamma, float *sestpr, MKL_Complex8 *s, MKL_Complex8 *c );
void    CLALS0( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, float *k, float *c, float *s, float *rwork, MKL_INT *info );
void    CLALS0_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, float *k, float *c, float *s, float *rwork, MKL_INT *info );
void    clals0( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, float *k, float *c, float *s, float *rwork, MKL_INT *info );
void    clals0_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, float *k, float *c, float *s, float *rwork, MKL_INT *info );
void    CLALSA( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *bx, MKL_INT *ldbx, float *u, MKL_INT *ldu, float *vt, float *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CLALSA_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *bx, MKL_INT *ldbx, float *u, MKL_INT *ldu, float *vt, float *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    clalsa( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *bx, MKL_INT *ldbx, float *u, MKL_INT *ldu, float *vt, float *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    clalsa_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *bx, MKL_INT *ldbx, float *u, MKL_INT *ldu, float *vt, float *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CLALSD( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, MKL_Complex8 *b, MKL_INT *ldb, float *rcond, MKL_INT *rank, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    CLALSD_( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, MKL_Complex8 *b, MKL_INT *ldb, float *rcond, MKL_INT *rank, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    clalsd( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, MKL_Complex8 *b, MKL_INT *ldb, float *rcond, MKL_INT *rank, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    clalsd_( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, MKL_Complex8 *b, MKL_INT *ldb, float *rcond, MKL_INT *rank, MKL_Complex8 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
float   CLANGB( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   CLANGB_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   clangb( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   clangb_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   CLANGE( char *norm, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   CLANGE_( char *norm, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   clange( char *norm, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   clange_( char *norm, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   CLANGT( char *norm, MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du );
float   CLANGT_( char *norm, MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du );
float   clangt( char *norm, MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du );
float   clangt_( char *norm, MKL_INT *n, MKL_Complex8 *dl, MKL_Complex8 *d, MKL_Complex8 *du );
float   CLANHB( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   CLANHB_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   clanhb( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   clanhb_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   CLANHE( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   CLANHE_( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   clanhe( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   clanhe_( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   CLANHP( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   CLANHP_( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   clanhp( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   clanhp_( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   CLANHS( char *norm, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   CLANHS_( char *norm, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   clanhs( char *norm, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   clanhs_( char *norm, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   CLANHT( char *norm, MKL_INT *n, float *d, MKL_Complex8 *e );
float   CLANHT_( char *norm, MKL_INT *n, float *d, MKL_Complex8 *e );
float   clanht( char *norm, MKL_INT *n, float *d, MKL_Complex8 *e );
float   clanht_( char *norm, MKL_INT *n, float *d, MKL_Complex8 *e );
float   CLANSB( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   CLANSB_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   clansb( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   clansb_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   CLANSP( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   CLANSP_( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   clansp( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   clansp_( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   CLANSY( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   CLANSY_( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   clansy( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   clansy_( char *norm, char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   CLANTB( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   CLANTB_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   clantb( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   clantb_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, MKL_Complex8 *ab, MKL_INT *ldab, float *work );
float   CLANTP( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   CLANTP_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   clantp( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   clantp_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, float *work );
float   CLANTR( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   CLANTR_( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   clantr( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
float   clantr_( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *work );
void    CLAPLL( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *ssmin );
void    CLAPLL_( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *ssmin );
void    clapll( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *ssmin );
void    clapll_( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *ssmin );
void    CLAPMT( void *forwrd, MKL_INT *m, MKL_INT *n, MKL_Complex8 *x, MKL_INT *ldx, MKL_INT *k );
void    CLAPMT_( void *forwrd, MKL_INT *m, MKL_INT *n, MKL_Complex8 *x, MKL_INT *ldx, MKL_INT *k );
void    clapmt( void *forwrd, MKL_INT *m, MKL_INT *n, MKL_Complex8 *x, MKL_INT *ldx, MKL_INT *k );
void    clapmt_( void *forwrd, MKL_INT *m, MKL_INT *n, MKL_Complex8 *x, MKL_INT *ldx, MKL_INT *k );
void    CLAQGB( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    CLAQGB_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    claqgb( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    claqgb_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex8 *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    CLAQGE( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    CLAQGE_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    claqge( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    claqge_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    CLAQHB( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    CLAQHB_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    claqhb( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    claqhb_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    CLAQHE( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    CLAQHE_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    claqhe( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    claqhe_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    CLAQHP( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, char *equed );
void    CLAQHP_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, char *equed );
void    claqhp( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, char *equed );
void    claqhp_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, char *equed );
void    CLAQP2( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, float *vn1, float *vn2, MKL_Complex8 *work );
void    CLAQP2_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, float *vn1, float *vn2, MKL_Complex8 *work );
void    claqp2( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, float *vn1, float *vn2, MKL_Complex8 *work );
void    claqp2_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, float *vn1, float *vn2, MKL_Complex8 *work );
void    CLAQPS( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, float *vn1, float *vn2, MKL_Complex8 *auxv, MKL_Complex8 *f, MKL_INT *ldf );
void    CLAQPS_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, float *vn1, float *vn2, MKL_Complex8 *auxv, MKL_Complex8 *f, MKL_INT *ldf );
void    claqps( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, float *vn1, float *vn2, MKL_Complex8 *auxv, MKL_Complex8 *f, MKL_INT *ldf );
void    claqps_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex8 *tau, float *vn1, float *vn2, MKL_Complex8 *auxv, MKL_Complex8 *f, MKL_INT *ldf );
void    CLAQSB( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    CLAQSB_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    claqsb( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    claqsb_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    CLAQSP( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, char *equed );
void    CLAQSP_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, char *equed );
void    claqsp( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, char *equed );
void    claqsp_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, char *equed );
void    CLAQSY( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    CLAQSY_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    claqsy( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    claqsy_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    CLAR1V( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, float *sigma, float *d, float *l, float *ld, float *lld, float *gersch, MKL_Complex8 *z, float *ztz, float *mingma, MKL_INT *r, MKL_INT *isuppz, float *work );
void    CLAR1V_( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, float *sigma, float *d, float *l, float *ld, float *lld, float *gersch, MKL_Complex8 *z, float *ztz, float *mingma, MKL_INT *r, MKL_INT *isuppz, float *work );
void    clar1v( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, float *sigma, float *d, float *l, float *ld, float *lld, float *gersch, MKL_Complex8 *z, float *ztz, float *mingma, MKL_INT *r, MKL_INT *isuppz, float *work );
void    clar1v_( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, float *sigma, float *d, float *l, float *ld, float *lld, float *gersch, MKL_Complex8 *z, float *ztz, float *mingma, MKL_INT *r, MKL_INT *isuppz, float *work );
void    CLAR2V( MKL_INT *n, MKL_Complex8 *x, MKL_Complex8 *y, MKL_Complex8 *z, MKL_INT *incx, float *c, MKL_Complex8 *s, MKL_INT *incc );
void    CLAR2V_( MKL_INT *n, MKL_Complex8 *x, MKL_Complex8 *y, MKL_Complex8 *z, MKL_INT *incx, float *c, MKL_Complex8 *s, MKL_INT *incc );
void    clar2v( MKL_INT *n, MKL_Complex8 *x, MKL_Complex8 *y, MKL_Complex8 *z, MKL_INT *incx, float *c, MKL_Complex8 *s, MKL_INT *incc );
void    clar2v_( MKL_INT *n, MKL_Complex8 *x, MKL_Complex8 *y, MKL_Complex8 *z, MKL_INT *incx, float *c, MKL_Complex8 *s, MKL_INT *incc );
void    CLARCM( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *rwork );
void    CLARCM_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *rwork );
void    clarcm( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *rwork );
void    clarcm_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *rwork );
void    CLARF( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    CLARF_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    clarf( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    clarf_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    CLARFB( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *ldwork );
void    CLARFB_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *ldwork );
void    clarfb( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *ldwork );
void    clarfb_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *ldwork );
void    CLARFG( MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *tau );
void    CLARFG_( MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *tau );
void    clarfg( MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *tau );
void    clarfg_( MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *tau );
void    CLARFT( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt );
void    CLARFT_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt );
void    clarft( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt );
void    clarft_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt );
void    CLARFX( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    CLARFX_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    clarfx( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    clarfx_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    CLARGV( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *c, MKL_INT *incc );
void    CLARGV_( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *c, MKL_INT *incc );
void    clargv( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *c, MKL_INT *incc );
void    clargv_( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *c, MKL_INT *incc );
void    CLARNV( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, MKL_Complex8 *x );
void    CLARNV_( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, MKL_Complex8 *x );
void    clarnv( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, MKL_Complex8 *x );
void    clarnv_( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, MKL_Complex8 *x );
void    CLARRV( MKL_INT *n, float *d, float *l, MKL_INT *isplit, MKL_INT *m, float *w, MKL_INT *iblock, float *gersch, float *tol, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *iwork, MKL_INT *info );
void    CLARRV_( MKL_INT *n, float *d, float *l, MKL_INT *isplit, MKL_INT *m, float *w, MKL_INT *iblock, float *gersch, float *tol, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *iwork, MKL_INT *info );
void    clarrv( MKL_INT *n, float *d, float *l, MKL_INT *isplit, MKL_INT *m, float *w, MKL_INT *iblock, float *gersch, float *tol, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *iwork, MKL_INT *info );
void    clarrv_( MKL_INT *n, float *d, float *l, MKL_INT *isplit, MKL_INT *m, float *w, MKL_INT *iblock, float *gersch, float *tol, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *iwork, MKL_INT *info );
void    CLARTG( MKL_Complex8 *f, MKL_Complex8 *g, float *cs, MKL_Complex8 *sn, MKL_Complex8 *r );
void    CLARTG_( MKL_Complex8 *f, MKL_Complex8 *g, float *cs, MKL_Complex8 *sn, MKL_Complex8 *r );
void    clartg( MKL_Complex8 *f, MKL_Complex8 *g, float *cs, MKL_Complex8 *sn, MKL_Complex8 *r );
void    clartg_( MKL_Complex8 *f, MKL_Complex8 *g, float *cs, MKL_Complex8 *sn, MKL_Complex8 *r );
void    CLARTV( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *c, MKL_Complex8 *s, MKL_INT *incc );
void    CLARTV_( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *c, MKL_Complex8 *s, MKL_INT *incc );
void    clartv( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *c, MKL_Complex8 *s, MKL_INT *incc );
void    clartv_( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *y, MKL_INT *incy, float *c, MKL_Complex8 *s, MKL_INT *incc );
void    CLARZ( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    CLARZ_( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    clarz( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    clarz_( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work );
void    CLARZB( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *ldwork );
void    CLARZB_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *ldwork );
void    clarzb( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *ldwork );
void    clarzb_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *ldwork );
void    CLARZT( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt );
void    CLARZT_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt );
void    clarzt( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt );
void    clarzt_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *tau, MKL_Complex8 *t, MKL_INT *ldt );
void    CLASCL( char *type, MKL_INT *kl, MKL_INT *ku, float *cfrom, float *cto, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CLASCL_( char *type, MKL_INT *kl, MKL_INT *ku, float *cfrom, float *cto, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    clascl( char *type, MKL_INT *kl, MKL_INT *ku, float *cfrom, float *cto, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    clascl_( char *type, MKL_INT *kl, MKL_INT *ku, float *cfrom, float *cto, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CLASET( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *a, MKL_INT *lda );
void    CLASET_( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *a, MKL_INT *lda );
void    claset( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *a, MKL_INT *lda );
void    claset_( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *a, MKL_INT *lda );
void    CLASR( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, float *c, float *s, MKL_Complex8 *a, MKL_INT *lda );
void    CLASR_( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, float *c, float *s, MKL_Complex8 *a, MKL_INT *lda );
void    clasr( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, float *c, float *s, MKL_Complex8 *a, MKL_INT *lda );
void    clasr_( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, float *c, float *s, MKL_Complex8 *a, MKL_INT *lda );
void    CLASSQ( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, float *scale, float *sumsq );
void    CLASSQ_( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, float *scale, float *sumsq );
void    classq( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, float *scale, float *sumsq );
void    classq_( MKL_INT *n, MKL_Complex8 *x, MKL_INT *incx, float *scale, float *sumsq );
void    CLASWP( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    CLASWP_( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    claswp( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    claswp_( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    CLASYF( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *w, MKL_INT *ldw, MKL_INT *info );
void    CLASYF_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *w, MKL_INT *ldw, MKL_INT *info );
void    clasyf( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *w, MKL_INT *ldw, MKL_INT *info );
void    clasyf_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *w, MKL_INT *ldw, MKL_INT *info );
void    CLATBS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    CLATBS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    clatbs( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    clatbs_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    CLATDF( MKL_INT *ijob, MKL_INT *n, float *z, MKL_INT *ldz, float *rhs, float *rdsum, float *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    CLATDF_( MKL_INT *ijob, MKL_INT *n, float *z, MKL_INT *ldz, float *rhs, float *rdsum, float *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    clatdf( MKL_INT *ijob, MKL_INT *n, float *z, MKL_INT *ldz, float *rhs, float *rdsum, float *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    clatdf_( MKL_INT *ijob, MKL_INT *n, float *z, MKL_INT *ldz, float *rhs, float *rdsum, float *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    CLATPS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    CLATPS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    clatps( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    clatps_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    CLATRD( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, float *e, MKL_Complex8 *tau, MKL_Complex8 *w, MKL_INT *ldw );
void    CLATRD_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, float *e, MKL_Complex8 *tau, MKL_Complex8 *w, MKL_INT *ldw );
void    clatrd( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, float *e, MKL_Complex8 *tau, MKL_Complex8 *w, MKL_INT *ldw );
void    clatrd_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_Complex8 *a, MKL_INT *lda, float *e, MKL_Complex8 *tau, MKL_Complex8 *w, MKL_INT *ldw );
void    CLATRS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    CLATRS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    clatrs( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    clatrs_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *x, float *scale, float *cnorm, MKL_INT *info );
void    CLATRZ( MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work );
void    CLATRZ_( MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work );
void    clatrz( MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work );
void    clatrz_( MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work );
void    CLATZM( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c1, MKL_Complex8 *c2, MKL_INT *ldc, MKL_Complex8 *work );
void    CLATZM_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c1, MKL_Complex8 *c2, MKL_INT *ldc, MKL_Complex8 *work );
void    clatzm( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c1, MKL_Complex8 *c2, MKL_INT *ldc, MKL_Complex8 *work );
void    clatzm_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex8 *v, MKL_INT *incv, MKL_Complex8 *tau, MKL_Complex8 *c1, MKL_Complex8 *c2, MKL_INT *ldc, MKL_Complex8 *work );
void    CLAUU2( char *uplo, MKL_INT *n, float *a, float *lda, MKL_INT *info );
void    CLAUU2_( char *uplo, MKL_INT *n, float *a, float *lda, MKL_INT *info );
void    clauu2( char *uplo, MKL_INT *n, float *a, float *lda, MKL_INT *info );
void    clauu2_( char *uplo, MKL_INT *n, float *a, float *lda, MKL_INT *info );
void    CLAUUM( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CLAUUM_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    clauum( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    clauum_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CPBCON( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPBCON_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cpbcon( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cpbcon_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPBEQU( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, MKL_INT *info );
void    CPBEQU_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, MKL_INT *info );
void    cpbequ( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, MKL_INT *info );
void    cpbequ_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *s, float *scond, float *amax, MKL_INT *info );
void    CPBRFS( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPBRFS_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cpbrfs( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cpbrfs_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPBSTF( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    CPBSTF_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    cpbstf( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    cpbstf_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    CPBSV( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPBSV_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cpbsv( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cpbsv_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPBSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPBSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cpbsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cpbsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *afb, MKL_INT *ldafb, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPBTF2( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    CPBTF2_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    cpbtf2( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    cpbtf2_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    CPBTRF( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    CPBTRF_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    cpbtrf( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    cpbtrf_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, MKL_INT *info );
void    CPBTRS( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPBTRS_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cpbtrs( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cpbtrs_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPOCON( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPOCON_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cpocon( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cpocon_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPOEQU( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, MKL_INT *info );
void    CPOEQU_( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, MKL_INT *info );
void    cpoequ( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, MKL_INT *info );
void    cpoequ_( MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *s, float *scond, float *amax, MKL_INT *info );
void    CPORFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPORFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cporfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cporfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPOSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPOSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cposv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cposv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPOSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPOSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cposvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cposvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPOTF2( char *uplo, MKL_INT *n, float *a, float *lda, MKL_INT *info );
void    CPOTF2_( char *uplo, MKL_INT *n, float *a, float *lda, MKL_INT *info );
void    cpotf2( char *uplo, MKL_INT *n, float *a, float *lda, MKL_INT *info );
void    cpotf2_( char *uplo, MKL_INT *n, float *a, float *lda, MKL_INT *info );
void    CPOTRF( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CPOTRF_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    cpotrf( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    cpotrf_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CPOTRI( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CPOTRI_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    cpotri( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    cpotri_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CPOTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPOTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cpotrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cpotrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPPCON( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPPCON_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cppcon( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cppcon_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *anorm, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPPEQU( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, MKL_INT *info );
void    CPPEQU_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, MKL_INT *info );
void    cppequ( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, MKL_INT *info );
void    cppequ_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, float *s, float *scond, float *amax, MKL_INT *info );
void    CPPRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPPRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cpprfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cpprfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPPSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPPSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cppsv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cppsv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPPSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPPSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cppsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cppsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, char *equed, float *s, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPPTRF( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    CPPTRF_( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    cpptrf( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    cpptrf_( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    CPPTRI( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    CPPTRI_( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    cpptri( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    cpptri_( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    CPPTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPPTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cpptrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cpptrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPTCON( MKL_INT *n, float *d, MKL_Complex8 *e, float *anorm, float *rcond, float *rwork, MKL_INT *info );
void    CPTCON_( MKL_INT *n, float *d, MKL_Complex8 *e, float *anorm, float *rcond, float *rwork, MKL_INT *info );
void    cptcon( MKL_INT *n, float *d, MKL_Complex8 *e, float *anorm, float *rcond, float *rwork, MKL_INT *info );
void    cptcon_( MKL_INT *n, float *d, MKL_Complex8 *e, float *anorm, float *rcond, float *rwork, MKL_INT *info );
void    CPTEQR( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    CPTEQR_( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    cpteqr( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    cpteqr_( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    CPTRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, float *df, MKL_Complex8 *ef, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPTRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, float *df, MKL_Complex8 *ef, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cptrfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, float *df, MKL_Complex8 *ef, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cptrfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, float *df, MKL_Complex8 *ef, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPTSV( MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPTSV_( MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cptsv( MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cptsv_( MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPTSVX( char *fact, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, float *df, MKL_Complex8 *ef, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPTSVX_( char *fact, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, float *df, MKL_Complex8 *ef, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cptsvx( char *fact, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, float *df, MKL_Complex8 *ef, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cptsvx_( char *fact, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, float *df, MKL_Complex8 *ef, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CPTTRF( MKL_INT *n, float *d, MKL_Complex8 *e, MKL_INT *info );
void    CPTTRF_( MKL_INT *n, float *d, MKL_Complex8 *e, MKL_INT *info );
void    cpttrf( MKL_INT *n, float *d, MKL_Complex8 *e, MKL_INT *info );
void    cpttrf_( MKL_INT *n, float *d, MKL_Complex8 *e, MKL_INT *info );
void    CPTTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPTTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cpttrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cpttrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CPTTS2( MKL_INT *iuplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb );
void    CPTTS2_( MKL_INT *iuplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb );
void    cptts2( MKL_INT *iuplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb );
void    cptts2_( MKL_INT *iuplo, MKL_INT *n, MKL_INT *nrhs, float *d, MKL_Complex8 *e, MKL_Complex8 *b, MKL_INT *ldb );
void    CROT( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx, MKL_Complex8 *cy, MKL_INT *incy, float *c, MKL_Complex8 *s );
void    CROT_( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx, MKL_Complex8 *cy, MKL_INT *incy, float *c, MKL_Complex8 *s );
void    crot( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx, MKL_Complex8 *cy, MKL_INT *incy, float *c, MKL_Complex8 *s );
void    crot_( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx, MKL_Complex8 *cy, MKL_INT *incy, float *c, MKL_Complex8 *s );
void    CSPCON( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    CSPCON_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    cspcon( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    cspcon_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    CSPMV( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *ap, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *beta, MKL_Complex8 *y, MKL_INT *incy );
void    CSPMV_( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *ap, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *beta, MKL_Complex8 *y, MKL_INT *incy );
void    cspmv( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *ap, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *beta, MKL_Complex8 *y, MKL_INT *incy );
void    cspmv_( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *ap, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *beta, MKL_Complex8 *y, MKL_INT *incy );
void    CSPR( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *ap );
void    CSPR_( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *ap );
void    cspr( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *ap );
void    cspr_( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *ap );
void    CSPRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CSPRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    csprfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    csprfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CSPSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CSPSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cspsv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    cspsv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CSPSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CSPSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cspsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    cspsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *afp, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CSPTRF( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_INT *info );
void    CSPTRF_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_INT *info );
void    csptrf( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_INT *info );
void    csptrf_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_INT *info );
void    CSPTRI( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *info );
void    CSPTRI_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *info );
void    csptri( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *info );
void    csptri_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *info );
void    CSPTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CSPTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    csptrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    csptrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CSRSCL( MKL_INT *n, float *sa, MKL_Complex8 *sx, MKL_INT *incx );
void    CSRSCL_( MKL_INT *n, float *sa, MKL_Complex8 *sx, MKL_INT *incx );
void    csrscl( MKL_INT *n, float *sa, MKL_Complex8 *sx, MKL_INT *incx );
void    csrscl_( MKL_INT *n, float *sa, MKL_Complex8 *sx, MKL_INT *incx );
void    CSTEDC( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CSTEDC_( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    cstedc( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    cstedc_( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CSTEGR( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CSTEGR_( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    cstegr( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    cstegr_( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CSTEIN( MKL_INT *n, float *d, float *e, MKL_INT *m, float *w, MKL_INT *iblock, MKL_INT *isplit, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CSTEIN_( MKL_INT *n, float *d, float *e, MKL_INT *m, float *w, MKL_INT *iblock, MKL_INT *isplit, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    cstein( MKL_INT *n, float *d, float *e, MKL_INT *m, float *w, MKL_INT *iblock, MKL_INT *isplit, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    cstein_( MKL_INT *n, float *d, float *e, MKL_INT *m, float *w, MKL_INT *iblock, MKL_INT *isplit, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    CSTEQR( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    CSTEQR_( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    csteqr( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    csteqr_( char *compz, MKL_INT *n, float *d, float *e, MKL_Complex8 *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    CSYCON( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    CSYCON_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    csycon( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    csycon_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, MKL_Complex8 *work, MKL_INT *info );
void    CSYMV( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *beta, MKL_Complex8 *y, MKL_INT *incy );
void    CSYMV_( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *beta, MKL_Complex8 *y, MKL_INT *incy );
void    csymv( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *beta, MKL_Complex8 *y, MKL_INT *incy );
void    csymv_( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *beta, MKL_Complex8 *y, MKL_INT *incy );
void    CSYR( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *a, MKL_INT *lda );
void    CSYR_( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *a, MKL_INT *lda );
void    csyr( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *a, MKL_INT *lda );
void    csyr_( char *uplo, MKL_INT *n, MKL_Complex8 *alpha, MKL_Complex8 *x, MKL_INT *incx, MKL_Complex8 *a, MKL_INT *lda );
void    CSYRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CSYRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    csyrfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    csyrfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CSYSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CSYSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    csysv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    csysv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CSYSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CSYSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    csysvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    csysvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, MKL_Complex8 *work, MKL_INT *lwork, float *rwork, MKL_INT *info );
void    CSYTF2( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    CSYTF2_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    csytf2( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    csytf2_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    CSYTRF( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CSYTRF_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    csytrf( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    csytrf_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CSYTRI( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *info );
void    CSYTRI_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *info );
void    csytri( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *info );
void    csytri_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *work, MKL_INT *info );
void    CSYTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CSYTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    csytrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    csytrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CTBCON( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTBCON_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctbcon( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctbcon_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, MKL_Complex8 *ab, MKL_INT *ldab, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTBRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTBRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctbrfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctbrfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTBTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CTBTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    ctbtrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    ctbtrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex8 *ab, MKL_INT *ldab, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CTGEVC( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTGEVC_( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctgevc( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctgevc_( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTGEX2( void *wantq, void *wantz, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *info );
void    CTGEX2_( void *wantq, void *wantz, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *info );
void    ctgex2( void *wantq, void *wantz, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *info );
void    ctgex2_( void *wantq, void *wantz, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *info );
void    CTGEXC( void *wantq, void *wantz, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    CTGEXC_( void *wantq, void *wantz, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ctgexc( void *wantq, void *wantz, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ctgexc_( void *wantq, void *wantz, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    CTGSEN( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *m, float *pl, float *pr, float *dif, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CTGSEN_( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *m, float *pl, float *pr, float *dif, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ctgsen( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *m, float *pl, float *pr, float *dif, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ctgsen_( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *alpha, MKL_Complex8 *beta, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *z, MKL_INT *ldz, MKL_INT *m, float *pl, float *pr, float *dif, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    CTGSJA( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *tola, float *tolb, float *alpha, float *beta, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *ncycle, MKL_INT *info );
void    CTGSJA_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *tola, float *tolb, float *alpha, float *beta, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *ncycle, MKL_INT *info );
void    ctgsja( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *tola, float *tolb, float *alpha, float *beta, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *ncycle, MKL_INT *info );
void    ctgsja_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, float *tola, float *tolb, float *alpha, float *beta, MKL_Complex8 *u, MKL_INT *ldu, MKL_Complex8 *v, MKL_INT *ldv, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *ncycle, MKL_INT *info );
void    CTGSNA( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, float *s, float *dif, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    CTGSNA_( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, float *s, float *dif, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ctgsna( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, float *s, float *dif, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ctgsna_( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, float *s, float *dif, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    CTGSY2( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *d, MKL_INT *ldd, MKL_Complex8 *e, MKL_INT *lde, MKL_Complex8 *f, MKL_INT *ldf, float *scale, float *rdsum, float *rdscal, MKL_INT *info );
void    CTGSY2_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *d, MKL_INT *ldd, MKL_Complex8 *e, MKL_INT *lde, MKL_Complex8 *f, MKL_INT *ldf, float *scale, float *rdsum, float *rdscal, MKL_INT *info );
void    ctgsy2( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *d, MKL_INT *ldd, MKL_Complex8 *e, MKL_INT *lde, MKL_Complex8 *f, MKL_INT *ldf, float *scale, float *rdsum, float *rdscal, MKL_INT *info );
void    ctgsy2_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *d, MKL_INT *ldd, MKL_Complex8 *e, MKL_INT *lde, MKL_Complex8 *f, MKL_INT *ldf, float *scale, float *rdsum, float *rdscal, MKL_INT *info );
void    CTGSYL( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *d, MKL_INT *ldd, MKL_Complex8 *e, MKL_INT *lde, MKL_Complex8 *f, MKL_INT *ldf, float *scale, float *dif, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    CTGSYL_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *d, MKL_INT *ldd, MKL_Complex8 *e, MKL_INT *lde, MKL_Complex8 *f, MKL_INT *ldf, float *scale, float *dif, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ctgsyl( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *d, MKL_INT *ldd, MKL_Complex8 *e, MKL_INT *lde, MKL_Complex8 *f, MKL_INT *ldf, float *scale, float *dif, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ctgsyl_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *d, MKL_INT *ldd, MKL_Complex8 *e, MKL_INT *lde, MKL_Complex8 *f, MKL_INT *ldf, float *scale, float *dif, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    CTPCON( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTPCON_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctpcon( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctpcon_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTPRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTPRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctprfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctprfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTPTRI( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *info );
void    CTPTRI_( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *info );
void    ctptri( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *info );
void    ctptri_( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *ap, MKL_INT *info );
void    CTPTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CTPTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    ctptrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    ctptrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *ap, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CTRCON( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTRCON_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctrcon( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctrcon_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, float *rcond, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTREVC( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTREVC_( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctrevc( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctrevc_( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTREXC( char *compq, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    CTREXC_( char *compq, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ctrexc( char *compq, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ctrexc_( char *compq, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    CTRRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTRRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctrrfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    ctrrfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *x, MKL_INT *ldx, float *ferr, float *berr, MKL_Complex8 *work, float *rwork, MKL_INT *info );
void    CTRSEN( char *job, char *compq, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *w, MKL_INT *m, float *s, float *sep, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CTRSEN_( char *job, char *compq, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *w, MKL_INT *m, float *s, float *sep, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    ctrsen( char *job, char *compq, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *w, MKL_INT *m, float *s, float *sep, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    ctrsen_( char *job, char *compq, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *w, MKL_INT *m, float *s, float *sep, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CTRSNA( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, float *s, float *sep, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, MKL_INT *ldwork, float *rwork, MKL_INT *info );
void    CTRSNA_( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, float *s, float *sep, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, MKL_INT *ldwork, float *rwork, MKL_INT *info );
void    ctrsna( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, float *s, float *sep, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, MKL_INT *ldwork, float *rwork, MKL_INT *info );
void    ctrsna_( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex8 *t, MKL_INT *ldt, MKL_Complex8 *vl, MKL_INT *ldvl, MKL_Complex8 *vr, MKL_INT *ldvr, float *s, float *sep, MKL_INT *mm, MKL_INT *m, MKL_Complex8 *work, MKL_INT *ldwork, float *rwork, MKL_INT *info );
void    CTRSYL( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *scale, MKL_INT *info );
void    CTRSYL_( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *scale, MKL_INT *info );
void    ctrsyl( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *scale, MKL_INT *info );
void    ctrsyl_( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_Complex8 *c, MKL_INT *ldc, float *scale, MKL_INT *info );
void    CTRTI2( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CTRTI2_( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    ctrti2( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    ctrti2_( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CTRTRI( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CTRTRI_( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    ctrtri( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    ctrtri_( char *uplo, char *diag, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_INT *info );
void    CTRTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CTRTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    ctrtrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    ctrtrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *b, MKL_INT *ldb, MKL_INT *info );
void    CTZRQF( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_INT *info );
void    CTZRQF_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_INT *info );
void    ctzrqf( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_INT *info );
void    ctzrqf_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_INT *info );
void    CTZRZF( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CTZRZF_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    ctzrzf( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    ctzrzf_( MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNG2L( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CUNG2L_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cung2l( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cung2l_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CUNG2R( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CUNG2R_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cung2r( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cung2r_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CUNGBR( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGBR_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cungbr( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cungbr_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGHR( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGHR_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunghr( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunghr_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGL2( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CUNGL2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cungl2( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cungl2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CUNGLQ( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGLQ_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunglq( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunglq_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGQL( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGQL_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cungql( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cungql_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGQR( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGQR_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cungqr( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cungqr_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGR2( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CUNGR2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cungr2( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    cungr2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *info );
void    CUNGRQ( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGRQ_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cungrq( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cungrq_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGTR( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNGTR_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cungtr( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cungtr_( char *uplo, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNM2L( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUNM2L_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cunm2l( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cunm2l_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUNM2R( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUNM2R_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cunm2r( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cunm2r_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUNMBR( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMBR_( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmbr( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmbr_( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMHR( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMHR_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmhr( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmhr_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNML2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUNML2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cunml2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cunml2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUNMLQ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMLQ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmlq( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmlq_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMQL( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMQL_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmql( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmql_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMQR( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMQR_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmqr( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmqr_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMR2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUNMR2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cunmr2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cunmr2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUNMR3( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUNMR3_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cunmr3( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cunmr3_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUNMRQ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMRQ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmrq( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmrq_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMRZ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMRZ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmrz( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmrz_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMTR( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUNMTR_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmtr( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    cunmtr_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex8 *a, MKL_INT *lda, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *lwork, MKL_INT *info );
void    CUPGTR( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *tau, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *info );
void    CUPGTR_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *tau, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *info );
void    cupgtr( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *tau, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *info );
void    cupgtr_( char *uplo, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *tau, MKL_Complex8 *q, MKL_INT *ldq, MKL_Complex8 *work, MKL_INT *info );
void    CUPMTR( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    CUPMTR_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cupmtr( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
void    cupmtr_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex8 *ap, MKL_Complex8 *tau, MKL_Complex8 *c, MKL_INT *ldc, MKL_Complex8 *work, MKL_INT *info );
MKL_INT     ICMAX1( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx );
MKL_INT     ICMAX1_( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx );
MKL_INT     icmax1( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx );
MKL_INT     icmax1_( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx );
void    SBDSDC( char *uplo, char *compq, MKL_INT *n, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *q, MKL_INT *iq, float *work, MKL_INT *iwork, MKL_INT *info );
void    SBDSDC_( char *uplo, char *compq, MKL_INT *n, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *q, MKL_INT *iq, float *work, MKL_INT *iwork, MKL_INT *info );
void    sbdsdc( char *uplo, char *compq, MKL_INT *n, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *q, MKL_INT *iq, float *work, MKL_INT *iwork, MKL_INT *info );
void    sbdsdc_( char *uplo, char *compq, MKL_INT *n, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *q, MKL_INT *iq, float *work, MKL_INT *iwork, MKL_INT *info );
void    SBDSQR( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, float *vt, MKL_INT *ldvt, float *u, MKL_INT *ldu, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SBDSQR_( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, float *vt, MKL_INT *ldvt, float *u, MKL_INT *ldu, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sbdsqr( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, float *vt, MKL_INT *ldvt, float *u, MKL_INT *ldu, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sbdsqr_( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, float *vt, MKL_INT *ldvt, float *u, MKL_INT *ldu, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
float   SCSUM1( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx );
float   SCSUM1_( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx );
float   scsum1( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx );
float   scsum1_( MKL_INT *n, MKL_Complex8 *cx, MKL_INT *incx );
void    SDISNA( char *job, MKL_INT *m, MKL_INT *n, float *d, float *sep, MKL_INT *info );
void    SDISNA_( char *job, MKL_INT *m, MKL_INT *n, float *d, float *sep, MKL_INT *info );
void    sdisna( char *job, MKL_INT *m, MKL_INT *n, float *d, float *sep, MKL_INT *info );
void    sdisna_( char *job, MKL_INT *m, MKL_INT *n, float *d, float *sep, MKL_INT *info );
float   SECOND( );
float   SECOND_( );
float   second( );
float   second_( );
void    SGBBRD( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *d, float *e, float *q, MKL_INT *ldq, float *pt, MKL_INT *ldpt, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SGBBRD_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *d, float *e, float *q, MKL_INT *ldq, float *pt, MKL_INT *ldpt, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sgbbrd( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *d, float *e, float *q, MKL_INT *ldq, float *pt, MKL_INT *ldpt, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sgbbrd_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *d, float *e, float *q, MKL_INT *ldq, float *pt, MKL_INT *ldpt, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SGBCON( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGBCON_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgbcon( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgbcon_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGBEQU( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    SGBEQU_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    sgbequ( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    sgbequ_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    SGBRFS( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGBRFS_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgbrfs( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgbrfs_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGBSV( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGBSV_( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgbsv( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgbsv_( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGBSVX( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, float *r, float *c, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGBSVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, float *r, float *c, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgbsvx( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, float *r, float *c, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgbsvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, float *r, float *c, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGBTF2( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    SGBTF2_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    sgbtf2( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    sgbtf2_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    SGBTRF( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    SGBTRF_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    sgbtrf( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    sgbtrf_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    SGBTRS( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGBTRS_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgbtrs( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgbtrs_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, float *ab, MKL_INT *ldab, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGEBAK( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *m, float *v, MKL_INT *ldv, MKL_INT *info );
void    SGEBAK_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *m, float *v, MKL_INT *ldv, MKL_INT *info );
void    sgebak( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *m, float *v, MKL_INT *ldv, MKL_INT *info );
void    sgebak_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *m, float *v, MKL_INT *ldv, MKL_INT *info );
void    SGEBAL( char *job, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *info );
void    SGEBAL_( char *job, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *info );
void    sgebal( char *job, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *info );
void    sgebal_( char *job, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, float *scale, MKL_INT *info );
void    SGEBD2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *work, MKL_INT *info );
void    SGEBD2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *work, MKL_INT *info );
void    sgebd2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *work, MKL_INT *info );
void    sgebd2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *work, MKL_INT *info );
void    SGEBRD( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEBRD_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgebrd( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgebrd_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGECON( char *norm, MKL_INT *n, float *a, MKL_INT *lda, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGECON_( char *norm, MKL_INT *n, float *a, MKL_INT *lda, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgecon( char *norm, MKL_INT *n, float *a, MKL_INT *lda, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgecon_( char *norm, MKL_INT *n, float *a, MKL_INT *lda, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGEEQU( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    SGEEQU_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    sgeequ( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    sgeequ_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, MKL_INT *info );
void    SGEES( char *jobvs, char *sort, void *select, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *sdim, float *wr, float *wi, float *vs, MKL_INT *ldvs, float *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    SGEES_( char *jobvs, char *sort, void *select, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *sdim, float *wr, float *wi, float *vs, MKL_INT *ldvs, float *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    sgees( char *jobvs, char *sort, void *select, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *sdim, float *wr, float *wi, float *vs, MKL_INT *ldvs, float *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    sgees_( char *jobvs, char *sort, void *select, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *sdim, float *wr, float *wi, float *vs, MKL_INT *ldvs, float *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    SGEESX( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *sdim, float *wr, float *wi, float *vs, MKL_INT *ldvs, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    SGEESX_( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *sdim, float *wr, float *wi, float *vs, MKL_INT *ldvs, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    sgeesx( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *sdim, float *wr, float *wi, float *vs, MKL_INT *ldvs, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    sgeesx_( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *sdim, float *wr, float *wi, float *vs, MKL_INT *ldvs, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    SGEEV( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEEV_( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgeev( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgeev_( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEEVX( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    SGEEVX_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    sgeevx( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    sgeevx_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    SGEGS( char *jobvsl, char *jobvsr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEGS_( char *jobvsl, char *jobvsr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgegs( char *jobvsl, char *jobvsr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgegs_( char *jobvsl, char *jobvsr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEGV( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEGV_( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgegv( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgegv_( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEHD2( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SGEHD2_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sgehd2( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sgehd2_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SGEHRD( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEHRD_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgehrd( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgehrd_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGELQ2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SGELQ2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sgelq2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sgelq2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SGELQF( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGELQF_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgelqf( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgelqf_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGELS( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGELS_( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgels( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgels_( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGELSD( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    SGELSD_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    sgelsd( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    sgelsd_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    SGELSS( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGELSS_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgelss( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgelss_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *s, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGELSX( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, float *work, MKL_INT *info );
void    SGELSX_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, float *work, MKL_INT *info );
void    sgelsx( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, float *work, MKL_INT *info );
void    sgelsx_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, float *work, MKL_INT *info );
void    SGELSY( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGELSY_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgelsy( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgelsy_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *jpvt, float *rcond, MKL_INT *rank, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEQL2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SGEQL2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sgeql2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sgeql2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SGEQLF( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEQLF_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgeqlf( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgeqlf_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEQP3( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEQP3_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgeqp3( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgeqp3_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEQPF( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *work, MKL_INT *info );
void    SGEQPF_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *work, MKL_INT *info );
void    sgeqpf( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *work, MKL_INT *info );
void    sgeqpf_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *work, MKL_INT *info );
void    SGEQR2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SGEQR2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sgeqr2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sgeqr2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SGEQRF( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGEQRF_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgeqrf( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgeqrf_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGERFS( char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGERFS_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgerfs( char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgerfs_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGERQ2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SGERQ2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sgerq2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sgerq2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SGERQF( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGERQF_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgerqf( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgerqf_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGESC2( MKL_INT *n, float *a, MKL_INT *lda, float *rhs, MKL_INT *ipiv, MKL_INT *jpiv, float *scale );
void    SGESC2_( MKL_INT *n, float *a, MKL_INT *lda, float *rhs, MKL_INT *ipiv, MKL_INT *jpiv, float *scale );
void    sgesc2( MKL_INT *n, float *a, MKL_INT *lda, float *rhs, MKL_INT *ipiv, MKL_INT *jpiv, float *scale );
void    sgesc2_( MKL_INT *n, float *a, MKL_INT *lda, float *rhs, MKL_INT *ipiv, MKL_INT *jpiv, float *scale );
void    SGESDD( char *jobz, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    SGESDD_( char *jobz, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    sgesdd( char *jobz, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    sgesdd_( char *jobz, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    SGESV( MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGESV_( MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgesv( MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgesv_( MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGESVD( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGESVD_( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgesvd( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgesvd_( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGESVX( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, float *r, float *c, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGESVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, float *r, float *c, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgesvx( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, float *r, float *c, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgesvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, float *r, float *c, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGETC2( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    SGETC2_( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    sgetc2( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    sgetc2_( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    SGETF2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    SGETF2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    sgetf2( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    sgetf2_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    SGETRF( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    SGETRF_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    sgetrf( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    sgetrf_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    SGETRI( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGETRI_( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgetri( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgetri_( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGETRS( char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGETRS_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgetrs( char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgetrs_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGGBAK( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, MKL_INT *m, float *v, MKL_INT *ldv, MKL_INT *info );
void    SGGBAK_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, MKL_INT *m, float *v, MKL_INT *ldv, MKL_INT *info );
void    sggbak( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, MKL_INT *m, float *v, MKL_INT *ldv, MKL_INT *info );
void    sggbak_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, MKL_INT *m, float *v, MKL_INT *ldv, MKL_INT *info );
void    SGGBAL( char *job, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *work, MKL_INT *info );
void    SGGBAL_( char *job, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *work, MKL_INT *info );
void    sggbal( char *job, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *work, MKL_INT *info );
void    sggbal_( char *job, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *work, MKL_INT *info );
void    SGGES( char *jobvsl, char *jobvsr, char *sort, void *selctg, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *sdim, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    SGGES_( char *jobvsl, char *jobvsr, char *sort, void *selctg, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *sdim, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    sgges( char *jobvsl, char *jobvsr, char *sort, void *selctg, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *sdim, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    sgges_( char *jobvsl, char *jobvsr, char *sort, void *selctg, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *sdim, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    SGGESX( char *jobvsl, char *jobvsr, char *sort, void *selctg, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *sdim, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    SGGESX_( char *jobvsl, char *jobvsr, char *sort, void *selctg, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *sdim, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    sggesx( char *jobvsl, char *jobvsr, char *sort, void *selctg, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *sdim, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    sggesx_( char *jobvsl, char *jobvsr, char *sort, void *selctg, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *sdim, float *alphar, float *alphai, float *beta, float *vsl, MKL_INT *ldvsl, float *vsr, MKL_INT *ldvsr, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    SGGEV( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGGEV_( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    sggev( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    sggev_( char *jobvl, char *jobvr, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGGEVX( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    SGGEVX_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    sggevx( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    sggevx_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, float *work, MKL_INT *lwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    SGGGLM( MKL_INT *n, MKL_INT *m, MKL_INT *p, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *d, float *x, float *y, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGGGLM_( MKL_INT *n, MKL_INT *m, MKL_INT *p, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *d, float *x, float *y, float *work, MKL_INT *lwork, MKL_INT *info );
void    sggglm( MKL_INT *n, MKL_INT *m, MKL_INT *p, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *d, float *x, float *y, float *work, MKL_INT *lwork, MKL_INT *info );
void    sggglm_( MKL_INT *n, MKL_INT *m, MKL_INT *p, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *d, float *x, float *y, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGGHRD( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *info );
void    SGGHRD_( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *info );
void    sgghrd( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *info );
void    sgghrd_( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *info );
void    SGGLSE( MKL_INT *m, MKL_INT *n, MKL_INT *p, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, float *d, float *x, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGGLSE_( MKL_INT *m, MKL_INT *n, MKL_INT *p, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, float *d, float *x, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgglse( MKL_INT *m, MKL_INT *n, MKL_INT *p, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, float *d, float *x, float *work, MKL_INT *lwork, MKL_INT *info );
void    sgglse_( MKL_INT *m, MKL_INT *n, MKL_INT *p, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, float *d, float *x, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGGQRF( MKL_INT *n, MKL_INT *m, MKL_INT *p, float *a, MKL_INT *lda, float *taua, float *b, MKL_INT *ldb, float *taub, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGGQRF_( MKL_INT *n, MKL_INT *m, MKL_INT *p, float *a, MKL_INT *lda, float *taua, float *b, MKL_INT *ldb, float *taub, float *work, MKL_INT *lwork, MKL_INT *info );
void    sggqrf( MKL_INT *n, MKL_INT *m, MKL_INT *p, float *a, MKL_INT *lda, float *taua, float *b, MKL_INT *ldb, float *taub, float *work, MKL_INT *lwork, MKL_INT *info );
void    sggqrf_( MKL_INT *n, MKL_INT *m, MKL_INT *p, float *a, MKL_INT *lda, float *taua, float *b, MKL_INT *ldb, float *taub, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGGRQF( MKL_INT *m, MKL_INT *p, MKL_INT *n, float *a, MKL_INT *lda, float *taua, float *b, MKL_INT *ldb, float *taub, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGGRQF_( MKL_INT *m, MKL_INT *p, MKL_INT *n, float *a, MKL_INT *lda, float *taua, float *b, MKL_INT *ldb, float *taub, float *work, MKL_INT *lwork, MKL_INT *info );
void    sggrqf( MKL_INT *m, MKL_INT *p, MKL_INT *n, float *a, MKL_INT *lda, float *taua, float *b, MKL_INT *ldb, float *taub, float *work, MKL_INT *lwork, MKL_INT *info );
void    sggrqf_( MKL_INT *m, MKL_INT *p, MKL_INT *n, float *a, MKL_INT *lda, float *taua, float *b, MKL_INT *ldb, float *taub, float *work, MKL_INT *lwork, MKL_INT *info );
void    SGGSVD( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alpha, float *beta, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGGSVD_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alpha, float *beta, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, float *work, MKL_INT *iwork, MKL_INT *info );
void    sggsvd( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alpha, float *beta, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, float *work, MKL_INT *iwork, MKL_INT *info );
void    sggsvd_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alpha, float *beta, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGGSVP( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *tola, float *tolb, MKL_INT *k, MKL_INT *l, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, MKL_INT *iwork, float *tau, float *work, MKL_INT *info );
void    SGGSVP_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *tola, float *tolb, MKL_INT *k, MKL_INT *l, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, MKL_INT *iwork, float *tau, float *work, MKL_INT *info );
void    sggsvp( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *tola, float *tolb, MKL_INT *k, MKL_INT *l, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, MKL_INT *iwork, float *tau, float *work, MKL_INT *info );
void    sggsvp_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *tola, float *tolb, MKL_INT *k, MKL_INT *l, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, MKL_INT *iwork, float *tau, float *work, MKL_INT *info );
void    SGTCON( char *norm, MKL_INT *n, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGTCON_( char *norm, MKL_INT *n, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgtcon( char *norm, MKL_INT *n, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgtcon_( char *norm, MKL_INT *n, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGTRFS( char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGTRFS_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgtrfs( char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgtrfs_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGTSV( MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGTSV_( MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgtsv( MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgtsv_( MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGTSVX( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGTSVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgtsvx( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sgtsvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SGTTRF( MKL_INT *n, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, MKL_INT *info );
void    SGTTRF_( MKL_INT *n, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, MKL_INT *info );
void    sgttrf( MKL_INT *n, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, MKL_INT *info );
void    sgttrf_( MKL_INT *n, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, MKL_INT *info );
void    SGTTRS( char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGTTRS_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgttrs( char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sgttrs_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SGTTS2( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb );
void    SGTTS2_( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb );
void    sgtts2( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb );
void    sgtts2_( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, float *dl, float *d, float *du, float *du2, MKL_INT *ipiv, float *b, MKL_INT *ldb );
void    SHGEQZ( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    SHGEQZ_( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    shgeqz( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    shgeqz_( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    SHSEIN( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, float *h, MKL_INT *ldh, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    SHSEIN_( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, float *h, MKL_INT *ldh, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    shsein( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, float *h, MKL_INT *ldh, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    shsein_( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, float *h, MKL_INT *ldh, float *wr, float *wi, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    SHSEQR( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, float *wr, float *wi, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    SHSEQR_( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, float *wr, float *wi, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    shseqr( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, float *wr, float *wi, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    shseqr_( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, float *wr, float *wi, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    SLABAD( float *, float * );
void    SLABAD_( float *, float * );
void    slabad( float *, float * );
void    slabad_( float *, float * );
void    SLABRD( MKL_INT *m, MKL_INT *n, MKL_INT *nb, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *x, MKL_INT *ldx, float *y, MKL_INT *ldy );
void    SLABRD_( MKL_INT *m, MKL_INT *n, MKL_INT *nb, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *x, MKL_INT *ldx, float *y, MKL_INT *ldy );
void    slabrd( MKL_INT *m, MKL_INT *n, MKL_INT *nb, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *x, MKL_INT *ldx, float *y, MKL_INT *ldy );
void    slabrd_( MKL_INT *m, MKL_INT *n, MKL_INT *nb, float *a, MKL_INT *lda, float *d, float *e, float *tauq, float *taup, float *x, MKL_INT *ldx, float *y, MKL_INT *ldy );
void    SLACON( MKL_INT *n, float *v, float *x, MKL_INT *isgn, float *est, MKL_INT *kase );
void    SLACON_( MKL_INT *n, float *v, float *x, MKL_INT *isgn, float *est, MKL_INT *kase );
void    slacon( MKL_INT *n, float *v, float *x, MKL_INT *isgn, float *est, MKL_INT *kase );
void    slacon_( MKL_INT *n, float *v, float *x, MKL_INT *isgn, float *est, MKL_INT *kase );
void    SLACPY( char *uplo, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb );
void    SLACPY_( char *uplo, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb );
void    slacpy( char *uplo, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb );
void    slacpy_( char *uplo, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb );
void    SLADIV( float *a, float *b, float *c, float *d, float *p, float *q );
void    SLADIV_( float *a, float *b, float *c, float *d, float *p, float *q );
void    sladiv( float *a, float *b, float *c, float *d, float *p, float *q );
void    sladiv_( float *a, float *b, float *c, float *d, float *p, float *q );
void    SLAE2( float *a, float *b, float *c, float *rt1, float *rt2 );
void    SLAE2_( float *a, float *b, float *c, float *rt1, float *rt2 );
void    slae2( float *a, float *b, float *c, float *rt1, float *rt2 );
void    slae2_( float *a, float *b, float *c, float *rt1, float *rt2 );
void    SLAEBZ( MKL_INT *ijob, MKL_INT *nitmax, MKL_INT *n, MKL_INT *mmax, MKL_INT *minp, MKL_INT *nbmin, float *abstol, float *reltol, float *pivmin, float *d, float *e, float *e2, MKL_INT *nval, float *ab, float *c, MKL_INT *mout, MKL_INT *nab, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLAEBZ_( MKL_INT *ijob, MKL_INT *nitmax, MKL_INT *n, MKL_INT *mmax, MKL_INT *minp, MKL_INT *nbmin, float *abstol, float *reltol, float *pivmin, float *d, float *e, float *e2, MKL_INT *nval, float *ab, float *c, MKL_INT *mout, MKL_INT *nab, float *work, MKL_INT *iwork, MKL_INT *info );
void    slaebz( MKL_INT *ijob, MKL_INT *nitmax, MKL_INT *n, MKL_INT *mmax, MKL_INT *minp, MKL_INT *nbmin, float *abstol, float *reltol, float *pivmin, float *d, float *e, float *e2, MKL_INT *nval, float *ab, float *c, MKL_INT *mout, MKL_INT *nab, float *work, MKL_INT *iwork, MKL_INT *info );
void    slaebz_( MKL_INT *ijob, MKL_INT *nitmax, MKL_INT *n, MKL_INT *mmax, MKL_INT *minp, MKL_INT *nbmin, float *abstol, float *reltol, float *pivmin, float *d, float *e, float *e2, MKL_INT *nval, float *ab, float *c, MKL_INT *mout, MKL_INT *nab, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLAED0( MKL_INT *icompq, MKL_INT *qsiz, MKL_INT *n, float *d, float *e, float *q, MKL_INT *ldq, float *qstore, MKL_INT *ldqs, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLAED0_( MKL_INT *icompq, MKL_INT *qsiz, MKL_INT *n, float *d, float *e, float *q, MKL_INT *ldq, float *qstore, MKL_INT *ldqs, float *work, MKL_INT *iwork, MKL_INT *info );
void    slaed0( MKL_INT *icompq, MKL_INT *qsiz, MKL_INT *n, float *d, float *e, float *q, MKL_INT *ldq, float *qstore, MKL_INT *ldqs, float *work, MKL_INT *iwork, MKL_INT *info );
void    slaed0_( MKL_INT *icompq, MKL_INT *qsiz, MKL_INT *n, float *d, float *e, float *q, MKL_INT *ldq, float *qstore, MKL_INT *ldqs, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLAED1( MKL_INT *n, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLAED1_( MKL_INT *n, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *work, MKL_INT *iwork, MKL_INT *info );
void    slaed1( MKL_INT *n, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *work, MKL_INT *iwork, MKL_INT *info );
void    slaed1_( MKL_INT *n, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLAED2( MKL_INT *k, MKL_INT *n, MKL_INT *n1, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, float *z, float *dlamda, float *w, float *q2, MKL_INT *indx, MKL_INT *indxc, MKL_INT *indxp, MKL_INT *coltyp, MKL_INT *info );
void    SLAED2_( MKL_INT *k, MKL_INT *n, MKL_INT *n1, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, float *z, float *dlamda, float *w, float *q2, MKL_INT *indx, MKL_INT *indxc, MKL_INT *indxp, MKL_INT *coltyp, MKL_INT *info );
void    slaed2( MKL_INT *k, MKL_INT *n, MKL_INT *n1, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, float *z, float *dlamda, float *w, float *q2, MKL_INT *indx, MKL_INT *indxc, MKL_INT *indxp, MKL_INT *coltyp, MKL_INT *info );
void    slaed2_( MKL_INT *k, MKL_INT *n, MKL_INT *n1, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, float *z, float *dlamda, float *w, float *q2, MKL_INT *indx, MKL_INT *indxc, MKL_INT *indxp, MKL_INT *coltyp, MKL_INT *info );
void    SLAED3( MKL_INT *k, MKL_INT *n, MKL_INT *n1, float *d, float *q, MKL_INT *ldq, float *rho, float *dlamda, float *q2, MKL_INT *indx, MKL_INT *ctot, float *w, float *s, MKL_INT *info );
void    SLAED3_( MKL_INT *k, MKL_INT *n, MKL_INT *n1, float *d, float *q, MKL_INT *ldq, float *rho, float *dlamda, float *q2, MKL_INT *indx, MKL_INT *ctot, float *w, float *s, MKL_INT *info );
void    slaed3( MKL_INT *k, MKL_INT *n, MKL_INT *n1, float *d, float *q, MKL_INT *ldq, float *rho, float *dlamda, float *q2, MKL_INT *indx, MKL_INT *ctot, float *w, float *s, MKL_INT *info );
void    slaed3_( MKL_INT *k, MKL_INT *n, MKL_INT *n1, float *d, float *q, MKL_INT *ldq, float *rho, float *dlamda, float *q2, MKL_INT *indx, MKL_INT *ctot, float *w, float *s, MKL_INT *info );
void    SLAED4( MKL_INT *n, MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dlam, MKL_INT *info );
void    SLAED4_( MKL_INT *n, MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dlam, MKL_INT *info );
void    slaed4( MKL_INT *n, MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dlam, MKL_INT *info );
void    slaed4_( MKL_INT *n, MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dlam, MKL_INT *info );
void    SLAED5( MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dlam );
void    SLAED5_( MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dlam );
void    slaed5( MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dlam );
void    slaed5_( MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dlam );
void    SLAED6( MKL_INT *kniter, void *orgati, float *rho, float *d, float *z, float *finit, float *tau, MKL_INT *info );
void    SLAED6_( MKL_INT *kniter, void *orgati, float *rho, float *d, float *z, float *finit, float *tau, MKL_INT *info );
void    slaed6( MKL_INT *kniter, void *orgati, float *rho, float *d, float *z, float *finit, float *tau, MKL_INT *info );
void    slaed6_( MKL_INT *kniter, void *orgati, float *rho, float *d, float *z, float *finit, float *tau, MKL_INT *info );
void    SLAED7( MKL_INT *icompq, MKL_INT *n, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLAED7_( MKL_INT *icompq, MKL_INT *n, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, float *work, MKL_INT *iwork, MKL_INT *info );
void    slaed7( MKL_INT *icompq, MKL_INT *n, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, float *work, MKL_INT *iwork, MKL_INT *info );
void    slaed7_( MKL_INT *icompq, MKL_INT *n, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLAED8( MKL_INT *icompq, MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *z, float *dlamda, float *q2, MKL_INT *ldq2, float *w, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_INT *indxp, MKL_INT *indx, MKL_INT *info );
void    SLAED8_( MKL_INT *icompq, MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *z, float *dlamda, float *q2, MKL_INT *ldq2, float *w, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_INT *indxp, MKL_INT *indx, MKL_INT *info );
void    slaed8( MKL_INT *icompq, MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *z, float *dlamda, float *q2, MKL_INT *ldq2, float *w, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_INT *indxp, MKL_INT *indx, MKL_INT *info );
void    slaed8_( MKL_INT *icompq, MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, float *d, float *q, MKL_INT *ldq, MKL_INT *indxq, float *rho, MKL_INT *cutpnt, float *z, float *dlamda, float *q2, MKL_INT *ldq2, float *w, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, MKL_INT *indxp, MKL_INT *indx, MKL_INT *info );
void    SLAED9( MKL_INT *k, MKL_INT *kstart, MKL_INT *kstop, MKL_INT *n, float *d, float *q, MKL_INT *ldq, float *rho, float *dlamda, float *w, float *s, MKL_INT *lds, MKL_INT *info );
void    SLAED9_( MKL_INT *k, MKL_INT *kstart, MKL_INT *kstop, MKL_INT *n, float *d, float *q, MKL_INT *ldq, float *rho, float *dlamda, float *w, float *s, MKL_INT *lds, MKL_INT *info );
void    slaed9( MKL_INT *k, MKL_INT *kstart, MKL_INT *kstop, MKL_INT *n, float *d, float *q, MKL_INT *ldq, float *rho, float *dlamda, float *w, float *s, MKL_INT *lds, MKL_INT *info );
void    slaed9_( MKL_INT *k, MKL_INT *kstart, MKL_INT *kstop, MKL_INT *n, float *d, float *q, MKL_INT *ldq, float *rho, float *dlamda, float *w, float *s, MKL_INT *lds, MKL_INT *info );
void    SLAEDA( MKL_INT *n, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, float *q, MKL_INT *qptr, float *z, float *ztemp, MKL_INT *info );
void    SLAEDA_( MKL_INT *n, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, float *q, MKL_INT *qptr, float *z, float *ztemp, MKL_INT *info );
void    slaeda( MKL_INT *n, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, float *q, MKL_INT *qptr, float *z, float *ztemp, MKL_INT *info );
void    slaeda_( MKL_INT *n, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, float *givnum, float *q, MKL_INT *qptr, float *z, float *ztemp, MKL_INT *info );
void    SLAEIN( void *rightv, void *noinit, MKL_INT *n, float *h, MKL_INT *ldh, float *wr, float *wi, float *vr, float *vi, float *b, MKL_INT *ldb, float *work, float *eps3, float *smlnum, float *bignum, MKL_INT *info );
void    SLAEIN_( void *rightv, void *noinit, MKL_INT *n, float *h, MKL_INT *ldh, float *wr, float *wi, float *vr, float *vi, float *b, MKL_INT *ldb, float *work, float *eps3, float *smlnum, float *bignum, MKL_INT *info );
void    slaein( void *rightv, void *noinit, MKL_INT *n, float *h, MKL_INT *ldh, float *wr, float *wi, float *vr, float *vi, float *b, MKL_INT *ldb, float *work, float *eps3, float *smlnum, float *bignum, MKL_INT *info );
void    slaein_( void *rightv, void *noinit, MKL_INT *n, float *h, MKL_INT *ldh, float *wr, float *wi, float *vr, float *vi, float *b, MKL_INT *ldb, float *work, float *eps3, float *smlnum, float *bignum, MKL_INT *info );
void    SLAEV2( float *a, float *b, float *c, float *rt1, float *rt2, float *cs1, float *sn1 );
void    SLAEV2_( float *a, float *b, float *c, float *rt1, float *rt2, float *cs1, float *sn1 );
void    slaev2( float *a, float *b, float *c, float *rt1, float *rt2, float *cs1, float *sn1 );
void    slaev2_( float *a, float *b, float *c, float *rt1, float *rt2, float *cs1, float *sn1 );
void    SLAEXC( void *wantq, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, float *work, MKL_INT *info );
void    SLAEXC_( void *wantq, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, float *work, MKL_INT *info );
void    slaexc( void *wantq, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, float *work, MKL_INT *info );
void    slaexc_( void *wantq, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, float *work, MKL_INT *info );
void    SLAG2( float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *safmin, float *scale1, float *scale2, float *wr1, float *wr2, float *wi );
void    SLAG2_( float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *safmin, float *scale1, float *scale2, float *wr1, float *wr2, float *wi );
void    slag2( float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *safmin, float *scale1, float *scale2, float *wr1, float *wr2, float *wi );
void    slag2_( float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *safmin, float *scale1, float *scale2, float *wr1, float *wr2, float *wi );
void    SLAGS2( void *upper, float *a1, float *a2, float *a3, float *b1, float *b2, float *b3, float *csu, float *snu, float *csv, float *snv, float *csq, float *snq );
void    SLAGS2_( void *upper, float *a1, float *a2, float *a3, float *b1, float *b2, float *b3, float *csu, float *snu, float *csv, float *snv, float *csq, float *snq );
void    slags2( void *upper, float *a1, float *a2, float *a3, float *b1, float *b2, float *b3, float *csu, float *snu, float *csv, float *snv, float *csq, float *snq );
void    slags2_( void *upper, float *a1, float *a2, float *a3, float *b1, float *b2, float *b3, float *csu, float *snu, float *csv, float *snv, float *csq, float *snq );
void    SLAGTF( MKL_INT *n, float *a, float *lambda, float *b, float *c, float *tol, float *d, MKL_INT *in, MKL_INT *info );
void    SLAGTF_( MKL_INT *n, float *a, float *lambda, float *b, float *c, float *tol, float *d, MKL_INT *in, MKL_INT *info );
void    slagtf( MKL_INT *n, float *a, float *lambda, float *b, float *c, float *tol, float *d, MKL_INT *in, MKL_INT *info );
void    slagtf_( MKL_INT *n, float *a, float *lambda, float *b, float *c, float *tol, float *d, MKL_INT *in, MKL_INT *info );
void    SLAGTM( char *trans, MKL_INT *n, MKL_INT *nrhs, float *alpha, float *dl, float *d, float *du, float *x, MKL_INT *ldx, float *beta, float *b, MKL_INT *ldb );
void    SLAGTM_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *alpha, float *dl, float *d, float *du, float *x, MKL_INT *ldx, float *beta, float *b, MKL_INT *ldb );
void    slagtm( char *trans, MKL_INT *n, MKL_INT *nrhs, float *alpha, float *dl, float *d, float *du, float *x, MKL_INT *ldx, float *beta, float *b, MKL_INT *ldb );
void    slagtm_( char *trans, MKL_INT *n, MKL_INT *nrhs, float *alpha, float *dl, float *d, float *du, float *x, MKL_INT *ldx, float *beta, float *b, MKL_INT *ldb );
void    SLAGTS( MKL_INT *job, MKL_INT *n, float *a, float *b, float *c, float *d, MKL_INT *in, float *y, float *tol, MKL_INT *info );
void    SLAGTS_( MKL_INT *job, MKL_INT *n, float *a, float *b, float *c, float *d, MKL_INT *in, float *y, float *tol, MKL_INT *info );
void    slagts( MKL_INT *job, MKL_INT *n, float *a, float *b, float *c, float *d, MKL_INT *in, float *y, float *tol, MKL_INT *info );
void    slagts_( MKL_INT *job, MKL_INT *n, float *a, float *b, float *c, float *d, MKL_INT *in, float *y, float *tol, MKL_INT *info );
void    SLAGV2( float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *csl, float *snl, float *csr, float *snr );
void    SLAGV2_( float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *csl, float *snl, float *csr, float *snr );
void    slagv2( float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *csl, float *snl, float *csr, float *snr );
void    slagv2_( float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *csl, float *snl, float *csr, float *snr );
void    SLAHQR( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, float *wr, float *wi, MKL_INT *iloz, MKL_INT *ihiz, float *z, MKL_INT *ldz, MKL_INT *info );
void    SLAHQR_( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, float *wr, float *wi, MKL_INT *iloz, MKL_INT *ihiz, float *z, MKL_INT *ldz, MKL_INT *info );
void    slahqr( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, float *wr, float *wi, MKL_INT *iloz, MKL_INT *ihiz, float *z, MKL_INT *ldz, MKL_INT *info );
void    slahqr_( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *h, MKL_INT *ldh, float *wr, float *wi, MKL_INT *iloz, MKL_INT *ihiz, float *z, MKL_INT *ldz, MKL_INT *info );
void    SLAHRD( MKL_INT *n, MKL_INT *k, MKL_INT *nb, float *a, MKL_INT *lda, float *tau, float *t, MKL_INT *ldt, float *y, MKL_INT *ldy );
void    SLAHRD_( MKL_INT *n, MKL_INT *k, MKL_INT *nb, float *a, MKL_INT *lda, float *tau, float *t, MKL_INT *ldt, float *y, MKL_INT *ldy );
void    slahrd( MKL_INT *n, MKL_INT *k, MKL_INT *nb, float *a, MKL_INT *lda, float *tau, float *t, MKL_INT *ldt, float *y, MKL_INT *ldy );
void    slahrd_( MKL_INT *n, MKL_INT *k, MKL_INT *nb, float *a, MKL_INT *lda, float *tau, float *t, MKL_INT *ldt, float *y, MKL_INT *ldy );
void    SLAIC1( MKL_INT *job, MKL_INT *j, float *x, float *sest, float *w, float *gamma, float *sestpr, float *s, float *c );
void    SLAIC1_( MKL_INT *job, MKL_INT *j, float *x, float *sest, float *w, float *gamma, float *sestpr, float *s, float *c );
void    slaic1( MKL_INT *job, MKL_INT *j, float *x, float *sest, float *w, float *gamma, float *sestpr, float *s, float *c );
void    slaic1_( MKL_INT *job, MKL_INT *j, float *x, float *sest, float *w, float *gamma, float *sestpr, float *s, float *c );
void    SLALN2( void *ltrans, MKL_INT *na, MKL_INT *nw, float *smin, float *ca, float *a, MKL_INT *lda, float *d1, float *d2, float *b, MKL_INT *ldb, float *wr, float *wi, float *x, MKL_INT *ldx, float *scale, float *xnorm, MKL_INT *info );
void    SLALN2_( void *ltrans, MKL_INT *na, MKL_INT *nw, float *smin, float *ca, float *a, MKL_INT *lda, float *d1, float *d2, float *b, MKL_INT *ldb, float *wr, float *wi, float *x, MKL_INT *ldx, float *scale, float *xnorm, MKL_INT *info );
void    slaln2( void *ltrans, MKL_INT *na, MKL_INT *nw, float *smin, float *ca, float *a, MKL_INT *lda, float *d1, float *d2, float *b, MKL_INT *ldb, float *wr, float *wi, float *x, MKL_INT *ldx, float *scale, float *xnorm, MKL_INT *info );
void    slaln2_( void *ltrans, MKL_INT *na, MKL_INT *nw, float *smin, float *ca, float *a, MKL_INT *lda, float *d1, float *d2, float *b, MKL_INT *ldb, float *wr, float *wi, float *x, MKL_INT *ldx, float *scale, float *xnorm, MKL_INT *info );
void    SLALS0( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, float *b, MKL_INT *ldb, float *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, MKL_INT *k, float *c, float *s, float *work, MKL_INT *info );
void    SLALS0_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, float *b, MKL_INT *ldb, float *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, MKL_INT *k, float *c, float *s, float *work, MKL_INT *info );
void    slals0( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, float *b, MKL_INT *ldb, float *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, MKL_INT *k, float *c, float *s, float *work, MKL_INT *info );
void    slals0_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, float *b, MKL_INT *ldb, float *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, MKL_INT *k, float *c, float *s, float *work, MKL_INT *info );
void    SLALSA( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *b, MKL_INT *ldb, float *bx, MKL_INT *ldbx, float *u, MKL_INT *ldu, float *vt, MKL_INT *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLALSA_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *b, MKL_INT *ldb, float *bx, MKL_INT *ldbx, float *u, MKL_INT *ldu, float *vt, MKL_INT *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    slalsa( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *b, MKL_INT *ldb, float *bx, MKL_INT *ldbx, float *u, MKL_INT *ldu, float *vt, MKL_INT *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    slalsa_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *b, MKL_INT *ldb, float *bx, MKL_INT *ldbx, float *u, MKL_INT *ldu, float *vt, MKL_INT *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLALSD( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, float *rcond, MKL_INT *rank, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLALSD_( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, float *rcond, MKL_INT *rank, float *work, MKL_INT *iwork, MKL_INT *info );
void    slalsd( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, float *rcond, MKL_INT *rank, float *work, MKL_INT *iwork, MKL_INT *info );
void    slalsd_( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, float *rcond, MKL_INT *rank, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLAMC1( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, MKL_INT* ieee1 );
void    SLAMC1_( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, MKL_INT* ieee1 );
void    slamc1( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, MKL_INT* ieee1 );
void    slamc1_( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, MKL_INT* ieee1 );
void    SLAMC2( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, float* eps, MKL_INT* emin, float* rmin, MKL_INT* emax, float* rmax );
void    SLAMC2_( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, float* eps, MKL_INT* emin, float* rmin, MKL_INT* emax, float* rmax );
void    slamc2( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, float* eps, MKL_INT* emin, float* rmin, MKL_INT* emax, float* rmax );
void    slamc2_( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, float* eps, MKL_INT* emin, float* rmin, MKL_INT* emax, float* rmax );
float   SLAMC3( float *a, float *b );
float   SLAMC3_( float *a, float *b );
float   slamc3( float *a, float *b );
float   slamc3_( float *a, float *b );
void    SLAMC4( MKL_INT* emin, float* start, MKL_INT* base );
void    SLAMC4_( MKL_INT* emin, float* start, MKL_INT* base );
void    slamc4( MKL_INT* emin, float* start, MKL_INT* base );
void    slamc4_( MKL_INT* emin, float* start, MKL_INT* base );
void    SLAMC5( MKL_INT* beta, MKL_INT* p, MKL_INT* emin, MKL_INT* ieee, MKL_INT* emax, float* rmax );
void    SLAMC5_( MKL_INT* beta, MKL_INT* p, MKL_INT* emin, MKL_INT* ieee, MKL_INT* emax, float* rmax );
void    slamc5( MKL_INT* beta, MKL_INT* p, MKL_INT* emin, MKL_INT* ieee, MKL_INT* emax, float* rmax );
void    slamc5_( MKL_INT* beta, MKL_INT* p, MKL_INT* emin, MKL_INT* ieee, MKL_INT* emax, float* rmax );
float   SLAMCH( char *cmach );
float   SLAMCH_( char *cmach );
float   slamch( char *cmach );
float   slamch_( char *cmach );
void    SLAMRG( MKL_INT *n1, MKL_INT *n2, float *a, MKL_INT *strd1, MKL_INT *strd2, MKL_INT *index );
void    SLAMRG_( MKL_INT *n1, MKL_INT *n2, float *a, MKL_INT *strd1, MKL_INT *strd2, MKL_INT *index );
void    slamrg( MKL_INT *n1, MKL_INT *n2, float *a, MKL_INT *strd1, MKL_INT *strd2, MKL_INT *index );
void    slamrg_( MKL_INT *n1, MKL_INT *n2, float *a, MKL_INT *strd1, MKL_INT *strd2, MKL_INT *index );
float   SLANGB( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *work );
float   SLANGB_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *work );
float   slangb( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *work );
float   slangb_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *work );
float   SLANGE( char *norm, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   SLANGE_( char *norm, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   slange( char *norm, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   slange_( char *norm, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   SLANGT( char *norm, MKL_INT *n, float *dl, float *d, float *du );
float   SLANGT_( char *norm, MKL_INT *n, float *dl, float *d, float *du );
float   slangt( char *norm, MKL_INT *n, float *dl, float *d, float *du );
float   slangt_( char *norm, MKL_INT *n, float *dl, float *d, float *du );
float   SLANHS( char *norm, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   SLANHS_( char *norm, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   slanhs( char *norm, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   slanhs_( char *norm, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   SLANSB( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, float *ab, MKL_INT *ldab, float *work );
float   SLANSB_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, float *ab, MKL_INT *ldab, float *work );
float   slansb( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, float *ab, MKL_INT *ldab, float *work );
float   slansb_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, float *ab, MKL_INT *ldab, float *work );
float   SLANSP( char *norm, char *uplo, MKL_INT *n, float *ap, float *work );
float   SLANSP_( char *norm, char *uplo, MKL_INT *n, float *ap, float *work );
float   slansp( char *norm, char *uplo, MKL_INT *n, float *ap, float *work );
float   slansp_( char *norm, char *uplo, MKL_INT *n, float *ap, float *work );
float   SLANST( char *norm, MKL_INT *n, float *d, float *e );
float   SLANST_( char *norm, MKL_INT *n, float *d, float *e );
float   slanst( char *norm, MKL_INT *n, float *d, float *e );
float   slanst_( char *norm, MKL_INT *n, float *d, float *e );
float   SLANSY( char *norm, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   SLANSY_( char *norm, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   slansy( char *norm, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   slansy_( char *norm, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   SLANTB( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, float *ab, MKL_INT *ldab, float *work );
float   SLANTB_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, float *ab, MKL_INT *ldab, float *work );
float   slantb( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, float *ab, MKL_INT *ldab, float *work );
float   slantb_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, float *ab, MKL_INT *ldab, float *work );
float   SLANTP( char *norm, char *uplo, char *diag, MKL_INT *n, float *ap, float *work );
float   SLANTP_( char *norm, char *uplo, char *diag, MKL_INT *n, float *ap, float *work );
float   slantp( char *norm, char *uplo, char *diag, MKL_INT *n, float *ap, float *work );
float   slantp_( char *norm, char *uplo, char *diag, MKL_INT *n, float *ap, float *work );
float   SLANTR( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   SLANTR_( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   slantr( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *work );
float   slantr_( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *work );
void    SLANV2( float *a, float *b, float *c, float *d, float *rt1r, float *rt1i, float *rt2r, float *rt2i, float *cs, float *sn );
void    SLANV2_( float *a, float *b, float *c, float *d, float *rt1r, float *rt1i, float *rt2r, float *rt2i, float *cs, float *sn );
void    slanv2( float *a, float *b, float *c, float *d, float *rt1r, float *rt1i, float *rt2r, float *rt2i, float *cs, float *sn );
void    slanv2_( float *a, float *b, float *c, float *d, float *rt1r, float *rt1i, float *rt2r, float *rt2i, float *cs, float *sn );
void    SLAPLL( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *ssmin );
void    SLAPLL_( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *ssmin );
void    slapll( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *ssmin );
void    slapll_( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *ssmin );
void    SLAPMT( void *forwrd, MKL_INT *m, MKL_INT *n, float *x, MKL_INT *ldx, MKL_INT *k );
void    SLAPMT_( void *forwrd, MKL_INT *m, MKL_INT *n, float *x, MKL_INT *ldx, MKL_INT *k );
void    slapmt( void *forwrd, MKL_INT *m, MKL_INT *n, float *x, MKL_INT *ldx, MKL_INT *k );
void    slapmt_( void *forwrd, MKL_INT *m, MKL_INT *n, float *x, MKL_INT *ldx, MKL_INT *k );
float   SLAPY2( float *x, float *y );
float   SLAPY2_( float *x, float *y );
float   slapy2( float *x, float *y );
float   slapy2_( float *x, float *y );
float   SLAPY3( float *x, float *y, float *z );
float   SLAPY3_( float *x, float *y, float *z );
float   slapy3( float *x, float *y, float *z );
float   slapy3_( float *x, float *y, float *z );
void    SLAQGB( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    SLAQGB_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    slaqgb( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    slaqgb_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, float *ab, MKL_INT *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    SLAQGE( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    SLAQGE_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    slaqge( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    slaqge_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void    SLAQP2( MKL_INT *m, MKL_INT *n, MKL_INT *offset, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *vn1, float *vn2, float *work );
void    SLAQP2_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *vn1, float *vn2, float *work );
void    slaqp2( MKL_INT *m, MKL_INT *n, MKL_INT *offset, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *vn1, float *vn2, float *work );
void    slaqp2_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *vn1, float *vn2, float *work );
void    SLAQPS( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *vn1, float *vn2, float *auxv, float *f, MKL_INT *ldf );
void    SLAQPS_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *vn1, float *vn2, float *auxv, float *f, MKL_INT *ldf );
void    slaqps( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *vn1, float *vn2, float *auxv, float *f, MKL_INT *ldf );
void    slaqps_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, float *a, MKL_INT *lda, MKL_INT *jpvt, float *tau, float *vn1, float *vn2, float *auxv, float *f, MKL_INT *ldf );
void    SLAQSB( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    SLAQSB_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    slaqsb( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    slaqsb_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *s, float *scond, float *amax, char *equed );
void    SLAQSP( char *uplo, MKL_INT *n, float *ap, float *s, float *scond, float *amax, char *equed );
void    SLAQSP_( char *uplo, MKL_INT *n, float *ap, float *s, float *scond, float *amax, char *equed );
void    slaqsp( char *uplo, MKL_INT *n, float *ap, float *s, float *scond, float *amax, char *equed );
void    slaqsp_( char *uplo, MKL_INT *n, float *ap, float *s, float *scond, float *amax, char *equed );
void    SLAQSY( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    SLAQSY_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    slaqsy( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
void    slaqsy_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *s, float *scond, float *amax, char *equed );
float   SLAQTR( float *ltran, void *lreal, float *n, float *t, MKL_INT *ldt, float *b, float *w, float *scale, float *x, float *work, MKL_INT *info );
float   SLAQTR_( float *ltran, void *lreal, float *n, float *t, MKL_INT *ldt, float *b, float *w, float *scale, float *x, float *work, MKL_INT *info );
float   slaqtr( float *ltran, void *lreal, float *n, float *t, MKL_INT *ldt, float *b, float *w, float *scale, float *x, float *work, MKL_INT *info );
float   slaqtr_( float *ltran, void *lreal, float *n, float *t, MKL_INT *ldt, float *b, float *w, float *scale, float *x, float *work, MKL_INT *info );
void    SLAR1V( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, float *sigma, float *d, float *l, float *ld, float *lld, float *gersch, float *z, float *ztz, float *mingma, MKL_INT *r, MKL_INT *isuppz, float *work );
void    SLAR1V_( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, float *sigma, float *d, float *l, float *ld, float *lld, float *gersch, float *z, float *ztz, float *mingma, MKL_INT *r, MKL_INT *isuppz, float *work );
void    slar1v( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, float *sigma, float *d, float *l, float *ld, float *lld, float *gersch, float *z, float *ztz, float *mingma, MKL_INT *r, MKL_INT *isuppz, float *work );
void    slar1v_( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, float *sigma, float *d, float *l, float *ld, float *lld, float *gersch, float *z, float *ztz, float *mingma, MKL_INT *r, MKL_INT *isuppz, float *work );
void    SLAR2V( MKL_INT *n, float *x, float *y, float *z, MKL_INT *incx, float *c, float *s, MKL_INT *incc );
void    SLAR2V_( MKL_INT *n, float *x, float *y, float *z, MKL_INT *incx, float *c, float *s, MKL_INT *incc );
void    slar2v( MKL_INT *n, float *x, float *y, float *z, MKL_INT *incx, float *c, float *s, MKL_INT *incc );
void    slar2v_( MKL_INT *n, float *x, float *y, float *z, MKL_INT *incx, float *c, float *s, MKL_INT *incc );
void    SLARF( char *side, MKL_INT *m, MKL_INT *n, float *v, MKL_INT *incv, float *tau, float *c, MKL_INT *ldc, float *work );
void    SLARF_( char *side, MKL_INT *m, MKL_INT *n, float *v, MKL_INT *incv, float *tau, float *c, MKL_INT *ldc, float *work );
void    slarf( char *side, MKL_INT *m, MKL_INT *n, float *v, MKL_INT *incv, float *tau, float *c, MKL_INT *ldc, float *work );
void    slarf_( char *side, MKL_INT *m, MKL_INT *n, float *v, MKL_INT *incv, float *tau, float *c, MKL_INT *ldc, float *work );
void    SLARFB( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *t, MKL_INT *ldt, float *c, MKL_INT *ldc, float *work, MKL_INT *ldwork );
void    SLARFB_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *t, MKL_INT *ldt, float *c, MKL_INT *ldc, float *work, MKL_INT *ldwork );
void    slarfb( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *t, MKL_INT *ldt, float *c, MKL_INT *ldc, float *work, MKL_INT *ldwork );
void    slarfb_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *t, MKL_INT *ldt, float *c, MKL_INT *ldc, float *work, MKL_INT *ldwork );
void    SLARFG( MKL_INT *n, float *alpha, float *x, MKL_INT *incx, float *tau );
void    SLARFG_( MKL_INT *n, float *alpha, float *x, MKL_INT *incx, float *tau );
void    slarfg( MKL_INT *n, float *alpha, float *x, MKL_INT *incx, float *tau );
void    slarfg_( MKL_INT *n, float *alpha, float *x, MKL_INT *incx, float *tau );
void    SLARFT( char *direct, char *storev, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *tau, float *t, MKL_INT *ldt );
void    SLARFT_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *tau, float *t, MKL_INT *ldt );
void    slarft( char *direct, char *storev, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *tau, float *t, MKL_INT *ldt );
void    slarft_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *tau, float *t, MKL_INT *ldt );
void    SLARFX( char *side, MKL_INT *m, MKL_INT *n, float *v, float *tau, float *c, MKL_INT *ldc, float *work );
void    SLARFX_( char *side, MKL_INT *m, MKL_INT *n, float *v, float *tau, float *c, MKL_INT *ldc, float *work );
void    slarfx( char *side, MKL_INT *m, MKL_INT *n, float *v, float *tau, float *c, MKL_INT *ldc, float *work );
void    slarfx_( char *side, MKL_INT *m, MKL_INT *n, float *v, float *tau, float *c, MKL_INT *ldc, float *work );
void    SLARGV( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *c, MKL_INT *incc );
void    SLARGV_( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *c, MKL_INT *incc );
void    slargv( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *c, MKL_INT *incc );
void    slargv_( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *c, MKL_INT *incc );
void    SLARNV( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, float *x );
void    SLARNV_( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, float *x );
void    slarnv( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, float *x );
void    slarnv_( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, float *x );
void    SLARRB( MKL_INT *n, float *d, float *l, float *ld, float *lld, MKL_INT *ifirst, MKL_INT *ilast, float *sigma, float *reltol, float *w, float *wgap, float *werr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLARRB_( MKL_INT *n, float *d, float *l, float *ld, float *lld, MKL_INT *ifirst, MKL_INT *ilast, float *sigma, float *reltol, float *w, float *wgap, float *werr, float *work, MKL_INT *iwork, MKL_INT *info );
void    slarrb( MKL_INT *n, float *d, float *l, float *ld, float *lld, MKL_INT *ifirst, MKL_INT *ilast, float *sigma, float *reltol, float *w, float *wgap, float *werr, float *work, MKL_INT *iwork, MKL_INT *info );
void    slarrb_( MKL_INT *n, float *d, float *l, float *ld, float *lld, MKL_INT *ifirst, MKL_INT *ilast, float *sigma, float *reltol, float *w, float *wgap, float *werr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLARRE( MKL_INT *n, float *d, float *e, float *tol, MKL_INT *nsplit, MKL_INT *isplit, MKL_INT *m, float *w, float *woff, float *gersch, float *work, MKL_INT *info );
void    SLARRE_( MKL_INT *n, float *d, float *e, float *tol, MKL_INT *nsplit, MKL_INT *isplit, MKL_INT *m, float *w, float *woff, float *gersch, float *work, MKL_INT *info );
void    slarre( MKL_INT *n, float *d, float *e, float *tol, MKL_INT *nsplit, MKL_INT *isplit, MKL_INT *m, float *w, float *woff, float *gersch, float *work, MKL_INT *info );
void    slarre_( MKL_INT *n, float *d, float *e, float *tol, MKL_INT *nsplit, MKL_INT *isplit, MKL_INT *m, float *w, float *woff, float *gersch, float *work, MKL_INT *info );
void    SLARRF( MKL_INT *n, float *d, float *l, float *ld, float *lld, MKL_INT *ifirst, MKL_INT *ilast, float *w, float *dplus, float *lplus, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLARRF_( MKL_INT *n, float *d, float *l, float *ld, float *lld, MKL_INT *ifirst, MKL_INT *ilast, float *w, float *dplus, float *lplus, float *work, MKL_INT *iwork, MKL_INT *info );
void    slarrf( MKL_INT *n, float *d, float *l, float *ld, float *lld, MKL_INT *ifirst, MKL_INT *ilast, float *w, float *dplus, float *lplus, float *work, MKL_INT *iwork, MKL_INT *info );
void    slarrf_( MKL_INT *n, float *d, float *l, float *ld, float *lld, MKL_INT *ifirst, MKL_INT *ilast, float *w, float *dplus, float *lplus, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLARRV( MKL_INT *n, float *d, float *l, MKL_INT *isplit, MKL_INT *m, float *w, MKL_INT *iblock, float *gersch, float *tol, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLARRV_( MKL_INT *n, float *d, float *l, MKL_INT *isplit, MKL_INT *m, float *w, MKL_INT *iblock, float *gersch, float *tol, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *iwork, MKL_INT *info );
void    slarrv( MKL_INT *n, float *d, float *l, MKL_INT *isplit, MKL_INT *m, float *w, MKL_INT *iblock, float *gersch, float *tol, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *iwork, MKL_INT *info );
void    slarrv_( MKL_INT *n, float *d, float *l, MKL_INT *isplit, MKL_INT *m, float *w, MKL_INT *iblock, float *gersch, float *tol, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLARTG( float *f, float *g, float *cs, float *sn, float *r );
void    SLARTG_( float *f, float *g, float *cs, float *sn, float *r );
void    slartg( float *f, float *g, float *cs, float *sn, float *r );
void    slartg_( float *f, float *g, float *cs, float *sn, float *r );
void    SLARTV( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *c, float *s, MKL_INT *incc );
void    SLARTV_( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *c, float *s, MKL_INT *incc );
void    slartv( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *c, float *s, MKL_INT *incc );
void    slartv_( MKL_INT *n, float *x, MKL_INT *incx, float *y, MKL_INT *incy, float *c, float *s, MKL_INT *incc );
void    SLARUV( MKL_INT *iseed, MKL_INT *n, float *x );
void    SLARUV_( MKL_INT *iseed, MKL_INT *n, float *x );
void    slaruv( MKL_INT *iseed, MKL_INT *n, float *x );
void    slaruv_( MKL_INT *iseed, MKL_INT *n, float *x );
void    SLARZ( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, float *v, MKL_INT *incv, float *tau, float *c, MKL_INT *ldc, float *work );
void    SLARZ_( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, float *v, MKL_INT *incv, float *tau, float *c, MKL_INT *ldc, float *work );
void    slarz( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, float *v, MKL_INT *incv, float *tau, float *c, MKL_INT *ldc, float *work );
void    slarz_( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, float *v, MKL_INT *incv, float *tau, float *c, MKL_INT *ldc, float *work );
void    SLARZB( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *v, MKL_INT *ldv, float *t, MKL_INT *ldt, float *c, MKL_INT *ldc, float *work, MKL_INT *ldwork );
void    SLARZB_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *v, MKL_INT *ldv, float *t, MKL_INT *ldt, float *c, MKL_INT *ldc, float *work, MKL_INT *ldwork );
void    slarzb( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *v, MKL_INT *ldv, float *t, MKL_INT *ldt, float *c, MKL_INT *ldc, float *work, MKL_INT *ldwork );
void    slarzb_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *v, MKL_INT *ldv, float *t, MKL_INT *ldt, float *c, MKL_INT *ldc, float *work, MKL_INT *ldwork );
void    SLARZT( char *direct, char *storev, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *tau, float *t, MKL_INT *ldt );
void    SLARZT_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *tau, float *t, MKL_INT *ldt );
void    slarzt( char *direct, char *storev, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *tau, float *t, MKL_INT *ldt );
void    slarzt_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, float *v, MKL_INT *ldv, float *tau, float *t, MKL_INT *ldt );
void    SLAS2( float *f, float *g, float *h, float *ssmin, float *ssmax );
void    SLAS2_( float *f, float *g, float *h, float *ssmin, float *ssmax );
void    slas2( float *f, float *g, float *h, float *ssmin, float *ssmax );
void    slas2_( float *f, float *g, float *h, float *ssmin, float *ssmax );
void    SLASCL( char *type, MKL_INT *kl, MKL_INT *ku, float *cfrom, float *cto, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SLASCL_( char *type, MKL_INT *kl, MKL_INT *ku, float *cfrom, float *cto, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    slascl( char *type, MKL_INT *kl, MKL_INT *ku, float *cfrom, float *cto, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    slascl_( char *type, MKL_INT *kl, MKL_INT *ku, float *cfrom, float *cto, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SLASD0( MKL_INT *n, MKL_INT *sqre, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, MKL_INT *smlsiz, MKL_INT *iwork, float *work, MKL_INT *info );
void    SLASD0_( MKL_INT *n, MKL_INT *sqre, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, MKL_INT *smlsiz, MKL_INT *iwork, float *work, MKL_INT *info );
void    slasd0( MKL_INT *n, MKL_INT *sqre, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, MKL_INT *smlsiz, MKL_INT *iwork, float *work, MKL_INT *info );
void    slasd0_( MKL_INT *n, MKL_INT *sqre, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, MKL_INT *smlsiz, MKL_INT *iwork, float *work, MKL_INT *info );
void    SLASD1( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, float *d, float *alpha, float *beta, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, MKL_INT *idxq, MKL_INT *iwork, float *work, MKL_INT *info );
void    SLASD1_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, float *d, float *alpha, float *beta, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, MKL_INT *idxq, MKL_INT *iwork, float *work, MKL_INT *info );
void    slasd1( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, float *d, float *alpha, float *beta, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, MKL_INT *idxq, MKL_INT *iwork, float *work, MKL_INT *info );
void    slasd1_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, float *d, float *alpha, float *beta, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, MKL_INT *idxq, MKL_INT *iwork, float *work, MKL_INT *info );
void    SLASD2( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *z, float *alpha, float *beta, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *dsigma, float *u2, MKL_INT *ldu2, float *vt2, MKL_INT *ldvt2, MKL_INT *idxp, MKL_INT *idx, MKL_INT *idxc, MKL_INT *idxq, MKL_INT *coltyp, MKL_INT *info );
void    SLASD2_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *z, float *alpha, float *beta, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *dsigma, float *u2, MKL_INT *ldu2, float *vt2, MKL_INT *ldvt2, MKL_INT *idxp, MKL_INT *idx, MKL_INT *idxc, MKL_INT *idxq, MKL_INT *coltyp, MKL_INT *info );
void    slasd2( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *z, float *alpha, float *beta, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *dsigma, float *u2, MKL_INT *ldu2, float *vt2, MKL_INT *ldvt2, MKL_INT *idxp, MKL_INT *idx, MKL_INT *idxc, MKL_INT *idxq, MKL_INT *coltyp, MKL_INT *info );
void    slasd2_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *z, float *alpha, float *beta, float *u, MKL_INT *ldu, float *vt, MKL_INT *ldvt, float *dsigma, float *u2, MKL_INT *ldu2, float *vt2, MKL_INT *ldvt2, MKL_INT *idxp, MKL_INT *idx, MKL_INT *idxc, MKL_INT *idxq, MKL_INT *coltyp, MKL_INT *info );
void    SLASD3( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *q, MKL_INT *ldq, float *dsigma, float *u, MKL_INT *ldu, float *u2, MKL_INT *ldu2, float *vt, MKL_INT *ldvt, float *vt2, MKL_INT *ldvt2, MKL_INT *idxc, MKL_INT *ctot, float *z, MKL_INT *info );
void    SLASD3_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *q, MKL_INT *ldq, float *dsigma, float *u, MKL_INT *ldu, float *u2, MKL_INT *ldu2, float *vt, MKL_INT *ldvt, float *vt2, MKL_INT *ldvt2, MKL_INT *idxc, MKL_INT *ctot, float *z, MKL_INT *info );
void    slasd3( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *q, MKL_INT *ldq, float *dsigma, float *u, MKL_INT *ldu, float *u2, MKL_INT *ldu2, float *vt, MKL_INT *ldvt, float *vt2, MKL_INT *ldvt2, MKL_INT *idxc, MKL_INT *ctot, float *z, MKL_INT *info );
void    slasd3_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *q, MKL_INT *ldq, float *dsigma, float *u, MKL_INT *ldu, float *u2, MKL_INT *ldu2, float *vt, MKL_INT *ldvt, float *vt2, MKL_INT *ldvt2, MKL_INT *idxc, MKL_INT *ctot, float *z, MKL_INT *info );
void    SLASD4( MKL_INT *n, MKL_INT *i, float *d, float *z, float *delta, float *rho, float *sigma, float *work, MKL_INT *info );
void    SLASD4_( MKL_INT *n, MKL_INT *i, float *d, float *z, float *delta, float *rho, float *sigma, float *work, MKL_INT *info );
void    slasd4( MKL_INT *n, MKL_INT *i, float *d, float *z, float *delta, float *rho, float *sigma, float *work, MKL_INT *info );
void    slasd4_( MKL_INT *n, MKL_INT *i, float *d, float *z, float *delta, float *rho, float *sigma, float *work, MKL_INT *info );
void    SLASD5( MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dsigma, float *work );
void    SLASD5_( MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dsigma, float *work );
void    slasd5( MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dsigma, float *work );
void    slasd5_( MKL_INT *i, float *d, float *z, float *delta, float *rho, float *dsigma, float *work );
void    SLASD6( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, float *d, float *vf, float *vl, float *alpha, float *beta, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, MKL_INT *k, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLASD6_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, float *d, float *vf, float *vl, float *alpha, float *beta, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, MKL_INT *k, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    slasd6( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, float *d, float *vf, float *vl, float *alpha, float *beta, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, MKL_INT *k, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    slasd6_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, float *d, float *vf, float *vl, float *alpha, float *beta, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *poles, float *difl, float *difr, float *z, MKL_INT *k, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLASD7( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *z, float *zw, float *vf, float *vfw, float *vl, float *vlw, float *alpha, float *beta, float *dsigma, MKL_INT *idx, MKL_INT *idxp, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *c, float *s, MKL_INT *info );
void    SLASD7_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *z, float *zw, float *vf, float *vfw, float *vl, float *vlw, float *alpha, float *beta, float *dsigma, MKL_INT *idx, MKL_INT *idxp, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *c, float *s, MKL_INT *info );
void    slasd7( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *z, float *zw, float *vf, float *vfw, float *vl, float *vlw, float *alpha, float *beta, float *dsigma, MKL_INT *idx, MKL_INT *idxp, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *c, float *s, MKL_INT *info );
void    slasd7_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, float *d, float *z, float *zw, float *vf, float *vfw, float *vl, float *vlw, float *alpha, float *beta, float *dsigma, MKL_INT *idx, MKL_INT *idxp, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, float *givnum, MKL_INT *ldgnum, float *c, float *s, MKL_INT *info );
void    SLASD8( MKL_INT *icompq, MKL_INT *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, MKL_INT *lddifr, float *dsigma, float *work, MKL_INT *info );
void    SLASD8_( MKL_INT *icompq, MKL_INT *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, MKL_INT *lddifr, float *dsigma, float *work, MKL_INT *info );
void    slasd8( MKL_INT *icompq, MKL_INT *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, MKL_INT *lddifr, float *dsigma, float *work, MKL_INT *info );
void    slasd8_( MKL_INT *icompq, MKL_INT *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, MKL_INT *lddifr, float *dsigma, float *work, MKL_INT *info );
void    SLASD9( MKL_INT *icompq, MKL_INT *ldu, MKL_INT *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, float *dsigma, float *work, MKL_INT *info );
void    SLASD9_( MKL_INT *icompq, MKL_INT *ldu, MKL_INT *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, float *dsigma, float *work, MKL_INT *info );
void    slasd9( MKL_INT *icompq, MKL_INT *ldu, MKL_INT *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, float *dsigma, float *work, MKL_INT *info );
void    slasd9_( MKL_INT *icompq, MKL_INT *ldu, MKL_INT *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, float *dsigma, float *work, MKL_INT *info );
void    SLASDA( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *sqre, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLASDA_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *sqre, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    slasda( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *sqre, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    slasda_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *sqre, float *d, float *e, float *u, MKL_INT *ldu, float *vt, MKL_INT *k, float *difl, float *difr, float *z, float *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, float *givnum, float *c, float *s, float *work, MKL_INT *iwork, MKL_INT *info );
void    SLASDQ( char *uplo, MKL_INT *sqre, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, float *vt, MKL_INT *ldvt, float *u, MKL_INT *ldu, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SLASDQ_( char *uplo, MKL_INT *sqre, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, float *vt, MKL_INT *ldvt, float *u, MKL_INT *ldu, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    slasdq( char *uplo, MKL_INT *sqre, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, float *vt, MKL_INT *ldvt, float *u, MKL_INT *ldu, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    slasdq_( char *uplo, MKL_INT *sqre, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, float *d, float *e, float *vt, MKL_INT *ldvt, float *u, MKL_INT *ldu, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SLASDT( MKL_INT *n, MKL_INT *lvl, MKL_INT *nd, MKL_INT *inode, MKL_INT *ndiml, MKL_INT *ndimr, MKL_INT *msub );
void    SLASDT_( MKL_INT *n, MKL_INT *lvl, MKL_INT *nd, MKL_INT *inode, MKL_INT *ndiml, MKL_INT *ndimr, MKL_INT *msub );
void    slasdt( MKL_INT *n, MKL_INT *lvl, MKL_INT *nd, MKL_INT *inode, MKL_INT *ndiml, MKL_INT *ndimr, MKL_INT *msub );
void    slasdt_( MKL_INT *n, MKL_INT *lvl, MKL_INT *nd, MKL_INT *inode, MKL_INT *ndiml, MKL_INT *ndimr, MKL_INT *msub );
void    SLASET( char *uplo, MKL_INT *m, MKL_INT *n, float *alpha, float *beta, float *a, MKL_INT *lda );
void    SLASET_( char *uplo, MKL_INT *m, MKL_INT *n, float *alpha, float *beta, float *a, MKL_INT *lda );
void    slaset( char *uplo, MKL_INT *m, MKL_INT *n, float *alpha, float *beta, float *a, MKL_INT *lda );
void    slaset_( char *uplo, MKL_INT *m, MKL_INT *n, float *alpha, float *beta, float *a, MKL_INT *lda );
void    SLASQ1( MKL_INT *n, float *d, float *e, float *work, MKL_INT *info );
void    SLASQ1_( MKL_INT *n, float *d, float *e, float *work, MKL_INT *info );
void    slasq1( MKL_INT *n, float *d, float *e, float *work, MKL_INT *info );
void    slasq1_( MKL_INT *n, float *d, float *e, float *work, MKL_INT *info );
void    SLASQ2( MKL_INT *n, float *z, MKL_INT *info );
void    SLASQ2_( MKL_INT *n, float *z, MKL_INT *info );
void    slasq2( MKL_INT *n, float *z, MKL_INT *info );
void    slasq2_( MKL_INT *n, float *z, MKL_INT *info );
void    SLASQ3( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *dmin, float *sigma, float *desig, float *qmax, MKL_INT *nfail, MKL_INT *iter, MKL_INT *ndiv, void *ieee );
void    SLASQ3_( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *dmin, float *sigma, float *desig, float *qmax, MKL_INT *nfail, MKL_INT *iter, MKL_INT *ndiv, void *ieee );
void    slasq3( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *dmin, float *sigma, float *desig, float *qmax, MKL_INT *nfail, MKL_INT *iter, MKL_INT *ndiv, void *ieee );
void    slasq3_( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *dmin, float *sigma, float *desig, float *qmax, MKL_INT *nfail, MKL_INT *iter, MKL_INT *ndiv, void *ieee );
void    SLASQ4( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, MKL_INT *n0in, float *dmin, float *dmin1, float *dmin2, float *dn, float *dn1, float *dn2, float *tau, MKL_INT *ttype );
void    SLASQ4_( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, MKL_INT *n0in, float *dmin, float *dmin1, float *dmin2, float *dn, float *dn1, float *dn2, float *tau, MKL_INT *ttype );
void    slasq4( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, MKL_INT *n0in, float *dmin, float *dmin1, float *dmin2, float *dn, float *dn1, float *dn2, float *tau, MKL_INT *ttype );
void    slasq4_( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, MKL_INT *n0in, float *dmin, float *dmin1, float *dmin2, float *dn, float *dn1, float *dn2, float *tau, MKL_INT *ttype );
void    SLASQ5( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *tau, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2, void *ieee );
void    SLASQ5_( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *tau, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2, void *ieee );
void    slasq5( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *tau, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2, void *ieee );
void    slasq5_( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *tau, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2, void *ieee );
void    SLASQ6( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2 );
void    SLASQ6_( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2 );
void    slasq6( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2 );
void    slasq6_( MKL_INT *i0, MKL_INT *n0, float *z, MKL_INT *pp, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2 );
void    SLASR( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, float *c, float *s, float *a, MKL_INT *lda );
void    SLASR_( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, float *c, float *s, float *a, MKL_INT *lda );
void    slasr( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, float *c, float *s, float *a, MKL_INT *lda );
void    slasr_( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, float *c, float *s, float *a, MKL_INT *lda );
void    SLASRT( char *id, MKL_INT *n, float *d, MKL_INT *info );
void    SLASRT_( char *id, MKL_INT *n, float *d, MKL_INT *info );
void    slasrt( char *id, MKL_INT *n, float *d, MKL_INT *info );
void    slasrt_( char *id, MKL_INT *n, float *d, MKL_INT *info );
void    SLASSQ( MKL_INT *n, float *x, MKL_INT *incx, float *scale, float *sumsq );
void    SLASSQ_( MKL_INT *n, float *x, MKL_INT *incx, float *scale, float *sumsq );
void    slassq( MKL_INT *n, float *x, MKL_INT *incx, float *scale, float *sumsq );
void    slassq_( MKL_INT *n, float *x, MKL_INT *incx, float *scale, float *sumsq );
void    SLASV2( float *f, float *g, float *h, float *ssmin, float *ssmax, float *snr, float *csr, float *snl, float *csl );
void    SLASV2_( float *f, float *g, float *h, float *ssmin, float *ssmax, float *snr, float *csr, float *snl, float *csl );
void    slasv2( float *f, float *g, float *h, float *ssmin, float *ssmax, float *snr, float *csr, float *snl, float *csl );
void    slasv2_( float *f, float *g, float *h, float *ssmin, float *ssmax, float *snr, float *csr, float *snl, float *csl );
void    SLASWP( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    SLASWP_( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    slaswp( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    slaswp_( MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    SLASY2( void *ltranl, void *ltranr, MKL_INT *isgn, MKL_INT *n1, MKL_INT *n2, float *tl, MKL_INT *ldtl, float *tr, MKL_INT *ldtr, float *b, MKL_INT *ldb, float *scale, float *x, MKL_INT *ldx, float *xnorm, MKL_INT *info );
void    SLASY2_( void *ltranl, void *ltranr, MKL_INT *isgn, MKL_INT *n1, MKL_INT *n2, float *tl, MKL_INT *ldtl, float *tr, MKL_INT *ldtr, float *b, MKL_INT *ldb, float *scale, float *x, MKL_INT *ldx, float *xnorm, MKL_INT *info );
void    slasy2( void *ltranl, void *ltranr, MKL_INT *isgn, MKL_INT *n1, MKL_INT *n2, float *tl, MKL_INT *ldtl, float *tr, MKL_INT *ldtr, float *b, MKL_INT *ldb, float *scale, float *x, MKL_INT *ldx, float *xnorm, MKL_INT *info );
void    slasy2_( void *ltranl, void *ltranr, MKL_INT *isgn, MKL_INT *n1, MKL_INT *n2, float *tl, MKL_INT *ldtl, float *tr, MKL_INT *ldtr, float *b, MKL_INT *ldb, float *scale, float *x, MKL_INT *ldx, float *xnorm, MKL_INT *info );
void    SLASYF( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, float *a, MKL_INT *lda, MKL_INT *ipiv, float *w, MKL_INT *ldw, MKL_INT *info );
void    SLASYF_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, float *a, MKL_INT *lda, MKL_INT *ipiv, float *w, MKL_INT *ldw, MKL_INT *info );
void    slasyf( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, float *a, MKL_INT *lda, MKL_INT *ipiv, float *w, MKL_INT *ldw, MKL_INT *info );
void    slasyf_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, float *a, MKL_INT *lda, MKL_INT *ipiv, float *w, MKL_INT *ldw, MKL_INT *info );
void    SLATBS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *x, float *scale, float *cnorm, MKL_INT *info );
void    SLATBS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *x, float *scale, float *cnorm, MKL_INT *info );
void    slatbs( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *x, float *scale, float *cnorm, MKL_INT *info );
void    slatbs_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *x, float *scale, float *cnorm, MKL_INT *info );
void    SLATDF( MKL_INT *ijob, MKL_INT *n, float *z, MKL_INT *ldz, float *rhs, float *rdsum, float *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    SLATDF_( MKL_INT *ijob, MKL_INT *n, float *z, MKL_INT *ldz, float *rhs, float *rdsum, float *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    slatdf( MKL_INT *ijob, MKL_INT *n, float *z, MKL_INT *ldz, float *rhs, float *rdsum, float *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    slatdf_( MKL_INT *ijob, MKL_INT *n, float *z, MKL_INT *ldz, float *rhs, float *rdsum, float *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    SLATPS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, float *ap, float *x, float *scale, float *cnorm, MKL_INT *info );
void    SLATPS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, float *ap, float *x, float *scale, float *cnorm, MKL_INT *info );
void    slatps( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, float *ap, float *x, float *scale, float *cnorm, MKL_INT *info );
void    slatps_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, float *ap, float *x, float *scale, float *cnorm, MKL_INT *info );
void    SLATRD( char *uplo, MKL_INT *n, MKL_INT *nb, float *a, MKL_INT *lda, float *e, float *tau, float *w, MKL_INT *ldw );
void    SLATRD_( char *uplo, MKL_INT *n, MKL_INT *nb, float *a, MKL_INT *lda, float *e, float *tau, float *w, MKL_INT *ldw );
void    slatrd( char *uplo, MKL_INT *n, MKL_INT *nb, float *a, MKL_INT *lda, float *e, float *tau, float *w, MKL_INT *ldw );
void    slatrd_( char *uplo, MKL_INT *n, MKL_INT *nb, float *a, MKL_INT *lda, float *e, float *tau, float *w, MKL_INT *ldw );
void    SLATRS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, float *a, MKL_INT *lda, float *x, float *scale, float *cnorm, MKL_INT *info );
void    SLATRS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, float *a, MKL_INT *lda, float *x, float *scale, float *cnorm, MKL_INT *info );
void    slatrs( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, float *a, MKL_INT *lda, float *x, float *scale, float *cnorm, MKL_INT *info );
void    slatrs_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, float *a, MKL_INT *lda, float *x, float *scale, float *cnorm, MKL_INT *info );
void    SLATRZ( MKL_INT *m, MKL_INT *n, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *work );
void    SLATRZ_( MKL_INT *m, MKL_INT *n, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *work );
void    slatrz( MKL_INT *m, MKL_INT *n, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *work );
void    slatrz_( MKL_INT *m, MKL_INT *n, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *work );
void    SLATZM( char *side, MKL_INT *m, MKL_INT *n, float *v, MKL_INT *incv, float *tau, float *c1, float *c2, MKL_INT *ldc, float *work );
void    SLATZM_( char *side, MKL_INT *m, MKL_INT *n, float *v, MKL_INT *incv, float *tau, float *c1, float *c2, MKL_INT *ldc, float *work );
void    slatzm( char *side, MKL_INT *m, MKL_INT *n, float *v, MKL_INT *incv, float *tau, float *c1, float *c2, MKL_INT *ldc, float *work );
void    slatzm_( char *side, MKL_INT *m, MKL_INT *n, float *v, MKL_INT *incv, float *tau, float *c1, float *c2, MKL_INT *ldc, float *work );
void    SLAUU2( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SLAUU2_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    slauu2( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    slauu2_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SLAUUM( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SLAUUM_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    slauum( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    slauum_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SOPGTR( char *uplo, MKL_INT *n, float *ap, float *tau, float *q, MKL_INT *ldq, float *work, MKL_INT *info );
void    SOPGTR_( char *uplo, MKL_INT *n, float *ap, float *tau, float *q, MKL_INT *ldq, float *work, MKL_INT *info );
void    sopgtr( char *uplo, MKL_INT *n, float *ap, float *tau, float *q, MKL_INT *ldq, float *work, MKL_INT *info );
void    sopgtr_( char *uplo, MKL_INT *n, float *ap, float *tau, float *q, MKL_INT *ldq, float *work, MKL_INT *info );
void    SOPMTR( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, float *ap, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SOPMTR_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, float *ap, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sopmtr( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, float *ap, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sopmtr_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, float *ap, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORG2L( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SORG2L_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sorg2l( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sorg2l_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SORG2R( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SORG2R_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sorg2r( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sorg2r_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SORGBR( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGBR_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorgbr( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorgbr_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGHR( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGHR_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorghr( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorghr_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGL2( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SORGL2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sorgl2( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sorgl2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SORGLQ( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGLQ_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorglq( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorglq_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGQL( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGQL_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorgql( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorgql_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGQR( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGQR_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorgqr( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorgqr_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGR2( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SORGR2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sorgr2( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    sorgr2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *info );
void    SORGRQ( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGRQ_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorgrq( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorgrq_( MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGTR( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORGTR_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorgtr( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    sorgtr_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORM2L( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORM2L_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sorm2l( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sorm2l_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORM2R( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORM2R_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sorm2r( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sorm2r_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORMBR( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMBR_( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormbr( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormbr_( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMHR( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMHR_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormhr( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormhr_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORML2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORML2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sorml2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sorml2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORMLQ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMLQ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormlq( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormlq_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMQL( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMQL_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormql( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormql_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMQR( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMQR_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormqr( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormqr_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMR2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORMR2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sormr2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sormr2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORMR3( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORMR3_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sormr3( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    sormr3_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *info );
void    SORMRQ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMRQ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormrq( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormrq_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMRZ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMRZ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormrz( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormrz_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMTR( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SORMTR_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormtr( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    sormtr_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *c, MKL_INT *ldc, float *work, MKL_INT *lwork, MKL_INT *info );
void    SPBCON( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPBCON_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    spbcon( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    spbcon_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPBEQU( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *s, float *scond, float *amax, MKL_INT *info );
void    SPBEQU_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *s, float *scond, float *amax, MKL_INT *info );
void    spbequ( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *s, float *scond, float *amax, MKL_INT *info );
void    spbequ_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *s, float *scond, float *amax, MKL_INT *info );
void    SPBRFS( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPBRFS_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    spbrfs( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    spbrfs_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPBSTF( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    SPBSTF_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    spbstf( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    spbstf_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    SPBSV( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPBSV_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    spbsv( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    spbsv_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPBSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPBSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    spbsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    spbsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *afb, MKL_INT *ldafb, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPBTF2( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    SPBTF2_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    spbtf2( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    spbtf2_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    SPBTRF( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    SPBTRF_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    spbtrf( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    spbtrf_( char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, MKL_INT *info );
void    SPBTRS( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPBTRS_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    spbtrs( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    spbtrs_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPOCON( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPOCON_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    spocon( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    spocon_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPOEQU( MKL_INT *n, float *a, MKL_INT *lda, float *s, float *scond, float *amax, MKL_INT *info );
void    SPOEQU_( MKL_INT *n, float *a, MKL_INT *lda, float *s, float *scond, float *amax, MKL_INT *info );
void    spoequ( MKL_INT *n, float *a, MKL_INT *lda, float *s, float *scond, float *amax, MKL_INT *info );
void    spoequ_( MKL_INT *n, float *a, MKL_INT *lda, float *s, float *scond, float *amax, MKL_INT *info );
void    SPORFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPORFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sporfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sporfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPOSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPOSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    sposv( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    sposv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPOSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPOSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sposvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sposvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPOTF2( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SPOTF2_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    spotf2( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    spotf2_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SPOTRF( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SPOTRF_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    spotrf( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    spotrf_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SPOTRI( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SPOTRI_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    spotri( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    spotri_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    SPOTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPOTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    spotrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    spotrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPPCON( char *uplo, MKL_INT *n, float *ap, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPPCON_( char *uplo, MKL_INT *n, float *ap, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    sppcon( char *uplo, MKL_INT *n, float *ap, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    sppcon_( char *uplo, MKL_INT *n, float *ap, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPPEQU( char *uplo, MKL_INT *n, float *ap, float *s, float *scond, float *amax, MKL_INT *info );
void    SPPEQU_( char *uplo, MKL_INT *n, float *ap, float *s, float *scond, float *amax, MKL_INT *info );
void    sppequ( char *uplo, MKL_INT *n, float *ap, float *s, float *scond, float *amax, MKL_INT *info );
void    sppequ_( char *uplo, MKL_INT *n, float *ap, float *s, float *scond, float *amax, MKL_INT *info );
void    SPPRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPPRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    spprfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    spprfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPPSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPPSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    sppsv( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    sppsv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPPSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPPSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sppsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sppsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, char *equed, float *s, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SPPTRF( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    SPPTRF_( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    spptrf( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    spptrf_( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    SPPTRI( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    SPPTRI_( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    spptri( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    spptri_( char *uplo, MKL_INT *n, float *ap, MKL_INT *info );
void    SPPTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPPTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    spptrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    spptrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPTCON( MKL_INT *n, float *d, float *e, float *anorm, float *rcond, float *work, MKL_INT *info );
void    SPTCON_( MKL_INT *n, float *d, float *e, float *anorm, float *rcond, float *work, MKL_INT *info );
void    sptcon( MKL_INT *n, float *d, float *e, float *anorm, float *rcond, float *work, MKL_INT *info );
void    sptcon_( MKL_INT *n, float *d, float *e, float *anorm, float *rcond, float *work, MKL_INT *info );
void    SPTEQR( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SPTEQR_( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    spteqr( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    spteqr_( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SPTRFS( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *df, float *ef, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *info );
void    SPTRFS_( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *df, float *ef, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *info );
void    sptrfs( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *df, float *ef, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *info );
void    sptrfs_( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *df, float *ef, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *info );
void    SPTSV( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPTSV_( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, MKL_INT *info );
void    sptsv( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, MKL_INT *info );
void    sptsv_( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPTSVX( char *fact, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *df, float *ef, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *info );
void    SPTSVX_( char *fact, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *df, float *ef, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *info );
void    sptsvx( char *fact, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *df, float *ef, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *info );
void    sptsvx_( char *fact, MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *df, float *ef, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *info );
void    SPTTRF( MKL_INT *n, float *d, float *e, MKL_INT *info );
void    SPTTRF_( MKL_INT *n, float *d, float *e, MKL_INT *info );
void    spttrf( MKL_INT *n, float *d, float *e, MKL_INT *info );
void    spttrf_( MKL_INT *n, float *d, float *e, MKL_INT *info );
void    SPTTRS( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPTTRS_( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, MKL_INT *info );
void    spttrs( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, MKL_INT *info );
void    spttrs_( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb, MKL_INT *info );
void    SPTTS2( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb );
void    SPTTS2_( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb );
void    sptts2( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb );
void    sptts2_( MKL_INT *n, MKL_INT *nrhs, float *d, float *e, float *b, MKL_INT *ldb );
void    SRSCL( MKL_INT *n, float *sa, float *sx, MKL_INT *incx );
void    SRSCL_( MKL_INT *n, float *sa, float *sx, MKL_INT *incx );
void    srscl( MKL_INT *n, float *sa, float *sx, MKL_INT *incx );
void    srscl_( MKL_INT *n, float *sa, float *sx, MKL_INT *incx );
void    SSBEV( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSBEV_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    ssbev( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    ssbev_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSBEVD( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSBEVD_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ssbevd( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ssbevd_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSBEVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSBEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ssbevx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ssbevx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSBGST( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *x, MKL_INT *ldx, float *work, MKL_INT *info );
void    SSBGST_( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *x, MKL_INT *ldx, float *work, MKL_INT *info );
void    ssbgst( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *x, MKL_INT *ldx, float *work, MKL_INT *info );
void    ssbgst_( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *x, MKL_INT *ldx, float *work, MKL_INT *info );
void    SSBGV( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSBGV_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    ssbgv( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    ssbgv_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSBGVD( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSBGVD_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ssbgvd( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ssbgvd_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSBGVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSBGVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ssbgvx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ssbgvx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, float *ab, MKL_INT *ldab, float *bb, MKL_INT *ldbb, float *q, MKL_INT *ldq, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSBTRD( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *d, float *e, float *q, MKL_INT *ldq, float *work, MKL_INT *info );
void    SSBTRD_( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *d, float *e, float *q, MKL_INT *ldq, float *work, MKL_INT *info );
void    ssbtrd( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *d, float *e, float *q, MKL_INT *ldq, float *work, MKL_INT *info );
void    ssbtrd_( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *d, float *e, float *q, MKL_INT *ldq, float *work, MKL_INT *info );
void    SSPCON( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSPCON_( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    sspcon( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    sspcon_( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSPEV( char *jobz, char *uplo, MKL_INT *n, float *ap, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSPEV_( char *jobz, char *uplo, MKL_INT *n, float *ap, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    sspev( char *jobz, char *uplo, MKL_INT *n, float *ap, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    sspev_( char *jobz, char *uplo, MKL_INT *n, float *ap, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSPEVD( char *jobz, char *uplo, MKL_INT *n, float *ap, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSPEVD_( char *jobz, char *uplo, MKL_INT *n, float *ap, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sspevd( char *jobz, char *uplo, MKL_INT *n, float *ap, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sspevd_( char *jobz, char *uplo, MKL_INT *n, float *ap, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSPEVX( char *jobz, char *range, char *uplo, MKL_INT *n, float *ap, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSPEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, float *ap, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    sspevx( char *jobz, char *range, char *uplo, MKL_INT *n, float *ap, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    sspevx_( char *jobz, char *range, char *uplo, MKL_INT *n, float *ap, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSPGST( MKL_INT *itype, char *uplo, MKL_INT *n, float *ap, float *bp, MKL_INT *info );
void    SSPGST_( MKL_INT *itype, char *uplo, MKL_INT *n, float *ap, float *bp, MKL_INT *info );
void    sspgst( MKL_INT *itype, char *uplo, MKL_INT *n, float *ap, float *bp, MKL_INT *info );
void    sspgst_( MKL_INT *itype, char *uplo, MKL_INT *n, float *ap, float *bp, MKL_INT *info );
void    SSPGV( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *ap, float *bp, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSPGV_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *ap, float *bp, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    sspgv( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *ap, float *bp, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    sspgv_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *ap, float *bp, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSPGVD( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *ap, float *bp, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSPGVD_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *ap, float *bp, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sspgvd( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *ap, float *bp, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sspgvd_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *ap, float *bp, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSPGVX( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, float *ap, float *bp, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSPGVX_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, float *ap, float *bp, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    sspgvx( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, float *ap, float *bp, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    sspgvx_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, float *ap, float *bp, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSPRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSPRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    ssprfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    ssprfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSPSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SSPSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sspsv( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    sspsv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SSPSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSPSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sspsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    sspsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, float *afp, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSPTRD( char *uplo, MKL_INT *n, float *ap, float *d, float *e, float *tau, MKL_INT *info );
void    SSPTRD_( char *uplo, MKL_INT *n, float *ap, float *d, float *e, float *tau, MKL_INT *info );
void    ssptrd( char *uplo, MKL_INT *n, float *ap, float *d, float *e, float *tau, MKL_INT *info );
void    ssptrd_( char *uplo, MKL_INT *n, float *ap, float *d, float *e, float *tau, MKL_INT *info );
void    SSPTRF( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, MKL_INT *info );
void    SSPTRF_( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, MKL_INT *info );
void    ssptrf( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, MKL_INT *info );
void    ssptrf_( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, MKL_INT *info );
void    SSPTRI( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *work, MKL_INT *info );
void    SSPTRI_( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *work, MKL_INT *info );
void    ssptri( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *work, MKL_INT *info );
void    ssptri_( char *uplo, MKL_INT *n, float *ap, MKL_INT *ipiv, float *work, MKL_INT *info );
void    SSPTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SSPTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    ssptrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    ssptrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *ap, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SSTEBZ( char *range, char *order, MKL_INT *n, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, float *d, float *e, MKL_INT *m, MKL_INT *nsplit, float *w, MKL_INT *iblock, MKL_INT *isplit, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSTEBZ_( char *range, char *order, MKL_INT *n, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, float *d, float *e, MKL_INT *m, MKL_INT *nsplit, float *w, MKL_INT *iblock, MKL_INT *isplit, float *work, MKL_INT *iwork, MKL_INT *info );
void    sstebz( char *range, char *order, MKL_INT *n, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, float *d, float *e, MKL_INT *m, MKL_INT *nsplit, float *w, MKL_INT *iblock, MKL_INT *isplit, float *work, MKL_INT *iwork, MKL_INT *info );
void    sstebz_( char *range, char *order, MKL_INT *n, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, float *d, float *e, MKL_INT *m, MKL_INT *nsplit, float *w, MKL_INT *iblock, MKL_INT *isplit, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSTEDC( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSTEDC_( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sstedc( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sstedc_( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSTEGR( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSTEGR_( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sstegr( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sstegr_( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSTEIN( MKL_INT *n, float *d, float *e, MKL_INT *m, float *w, MKL_INT *iblock, MKL_INT *isplit, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSTEIN_( MKL_INT *n, float *d, float *e, MKL_INT *m, float *w, MKL_INT *iblock, MKL_INT *isplit, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    sstein( MKL_INT *n, float *d, float *e, MKL_INT *m, float *w, MKL_INT *iblock, MKL_INT *isplit, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    sstein_( MKL_INT *n, float *d, float *e, MKL_INT *m, float *w, MKL_INT *iblock, MKL_INT *isplit, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSTEQR( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSTEQR_( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    ssteqr( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    ssteqr_( char *compz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSTERF( MKL_INT *n, float *d, float *e, MKL_INT *info );
void    SSTERF_( MKL_INT *n, float *d, float *e, MKL_INT *info );
void    ssterf( MKL_INT *n, float *d, float *e, MKL_INT *info );
void    ssterf_( MKL_INT *n, float *d, float *e, MKL_INT *info );
void    SSTEV( char *jobz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSTEV_( char *jobz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    sstev( char *jobz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    sstev_( char *jobz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *info );
void    SSTEVD( char *jobz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSTEVD_( char *jobz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sstevd( char *jobz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sstevd_( char *jobz, MKL_INT *n, float *d, float *e, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSTEVR( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSTEVR_( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sstevr( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    sstevr_( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSTEVX( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSTEVX_( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    sstevx( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    sstevx_( char *jobz, char *range, MKL_INT *n, float *d, float *e, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSYCON( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSYCON_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    ssycon( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    ssycon_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *anorm, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSYEV( char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *w, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYEV_( char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *w, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssyev( char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *w, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssyev_( char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *w, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYEVD( char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *w, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSYEVD_( char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *w, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ssyevd( char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *w, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ssyevd_( char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *w, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSYEVR( char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSYEVR_( char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ssyevr( char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ssyevr_( char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, MKL_INT *isuppz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSYEVX( char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSYEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ssyevx( char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ssyevx_( char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSYGS2( MKL_INT *itype, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    SSYGS2_( MKL_INT *itype, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    ssygs2( MKL_INT *itype, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    ssygs2_( MKL_INT *itype, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    SSYGST( MKL_INT *itype, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    SSYGST_( MKL_INT *itype, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    ssygst( MKL_INT *itype, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    ssygst_( MKL_INT *itype, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    SSYGV( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *w, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYGV_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *w, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssygv( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *w, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssygv_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *w, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYGVD( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *w, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSYGVD_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *w, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ssygvd( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *w, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ssygvd_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *w, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    SSYGVX( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSYGVX_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ssygvx( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ssygvx_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, float *vu, MKL_INT *il, MKL_INT *iu, float *abstol, MKL_INT *m, float *w, float *z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    SSYRDB( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *a, MKL_INT *lda, float *d, float *e, float *tau, float* z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYRDB_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *a, MKL_INT *lda, float *d, float *e, float *tau, float* z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssyrdb( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *a, MKL_INT *lda, float *d, float *e, float *tau, float* z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssyrdb_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, float *a, MKL_INT *lda, float *d, float *e, float *tau, float* z, MKL_INT *ldz, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSYRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    ssyrfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    ssyrfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    SSYSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssysv( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssysv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    SSYSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ssysvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ssysvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *af, MKL_INT *ldaf, MKL_INT *ipiv, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *rcond, float *ferr, float *berr, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    SSYTD2( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tau, MKL_INT *info );
void    SSYTD2_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tau, MKL_INT *info );
void    ssytd2( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tau, MKL_INT *info );
void    ssytd2_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tau, MKL_INT *info );
void    SSYTF2( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    SSYTF2_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    ssytf2( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    ssytf2_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    SSYTRD( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYTRD_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssytrd( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssytrd_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, float *d, float *e, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYTRF( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYTRF_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssytrf( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *lwork, MKL_INT *info );
void    ssytrf_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *lwork, MKL_INT *info );
void    SSYTRI( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *info );
void    SSYTRI_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *info );
void    ssytri( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *info );
void    ssytri_( char *uplo, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *ipiv, float *work, MKL_INT *info );
void    SSYTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    SSYTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    ssytrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    ssytrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, MKL_INT *ipiv, float *b, MKL_INT *ldb, MKL_INT *info );
void    STBCON( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    STBCON_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    stbcon( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    stbcon_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, float *ab, MKL_INT *ldab, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    STBRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    STBRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    stbrfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    stbrfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    STBTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    STBTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    stbtrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    stbtrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, float *ab, MKL_INT *ldab, float *b, MKL_INT *ldb, MKL_INT *info );
void    STGEVC( char *side, char *howmny, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *info );
void    STGEVC_( char *side, char *howmny, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *info );
void    stgevc( char *side, char *howmny, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *info );
void    stgevc_( char *side, char *howmny, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *info );
void    STGEX2( void *wantq, void *wantz, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, float *work, MKL_INT *lwork, MKL_INT *info );
void    STGEX2_( void *wantq, void *wantz, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, float *work, MKL_INT *lwork, MKL_INT *info );
void    stgex2( void *wantq, void *wantz, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, float *work, MKL_INT *lwork, MKL_INT *info );
void    stgex2_( void *wantq, void *wantz, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, float *work, MKL_INT *lwork, MKL_INT *info );
void    STGEXC( void *wantq, void *wantz, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, float *work, MKL_INT *lwork, MKL_INT *info );
void    STGEXC_( void *wantq, void *wantz, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, float *work, MKL_INT *lwork, MKL_INT *info );
void    stgexc( void *wantq, void *wantz, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, float *work, MKL_INT *lwork, MKL_INT *info );
void    stgexc_( void *wantq, void *wantz, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, float *work, MKL_INT *lwork, MKL_INT *info );
void    STGSEN( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *m, float *pl, float *pr, float *dif, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    STGSEN_( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *m, float *pl, float *pr, float *dif, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    stgsen( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *m, float *pl, float *pr, float *dif, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    stgsen_( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *alphar, float *alphai, float *beta, float *q, MKL_INT *ldq, float *z, MKL_INT *ldz, MKL_INT *m, float *pl, float *pr, float *dif, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    STGSJA( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *tola, float *tolb, float *alpha, float *beta, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, float *work, MKL_INT *ncycle, MKL_INT *info );
void    STGSJA_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *tola, float *tolb, float *alpha, float *beta, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, float *work, MKL_INT *ncycle, MKL_INT *info );
void    stgsja( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *tola, float *tolb, float *alpha, float *beta, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, float *work, MKL_INT *ncycle, MKL_INT *info );
void    stgsja_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *tola, float *tolb, float *alpha, float *beta, float *u, MKL_INT *ldu, float *v, MKL_INT *ldv, float *q, MKL_INT *ldq, float *work, MKL_INT *ncycle, MKL_INT *info );
void    STGSNA( char *job, char *howmny, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *s, float *dif, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    STGSNA_( char *job, char *howmny, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *s, float *dif, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    stgsna( char *job, char *howmny, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *s, float *dif, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    stgsna_( char *job, char *howmny, void *select, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *s, float *dif, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    STGSY2( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *d, MKL_INT *ldd, float *e, MKL_INT *lde, float *f, MKL_INT *ldf, float *scale, float *rdsum, float *rdscal, MKL_INT *iwork, MKL_INT *pq, MKL_INT *info );
void    STGSY2_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *d, MKL_INT *ldd, float *e, MKL_INT *lde, float *f, MKL_INT *ldf, float *scale, float *rdsum, float *rdscal, MKL_INT *iwork, MKL_INT *pq, MKL_INT *info );
void    stgsy2( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *d, MKL_INT *ldd, float *e, MKL_INT *lde, float *f, MKL_INT *ldf, float *scale, float *rdsum, float *rdscal, MKL_INT *iwork, MKL_INT *pq, MKL_INT *info );
void    stgsy2_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *d, MKL_INT *ldd, float *e, MKL_INT *lde, float *f, MKL_INT *ldf, float *scale, float *rdsum, float *rdscal, MKL_INT *iwork, MKL_INT *pq, MKL_INT *info );
void    STGSYL( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *d, MKL_INT *ldd, float *e, MKL_INT *lde, float *f, MKL_INT *ldf, float *scale, float *dif, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    STGSYL_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *d, MKL_INT *ldd, float *e, MKL_INT *lde, float *f, MKL_INT *ldf, float *scale, float *dif, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    stgsyl( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *d, MKL_INT *ldd, float *e, MKL_INT *lde, float *f, MKL_INT *ldf, float *scale, float *dif, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    stgsyl_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *d, MKL_INT *ldd, float *e, MKL_INT *lde, float *f, MKL_INT *ldf, float *scale, float *dif, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    STPCON( char *norm, char *uplo, char *diag, MKL_INT *n, float *ap, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    STPCON_( char *norm, char *uplo, char *diag, MKL_INT *n, float *ap, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    stpcon( char *norm, char *uplo, char *diag, MKL_INT *n, float *ap, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    stpcon_( char *norm, char *uplo, char *diag, MKL_INT *n, float *ap, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    STPRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    STPRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    stprfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    stprfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    STPTRI( char *uplo, char *diag, MKL_INT *n, float *ap, MKL_INT *info );
void    STPTRI_( char *uplo, char *diag, MKL_INT *n, float *ap, MKL_INT *info );
void    stptri( char *uplo, char *diag, MKL_INT *n, float *ap, MKL_INT *info );
void    stptri_( char *uplo, char *diag, MKL_INT *n, float *ap, MKL_INT *info );
void    STPTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    STPTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    stptrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    stptrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *ap, float *b, MKL_INT *ldb, MKL_INT *info );
void    STRCON( char *norm, char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    STRCON_( char *norm, char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    strcon( char *norm, char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    strcon_( char *norm, char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, float *rcond, float *work, MKL_INT *iwork, MKL_INT *info );
void    STREVC( char *side, char *howmny, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *info );
void    STREVC_( char *side, char *howmny, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *info );
void    strevc( char *side, char *howmny, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *info );
void    strevc_( char *side, char *howmny, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *info );
void    STREXC( char *compq, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, float *work, MKL_INT *info );
void    STREXC_( char *compq, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, float *work, MKL_INT *info );
void    strexc( char *compq, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, float *work, MKL_INT *info );
void    strexc_( char *compq, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, float *work, MKL_INT *info );
void    STRRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    STRRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    strrfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    strrfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *x, MKL_INT *ldx, float *ferr, float *berr, float *work, MKL_INT *iwork, MKL_INT *info );
void    STRSEN( char *job, char *compq, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, float *wr, float *wi, MKL_INT *m, float *s, float *sep, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    STRSEN_( char *job, char *compq, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, float *wr, float *wi, MKL_INT *m, float *s, float *sep, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    strsen( char *job, char *compq, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, float *wr, float *wi, MKL_INT *m, float *s, float *sep, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    strsen_( char *job, char *compq, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *q, MKL_INT *ldq, float *wr, float *wi, MKL_INT *m, float *s, float *sep, float *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    STRSNA( char *job, char *howmny, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *s, float *sep, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *ldwork, MKL_INT *iwork, MKL_INT *info );
void    STRSNA_( char *job, char *howmny, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *s, float *sep, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *ldwork, MKL_INT *iwork, MKL_INT *info );
void    strsna( char *job, char *howmny, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *s, float *sep, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *ldwork, MKL_INT *iwork, MKL_INT *info );
void    strsna_( char *job, char *howmny, void *select, MKL_INT *n, float *t, MKL_INT *ldt, float *vl, MKL_INT *ldvl, float *vr, MKL_INT *ldvr, float *s, float *sep, MKL_INT *mm, MKL_INT *m, float *work, MKL_INT *ldwork, MKL_INT *iwork, MKL_INT *info );
void    STRSYL( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *scale, MKL_INT *info );
void    STRSYL_( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *scale, MKL_INT *info );
void    strsyl( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *scale, MKL_INT *info );
void    strsyl_( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, float *c, MKL_INT *ldc, float *scale, MKL_INT *info );
void    STRTI2( char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    STRTI2_( char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    strti2( char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    strti2_( char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    STRTRI( char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    STRTRI_( char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    strtri( char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    strtri_( char *uplo, char *diag, MKL_INT *n, float *a, MKL_INT *lda, MKL_INT *info );
void    STRTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    STRTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    strtrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    strtrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, float *a, MKL_INT *lda, float *b, MKL_INT *ldb, MKL_INT *info );
void    STZRQF( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, MKL_INT *info );
void    STZRQF_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, MKL_INT *info );
void    stzrqf( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, MKL_INT *info );
void    stzrqf_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, MKL_INT *info );
void    STZRZF( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    STZRZF_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    stzrzf( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    stzrzf_( MKL_INT *m, MKL_INT *n, float *a, MKL_INT *lda, float *tau, float *work, MKL_INT *lwork, MKL_INT *info );
void    DBDSDC( char *uplo, char *compq, MKL_INT *n, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *q, MKL_INT *iq, double *work, MKL_INT *iwork, MKL_INT *info );
void    DBDSDC_( char *uplo, char *compq, MKL_INT *n, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *q, MKL_INT *iq, double *work, MKL_INT *iwork, MKL_INT *info );
void    dbdsdc( char *uplo, char *compq, MKL_INT *n, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *q, MKL_INT *iq, double *work, MKL_INT *iwork, MKL_INT *info );
void    dbdsdc_( char *uplo, char *compq, MKL_INT *n, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *q, MKL_INT *iq, double *work, MKL_INT *iwork, MKL_INT *info );
void    DBDSQR( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, double *vt, MKL_INT *ldvt, double *u, MKL_INT *ldu, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DBDSQR_( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, double *vt, MKL_INT *ldvt, double *u, MKL_INT *ldu, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dbdsqr( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, double *vt, MKL_INT *ldvt, double *u, MKL_INT *ldu, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dbdsqr_( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, double *vt, MKL_INT *ldvt, double *u, MKL_INT *ldu, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DDISNA( char *job, MKL_INT *m, MKL_INT *n, double *d, double *sep, MKL_INT *info );
void    DDISNA_( char *job, MKL_INT *m, MKL_INT *n, double *d, double *sep, MKL_INT *info );
void    ddisna( char *job, MKL_INT *m, MKL_INT *n, double *d, double *sep, MKL_INT *info );
void    ddisna_( char *job, MKL_INT *m, MKL_INT *n, double *d, double *sep, MKL_INT *info );
void    DGBBRD( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *d, double *e, double *q, MKL_INT *ldq, double *pt, MKL_INT *ldpt, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DGBBRD_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *d, double *e, double *q, MKL_INT *ldq, double *pt, MKL_INT *ldpt, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dgbbrd( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *d, double *e, double *q, MKL_INT *ldq, double *pt, MKL_INT *ldpt, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dgbbrd_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *d, double *e, double *q, MKL_INT *ldq, double *pt, MKL_INT *ldpt, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DGBCON( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGBCON_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgbcon( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgbcon_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGBEQU( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    DGBEQU_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    dgbequ( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    dgbequ_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    DGBRFS( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGBRFS_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgbrfs( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgbrfs_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGBSV( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGBSV_( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgbsv( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgbsv_( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGBSVX( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, double *r, double *c, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGBSVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, double *r, double *c, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgbsvx( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, double *r, double *c, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgbsvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, double *r, double *c, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGBTF2( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    DGBTF2_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    dgbtf2( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    dgbtf2_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    DGBTRF( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    DGBTRF_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    dgbtrf( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    dgbtrf_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    DGBTRS( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGBTRS_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgbtrs( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgbtrs_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, double *ab, MKL_INT *ldab, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGEBAK( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *m, double *v, MKL_INT *ldv, MKL_INT *info );
void    DGEBAK_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *m, double *v, MKL_INT *ldv, MKL_INT *info );
void    dgebak( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *m, double *v, MKL_INT *ldv, MKL_INT *info );
void    dgebak_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *m, double *v, MKL_INT *ldv, MKL_INT *info );
void    DGEBAL( char *job, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *info );
void    DGEBAL_( char *job, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *info );
void    dgebal( char *job, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *info );
void    dgebal_( char *job, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *info );
void    DGEBD2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *work, MKL_INT *info );
void    DGEBD2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *work, MKL_INT *info );
void    dgebd2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *work, MKL_INT *info );
void    dgebd2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *work, MKL_INT *info );
void    DGEBRD( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEBRD_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgebrd( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgebrd_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGECON( char *norm, MKL_INT *n, double *a, MKL_INT *lda, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGECON_( char *norm, MKL_INT *n, double *a, MKL_INT *lda, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgecon( char *norm, MKL_INT *n, double *a, MKL_INT *lda, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgecon_( char *norm, MKL_INT *n, double *a, MKL_INT *lda, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGEEQU( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    DGEEQU_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    dgeequ( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    dgeequ_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    DGEES( char *jobvs, char *sort, void *select, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *sdim, double *wr, double *wi, double *vs, MKL_INT *ldvs, double *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    DGEES_( char *jobvs, char *sort, void *select, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *sdim, double *wr, double *wi, double *vs, MKL_INT *ldvs, double *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    dgees( char *jobvs, char *sort, void *select, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *sdim, double *wr, double *wi, double *vs, MKL_INT *ldvs, double *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    dgees_( char *jobvs, char *sort, void *select, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *sdim, double *wr, double *wi, double *vs, MKL_INT *ldvs, double *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    DGEESX( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *sdim, double *wr, double *wi, double *vs, MKL_INT *ldvs, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    DGEESX_( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *sdim, double *wr, double *wi, double *vs, MKL_INT *ldvs, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    dgeesx( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *sdim, double *wr, double *wi, double *vs, MKL_INT *ldvs, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    dgeesx_( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *sdim, double *wr, double *wi, double *vs, MKL_INT *ldvs, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    DGEEV( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEEV_( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgeev( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgeev_( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEEVX( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DGEEVX_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dgeevx( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dgeevx_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DGEGS( char *jobvsl, char *jobvsr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEGS_( char *jobvsl, char *jobvsr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgegs( char *jobvsl, char *jobvsr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgegs_( char *jobvsl, char *jobvsr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEGV( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEGV_( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgegv( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgegv_( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEHD2( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DGEHD2_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dgehd2( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dgehd2_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DGEHRD( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEHRD_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgehrd( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgehrd_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGELQ2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DGELQ2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dgelq2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dgelq2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DGELQF( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGELQF_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgelqf( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgelqf_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGELS( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGELS_( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgels( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgels_( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGELSD( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DGELSD_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dgelsd( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dgelsd_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DGELSS( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGELSS_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgelss( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgelss_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGELSX( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, double *work, MKL_INT *info );
void    DGELSX_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, double *work, MKL_INT *info );
void    dgelsx( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, double *work, MKL_INT *info );
void    dgelsx_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, double *work, MKL_INT *info );
void    DGELSY( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGELSY_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgelsy( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgelsy_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEQL2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DGEQL2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dgeql2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dgeql2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DGEQLF( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEQLF_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgeqlf( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgeqlf_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEQP3( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEQP3_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgeqp3( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgeqp3_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEQPF( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *work, MKL_INT *info );
void    DGEQPF_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *work, MKL_INT *info );
void    dgeqpf( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *work, MKL_INT *info );
void    dgeqpf_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *work, MKL_INT *info );
void    DGEQR2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DGEQR2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dgeqr2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dgeqr2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DGEQRF( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGEQRF_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgeqrf( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgeqrf_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGERFS( char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGERFS_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgerfs( char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgerfs_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGERQ2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DGERQ2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dgerq2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dgerq2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DGERQF( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGERQF_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgerqf( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgerqf_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGESC2( MKL_INT *n, double *a, MKL_INT *lda, double *rhs, MKL_INT *ipiv, MKL_INT *jpiv, double *scale );
void    DGESC2_( MKL_INT *n, double *a, MKL_INT *lda, double *rhs, MKL_INT *ipiv, MKL_INT *jpiv, double *scale );
void    dgesc2( MKL_INT *n, double *a, MKL_INT *lda, double *rhs, MKL_INT *ipiv, MKL_INT *jpiv, double *scale );
void    dgesc2_( MKL_INT *n, double *a, MKL_INT *lda, double *rhs, MKL_INT *ipiv, MKL_INT *jpiv, double *scale );
void    DGESDD( char *jobz, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DGESDD_( char *jobz, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dgesdd( char *jobz, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dgesdd_( char *jobz, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DGESV( MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGESV_( MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgesv( MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgesv_( MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGESVD( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGESVD_( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgesvd( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgesvd_( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGESVX( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, double *r, double *c, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGESVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, double *r, double *c, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgesvx( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, double *r, double *c, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgesvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, double *r, double *c, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGETC2( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    DGETC2_( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    dgetc2( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    dgetc2_( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    DGETF2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    DGETF2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    dgetf2( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    dgetf2_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    DGETRF( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    DGETRF_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    dgetrf( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    dgetrf_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    DGETRI( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGETRI_( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgetri( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgetri_( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGETRS( char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGETRS_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgetrs( char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgetrs_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGGBAK( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, MKL_INT *m, double *v, MKL_INT *ldv, MKL_INT *info );
void    DGGBAK_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, MKL_INT *m, double *v, MKL_INT *ldv, MKL_INT *info );
void    dggbak( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, MKL_INT *m, double *v, MKL_INT *ldv, MKL_INT *info );
void    dggbak_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, MKL_INT *m, double *v, MKL_INT *ldv, MKL_INT *info );
void    DGGBAL( char *job, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *work, MKL_INT *info );
void    DGGBAL_( char *job, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *work, MKL_INT *info );
void    dggbal( char *job, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *work, MKL_INT *info );
void    dggbal_( char *job, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *work, MKL_INT *info );
void    DGGES( char *jobvsl, char *jobvsr, char *sort, void *delctg, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *sdim, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    DGGES_( char *jobvsl, char *jobvsr, char *sort, void *delctg, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *sdim, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    dgges( char *jobvsl, char *jobvsr, char *sort, void *delctg, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *sdim, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    dgges_( char *jobvsl, char *jobvsr, char *sort, void *delctg, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *sdim, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *work, MKL_INT *lwork, void *bwork, MKL_INT *info );
void    DGGESX( char *jobvsl, char *jobvsr, char *sort, void *delctg, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *sdim, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    DGGESX_( char *jobvsl, char *jobvsr, char *sort, void *delctg, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *sdim, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    dggesx( char *jobvsl, char *jobvsr, char *sort, void *delctg, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *sdim, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    dggesx_( char *jobvsl, char *jobvsr, char *sort, void *delctg, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *sdim, double *alphar, double *alphai, double *beta, double *vsl, MKL_INT *ldvsl, double *vsr, MKL_INT *ldvsr, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    DGGEV( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGGEV_( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    dggev( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    dggev_( char *jobvl, char *jobvr, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGGEVX( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    DGGEVX_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    dggevx( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    dggevx_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, double *work, MKL_INT *lwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    DGGGLM( MKL_INT *n, MKL_INT *m, MKL_INT *p, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *d, double *x, double *y, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGGGLM_( MKL_INT *n, MKL_INT *m, MKL_INT *p, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *d, double *x, double *y, double *work, MKL_INT *lwork, MKL_INT *info );
void    dggglm( MKL_INT *n, MKL_INT *m, MKL_INT *p, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *d, double *x, double *y, double *work, MKL_INT *lwork, MKL_INT *info );
void    dggglm_( MKL_INT *n, MKL_INT *m, MKL_INT *p, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *d, double *x, double *y, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGGHRD( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *info );
void    DGGHRD_( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *info );
void    dgghrd( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *info );
void    dgghrd_( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *info );
void    DGGLSE( MKL_INT *m, MKL_INT *n, MKL_INT *p, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, double *d, double *x, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGGLSE_( MKL_INT *m, MKL_INT *n, MKL_INT *p, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, double *d, double *x, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgglse( MKL_INT *m, MKL_INT *n, MKL_INT *p, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, double *d, double *x, double *work, MKL_INT *lwork, MKL_INT *info );
void    dgglse_( MKL_INT *m, MKL_INT *n, MKL_INT *p, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, double *d, double *x, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGGQRF( MKL_INT *n, MKL_INT *m, MKL_INT *p, double *a, MKL_INT *lda, double *taua, double *b, MKL_INT *ldb, double *taub, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGGQRF_( MKL_INT *n, MKL_INT *m, MKL_INT *p, double *a, MKL_INT *lda, double *taua, double *b, MKL_INT *ldb, double *taub, double *work, MKL_INT *lwork, MKL_INT *info );
void    dggqrf( MKL_INT *n, MKL_INT *m, MKL_INT *p, double *a, MKL_INT *lda, double *taua, double *b, MKL_INT *ldb, double *taub, double *work, MKL_INT *lwork, MKL_INT *info );
void    dggqrf_( MKL_INT *n, MKL_INT *m, MKL_INT *p, double *a, MKL_INT *lda, double *taua, double *b, MKL_INT *ldb, double *taub, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGGRQF( MKL_INT *m, MKL_INT *p, MKL_INT *n, double *a, MKL_INT *lda, double *taua, double *b, MKL_INT *ldb, double *taub, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGGRQF_( MKL_INT *m, MKL_INT *p, MKL_INT *n, double *a, MKL_INT *lda, double *taua, double *b, MKL_INT *ldb, double *taub, double *work, MKL_INT *lwork, MKL_INT *info );
void    dggrqf( MKL_INT *m, MKL_INT *p, MKL_INT *n, double *a, MKL_INT *lda, double *taua, double *b, MKL_INT *ldb, double *taub, double *work, MKL_INT *lwork, MKL_INT *info );
void    dggrqf_( MKL_INT *m, MKL_INT *p, MKL_INT *n, double *a, MKL_INT *lda, double *taua, double *b, MKL_INT *ldb, double *taub, double *work, MKL_INT *lwork, MKL_INT *info );
void    DGGSVD( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alpha, double *beta, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGGSVD_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alpha, double *beta, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, double *work, MKL_INT *iwork, MKL_INT *info );
void    dggsvd( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alpha, double *beta, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, double *work, MKL_INT *iwork, MKL_INT *info );
void    dggsvd_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alpha, double *beta, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGGSVP( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *tola, double *tolb, MKL_INT *k, MKL_INT *l, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, MKL_INT *iwork, double *tau, double *work, MKL_INT *info );
void    DGGSVP_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *tola, double *tolb, MKL_INT *k, MKL_INT *l, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, MKL_INT *iwork, double *tau, double *work, MKL_INT *info );
void    dggsvp( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *tola, double *tolb, MKL_INT *k, MKL_INT *l, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, MKL_INT *iwork, double *tau, double *work, MKL_INT *info );
void    dggsvp_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *tola, double *tolb, MKL_INT *k, MKL_INT *l, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, MKL_INT *iwork, double *tau, double *work, MKL_INT *info );
void    DGTCON( char *norm, MKL_INT *n, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGTCON_( char *norm, MKL_INT *n, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgtcon( char *norm, MKL_INT *n, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgtcon_( char *norm, MKL_INT *n, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGTRFS( char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGTRFS_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgtrfs( char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgtrfs_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGTSV( MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGTSV_( MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgtsv( MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgtsv_( MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGTSVX( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGTSVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgtsvx( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dgtsvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DGTTRF( MKL_INT *n, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, MKL_INT *info );
void    DGTTRF_( MKL_INT *n, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, MKL_INT *info );
void    dgttrf( MKL_INT *n, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, MKL_INT *info );
void    dgttrf_( MKL_INT *n, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, MKL_INT *info );
void    DGTTRS( char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGTTRS_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgttrs( char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dgttrs_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DGTTS2( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb );
void    DGTTS2_( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb );
void    dgtts2( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb );
void    dgtts2_( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, double *dl, double *d, double *du, double *du2, MKL_INT *ipiv, double *b, MKL_INT *ldb );
void    DHGEQZ( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    DHGEQZ_( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    dhgeqz( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    dhgeqz_( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    DHSEIN( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, double *h, MKL_INT *ldh, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    DHSEIN_( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, double *h, MKL_INT *ldh, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    dhsein( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, double *h, MKL_INT *ldh, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    dhsein_( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, double *h, MKL_INT *ldh, double *wr, double *wi, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    DHSEQR( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *h, MKL_INT *ldh, double *wr, double *wi, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    DHSEQR_( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *h, MKL_INT *ldh, double *wr, double *wi, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    dhseqr( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *h, MKL_INT *ldh, double *wr, double *wi, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    dhseqr_( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *h, MKL_INT *ldh, double *wr, double *wi, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    DLABAD( double *, double * );
void    DLABAD_( double *, double * );
void    dlabad( double *, double * );
void    dlabad_( double *, double * );
void    DLABRD( MKL_INT *m, MKL_INT *n, MKL_INT *nb, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *x, MKL_INT *ldx, double *y, MKL_INT *ldy );
void    DLABRD_( MKL_INT *m, MKL_INT *n, MKL_INT *nb, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *x, MKL_INT *ldx, double *y, MKL_INT *ldy );
void    dlabrd( MKL_INT *m, MKL_INT *n, MKL_INT *nb, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *x, MKL_INT *ldx, double *y, MKL_INT *ldy );
void    dlabrd_( MKL_INT *m, MKL_INT *n, MKL_INT *nb, double *a, MKL_INT *lda, double *d, double *e, double *tauq, double *taup, double *x, MKL_INT *ldx, double *y, MKL_INT *ldy );
void    DLACON( MKL_INT *n, double *v, double *x, MKL_INT *isgn, double *est, MKL_INT *kase );
void    DLACON_( MKL_INT *n, double *v, double *x, MKL_INT *isgn, double *est, MKL_INT *kase );
void    dlacon( MKL_INT *n, double *v, double *x, MKL_INT *isgn, double *est, MKL_INT *kase );
void    dlacon_( MKL_INT *n, double *v, double *x, MKL_INT *isgn, double *est, MKL_INT *kase );
void    DLACPY( char *uplo, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb );
void    DLACPY_( char *uplo, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb );
void    dlacpy( char *uplo, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb );
void    dlacpy_( char *uplo, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb );
void    DLADIV( double *a, double *b, double *c, double *d, double *p, double *q );
void    DLADIV_( double *a, double *b, double *c, double *d, double *p, double *q );
void    dladiv( double *a, double *b, double *c, double *d, double *p, double *q );
void    dladiv_( double *a, double *b, double *c, double *d, double *p, double *q );
void    DLAE2( double *a, double *b, double *c, double *rt1, double *rt2 );
void    DLAE2_( double *a, double *b, double *c, double *rt1, double *rt2 );
void    dlae2( double *a, double *b, double *c, double *rt1, double *rt2 );
void    dlae2_( double *a, double *b, double *c, double *rt1, double *rt2 );
void    DLAEBZ( MKL_INT *ijob, MKL_INT *nitmax, MKL_INT *n, MKL_INT *mmax, MKL_INT *minp, MKL_INT *nbmin, double *abstol, double *reltol, double *pivmin, double *d, double *e, double *e2, MKL_INT *nval, double *ab, double *c, MKL_INT *mout, MKL_INT *nab, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLAEBZ_( MKL_INT *ijob, MKL_INT *nitmax, MKL_INT *n, MKL_INT *mmax, MKL_INT *minp, MKL_INT *nbmin, double *abstol, double *reltol, double *pivmin, double *d, double *e, double *e2, MKL_INT *nval, double *ab, double *c, MKL_INT *mout, MKL_INT *nab, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlaebz( MKL_INT *ijob, MKL_INT *nitmax, MKL_INT *n, MKL_INT *mmax, MKL_INT *minp, MKL_INT *nbmin, double *abstol, double *reltol, double *pivmin, double *d, double *e, double *e2, MKL_INT *nval, double *ab, double *c, MKL_INT *mout, MKL_INT *nab, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlaebz_( MKL_INT *ijob, MKL_INT *nitmax, MKL_INT *n, MKL_INT *mmax, MKL_INT *minp, MKL_INT *nbmin, double *abstol, double *reltol, double *pivmin, double *d, double *e, double *e2, MKL_INT *nval, double *ab, double *c, MKL_INT *mout, MKL_INT *nab, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLAED0( MKL_INT *icompq, MKL_INT *qsiz, MKL_INT *n, double *d, double *e, double *q, MKL_INT *ldq, double *qstore, MKL_INT *ldqs, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLAED0_( MKL_INT *icompq, MKL_INT *qsiz, MKL_INT *n, double *d, double *e, double *q, MKL_INT *ldq, double *qstore, MKL_INT *ldqs, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlaed0( MKL_INT *icompq, MKL_INT *qsiz, MKL_INT *n, double *d, double *e, double *q, MKL_INT *ldq, double *qstore, MKL_INT *ldqs, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlaed0_( MKL_INT *icompq, MKL_INT *qsiz, MKL_INT *n, double *d, double *e, double *q, MKL_INT *ldq, double *qstore, MKL_INT *ldqs, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLAED1( MKL_INT *n, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLAED1_( MKL_INT *n, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlaed1( MKL_INT *n, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlaed1_( MKL_INT *n, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLAED2( MKL_INT *k, MKL_INT *n, MKL_INT *n1, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, double *z, double *dlamda, double *w, double *q2, MKL_INT *indx, MKL_INT *indxc, MKL_INT *indxp, MKL_INT *coltyp, MKL_INT *info );
void    DLAED2_( MKL_INT *k, MKL_INT *n, MKL_INT *n1, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, double *z, double *dlamda, double *w, double *q2, MKL_INT *indx, MKL_INT *indxc, MKL_INT *indxp, MKL_INT *coltyp, MKL_INT *info );
void    dlaed2( MKL_INT *k, MKL_INT *n, MKL_INT *n1, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, double *z, double *dlamda, double *w, double *q2, MKL_INT *indx, MKL_INT *indxc, MKL_INT *indxp, MKL_INT *coltyp, MKL_INT *info );
void    dlaed2_( MKL_INT *k, MKL_INT *n, MKL_INT *n1, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, double *z, double *dlamda, double *w, double *q2, MKL_INT *indx, MKL_INT *indxc, MKL_INT *indxp, MKL_INT *coltyp, MKL_INT *info );
void    DLAED3( MKL_INT *k, MKL_INT *n, MKL_INT *n1, double *d, double *q, MKL_INT *ldq, double *rho, double *dlamda, double *q2, MKL_INT *indx, MKL_INT *ctot, double *w, double *s, MKL_INT *info );
void    DLAED3_( MKL_INT *k, MKL_INT *n, MKL_INT *n1, double *d, double *q, MKL_INT *ldq, double *rho, double *dlamda, double *q2, MKL_INT *indx, MKL_INT *ctot, double *w, double *s, MKL_INT *info );
void    dlaed3( MKL_INT *k, MKL_INT *n, MKL_INT *n1, double *d, double *q, MKL_INT *ldq, double *rho, double *dlamda, double *q2, MKL_INT *indx, MKL_INT *ctot, double *w, double *s, MKL_INT *info );
void    dlaed3_( MKL_INT *k, MKL_INT *n, MKL_INT *n1, double *d, double *q, MKL_INT *ldq, double *rho, double *dlamda, double *q2, MKL_INT *indx, MKL_INT *ctot, double *w, double *s, MKL_INT *info );
void    DLAED4( MKL_INT *n, MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dlam, MKL_INT *info );
void    DLAED4_( MKL_INT *n, MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dlam, MKL_INT *info );
void    dlaed4( MKL_INT *n, MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dlam, MKL_INT *info );
void    dlaed4_( MKL_INT *n, MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dlam, MKL_INT *info );
void    DLAED5( MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dlam );
void    DLAED5_( MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dlam );
void    dlaed5( MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dlam );
void    dlaed5_( MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dlam );
void    DLAED6( MKL_INT *kniter, void *orgati, double *rho, double *d, double *z, double *finit, double *tau, MKL_INT *info );
void    DLAED6_( MKL_INT *kniter, void *orgati, double *rho, double *d, double *z, double *finit, double *tau, MKL_INT *info );
void    dlaed6( MKL_INT *kniter, void *orgati, double *rho, double *d, double *z, double *finit, double *tau, MKL_INT *info );
void    dlaed6_( MKL_INT *kniter, void *orgati, double *rho, double *d, double *z, double *finit, double *tau, MKL_INT *info );
void    DLAED7( MKL_INT *icompq, MKL_INT *n, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLAED7_( MKL_INT *icompq, MKL_INT *n, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlaed7( MKL_INT *icompq, MKL_INT *n, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlaed7_( MKL_INT *icompq, MKL_INT *n, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLAED8( MKL_INT *icompq, MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *z, double *dlamda, double *q2, MKL_INT *ldq2, double *w, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_INT *indxp, MKL_INT *indx, MKL_INT *info );
void    DLAED8_( MKL_INT *icompq, MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *z, double *dlamda, double *q2, MKL_INT *ldq2, double *w, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_INT *indxp, MKL_INT *indx, MKL_INT *info );
void    dlaed8( MKL_INT *icompq, MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *z, double *dlamda, double *q2, MKL_INT *ldq2, double *w, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_INT *indxp, MKL_INT *indx, MKL_INT *info );
void    dlaed8_( MKL_INT *icompq, MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, double *d, double *q, MKL_INT *ldq, MKL_INT *indxq, double *rho, MKL_INT *cutpnt, double *z, double *dlamda, double *q2, MKL_INT *ldq2, double *w, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_INT *indxp, MKL_INT *indx, MKL_INT *info );
void    DLAED9( MKL_INT *k, MKL_INT *kstart, MKL_INT *kstop, MKL_INT *n, double *d, double *q, MKL_INT *ldq, double *rho, double *dlamda, double *w, double *s, MKL_INT *lds, MKL_INT *info );
void    DLAED9_( MKL_INT *k, MKL_INT *kstart, MKL_INT *kstop, MKL_INT *n, double *d, double *q, MKL_INT *ldq, double *rho, double *dlamda, double *w, double *s, MKL_INT *lds, MKL_INT *info );
void    dlaed9( MKL_INT *k, MKL_INT *kstart, MKL_INT *kstop, MKL_INT *n, double *d, double *q, MKL_INT *ldq, double *rho, double *dlamda, double *w, double *s, MKL_INT *lds, MKL_INT *info );
void    dlaed9_( MKL_INT *k, MKL_INT *kstart, MKL_INT *kstop, MKL_INT *n, double *d, double *q, MKL_INT *ldq, double *rho, double *dlamda, double *w, double *s, MKL_INT *lds, MKL_INT *info );
void    DLAEDA( MKL_INT *n, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, double *q, MKL_INT *qptr, double *z, double *ztemp, MKL_INT *info );
void    DLAEDA_( MKL_INT *n, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, double *q, MKL_INT *qptr, double *z, double *ztemp, MKL_INT *info );
void    dlaeda( MKL_INT *n, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, double *q, MKL_INT *qptr, double *z, double *ztemp, MKL_INT *info );
void    dlaeda_( MKL_INT *n, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, double *q, MKL_INT *qptr, double *z, double *ztemp, MKL_INT *info );
void    DLAEIN( void *rightv, void *noinit, MKL_INT *n, double *h, MKL_INT *ldh, double *wr, double *wi, double *vr, double *vi, double *b, MKL_INT *ldb, double *work, double *eps3, double *smlnum, double *bignum, MKL_INT *info );
void    DLAEIN_( void *rightv, void *noinit, MKL_INT *n, double *h, MKL_INT *ldh, double *wr, double *wi, double *vr, double *vi, double *b, MKL_INT *ldb, double *work, double *eps3, double *smlnum, double *bignum, MKL_INT *info );
void    dlaein( void *rightv, void *noinit, MKL_INT *n, double *h, MKL_INT *ldh, double *wr, double *wi, double *vr, double *vi, double *b, MKL_INT *ldb, double *work, double *eps3, double *smlnum, double *bignum, MKL_INT *info );
void    dlaein_( void *rightv, void *noinit, MKL_INT *n, double *h, MKL_INT *ldh, double *wr, double *wi, double *vr, double *vi, double *b, MKL_INT *ldb, double *work, double *eps3, double *smlnum, double *bignum, MKL_INT *info );
void    DLAEV2( double *a, double *b, double *c, double *rt1, double *rt2, double *cs1, double *sn1 );
void    DLAEV2_( double *a, double *b, double *c, double *rt1, double *rt2, double *cs1, double *sn1 );
void    dlaev2( double *a, double *b, double *c, double *rt1, double *rt2, double *cs1, double *sn1 );
void    dlaev2_( double *a, double *b, double *c, double *rt1, double *rt2, double *cs1, double *sn1 );
void    DLAEXC( void *wantq, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, double *work, MKL_INT *info );
void    DLAEXC_( void *wantq, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, double *work, MKL_INT *info );
void    dlaexc( void *wantq, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, double *work, MKL_INT *info );
void    dlaexc_( void *wantq, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, double *work, MKL_INT *info );
void    DLAG2( double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *safmin, double *scale1, double *scale2, double *wr1, double *wr2, double *wi );
void    DLAG2_( double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *safmin, double *scale1, double *scale2, double *wr1, double *wr2, double *wi );
void    dlag2( double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *safmin, double *scale1, double *scale2, double *wr1, double *wr2, double *wi );
void    dlag2_( double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *safmin, double *scale1, double *scale2, double *wr1, double *wr2, double *wi );
void    DLAGS2( void *upper, double *a1, double *a2, double *a3, double *b1, double *b2, double *b3, double *csu, double *snu, double *csv, double *snv, double *csq, double *snq );
void    DLAGS2_( void *upper, double *a1, double *a2, double *a3, double *b1, double *b2, double *b3, double *csu, double *snu, double *csv, double *snv, double *csq, double *snq );
void    dlags2( void *upper, double *a1, double *a2, double *a3, double *b1, double *b2, double *b3, double *csu, double *snu, double *csv, double *snv, double *csq, double *snq );
void    dlags2_( void *upper, double *a1, double *a2, double *a3, double *b1, double *b2, double *b3, double *csu, double *snu, double *csv, double *snv, double *csq, double *snq );
void    DLAGTF( MKL_INT *n, double *a, double *lambda, double *b, double *c, double *tol, double *d, MKL_INT *in, MKL_INT *info );
void    DLAGTF_( MKL_INT *n, double *a, double *lambda, double *b, double *c, double *tol, double *d, MKL_INT *in, MKL_INT *info );
void    dlagtf( MKL_INT *n, double *a, double *lambda, double *b, double *c, double *tol, double *d, MKL_INT *in, MKL_INT *info );
void    dlagtf_( MKL_INT *n, double *a, double *lambda, double *b, double *c, double *tol, double *d, MKL_INT *in, MKL_INT *info );
void    DLAGTM( char *trans, MKL_INT *n, MKL_INT *nrhs, double *alpha, double *dl, double *d, double *du, double *x, MKL_INT *ldx, double *beta, double *b, MKL_INT *ldb );
void    DLAGTM_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *alpha, double *dl, double *d, double *du, double *x, MKL_INT *ldx, double *beta, double *b, MKL_INT *ldb );
void    dlagtm( char *trans, MKL_INT *n, MKL_INT *nrhs, double *alpha, double *dl, double *d, double *du, double *x, MKL_INT *ldx, double *beta, double *b, MKL_INT *ldb );
void    dlagtm_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *alpha, double *dl, double *d, double *du, double *x, MKL_INT *ldx, double *beta, double *b, MKL_INT *ldb );
void    DLAGTS( MKL_INT *job, MKL_INT *n, double *a, double *b, double *c, double *d, MKL_INT *in, double *y, double *tol, MKL_INT *info );
void    DLAGTS_( MKL_INT *job, MKL_INT *n, double *a, double *b, double *c, double *d, MKL_INT *in, double *y, double *tol, MKL_INT *info );
void    dlagts( MKL_INT *job, MKL_INT *n, double *a, double *b, double *c, double *d, MKL_INT *in, double *y, double *tol, MKL_INT *info );
void    dlagts_( MKL_INT *job, MKL_INT *n, double *a, double *b, double *c, double *d, MKL_INT *in, double *y, double *tol, MKL_INT *info );
void    DLAGV2( double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *csl, double *snl, double *csr, double *snr );
void    DLAGV2_( double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *csl, double *snl, double *csr, double *snr );
void    dlagv2( double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *csl, double *snl, double *csr, double *snr );
void    dlagv2_( double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *csl, double *snl, double *csr, double *snr );
void    DLAHQR( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *h, MKL_INT *ldh, double *wr, double *wi, MKL_INT *iloz, MKL_INT *ihiz, double *z, MKL_INT *ldz, MKL_INT *info );
void    DLAHQR_( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *h, MKL_INT *ldh, double *wr, double *wi, MKL_INT *iloz, MKL_INT *ihiz, double *z, MKL_INT *ldz, MKL_INT *info );
void    dlahqr( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *h, MKL_INT *ldh, double *wr, double *wi, MKL_INT *iloz, MKL_INT *ihiz, double *z, MKL_INT *ldz, MKL_INT *info );
void    dlahqr_( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *h, MKL_INT *ldh, double *wr, double *wi, MKL_INT *iloz, MKL_INT *ihiz, double *z, MKL_INT *ldz, MKL_INT *info );
void    DLAHRD( MKL_INT *n, MKL_INT *k, MKL_INT *nb, double *a, MKL_INT *lda, double *tau, double *t, MKL_INT *ldt, double *y, MKL_INT *ldy );
void    DLAHRD_( MKL_INT *n, MKL_INT *k, MKL_INT *nb, double *a, MKL_INT *lda, double *tau, double *t, MKL_INT *ldt, double *y, MKL_INT *ldy );
void    dlahrd( MKL_INT *n, MKL_INT *k, MKL_INT *nb, double *a, MKL_INT *lda, double *tau, double *t, MKL_INT *ldt, double *y, MKL_INT *ldy );
void    dlahrd_( MKL_INT *n, MKL_INT *k, MKL_INT *nb, double *a, MKL_INT *lda, double *tau, double *t, MKL_INT *ldt, double *y, MKL_INT *ldy );
void    DLAIC1( MKL_INT *job, MKL_INT *j, double *x, double *sest, double *w, double *gamma, double *sestpr, double *s, double *c );
void    DLAIC1_( MKL_INT *job, MKL_INT *j, double *x, double *sest, double *w, double *gamma, double *sestpr, double *s, double *c );
void    dlaic1( MKL_INT *job, MKL_INT *j, double *x, double *sest, double *w, double *gamma, double *sestpr, double *s, double *c );
void    dlaic1_( MKL_INT *job, MKL_INT *j, double *x, double *sest, double *w, double *gamma, double *sestpr, double *s, double *c );
void    DLALN2( void *ltrans, MKL_INT *na, MKL_INT *nw, double *smin, double *ca, double *a, MKL_INT *lda, double *d1, double *d2, double *b, MKL_INT *ldb, double *wr, double *wi, double *x, MKL_INT *ldx, double *scale, double *xnorm, MKL_INT *info );
void    DLALN2_( void *ltrans, MKL_INT *na, MKL_INT *nw, double *smin, double *ca, double *a, MKL_INT *lda, double *d1, double *d2, double *b, MKL_INT *ldb, double *wr, double *wi, double *x, MKL_INT *ldx, double *scale, double *xnorm, MKL_INT *info );
void    dlaln2( void *ltrans, MKL_INT *na, MKL_INT *nw, double *smin, double *ca, double *a, MKL_INT *lda, double *d1, double *d2, double *b, MKL_INT *ldb, double *wr, double *wi, double *x, MKL_INT *ldx, double *scale, double *xnorm, MKL_INT *info );
void    dlaln2_( void *ltrans, MKL_INT *na, MKL_INT *nw, double *smin, double *ca, double *a, MKL_INT *lda, double *d1, double *d2, double *b, MKL_INT *ldb, double *wr, double *wi, double *x, MKL_INT *ldx, double *scale, double *xnorm, MKL_INT *info );
void    DLALS0( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, double *b, MKL_INT *ldb, double *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *work, MKL_INT *info );
void    DLALS0_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, double *b, MKL_INT *ldb, double *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *work, MKL_INT *info );
void    dlals0( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, double *b, MKL_INT *ldb, double *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *work, MKL_INT *info );
void    dlals0_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, double *b, MKL_INT *ldb, double *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *work, MKL_INT *info );
void    DLALSA( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *b, MKL_INT *ldb, double *bx, MKL_INT *ldbx, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLALSA_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *b, MKL_INT *ldb, double *bx, MKL_INT *ldbx, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlalsa( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *b, MKL_INT *ldb, double *bx, MKL_INT *ldbx, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlalsa_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *b, MKL_INT *ldb, double *bx, MKL_INT *ldbx, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLALSD( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, double *rcond, MKL_INT *rank, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLALSD_( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, double *rcond, MKL_INT *rank, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlalsd( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, double *rcond, MKL_INT *rank, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlalsd_( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, double *rcond, MKL_INT *rank, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLAMC1( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, MKL_INT* ieee1 );
void    DLAMC1_( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, MKL_INT* ieee1 );
void    dlamc1( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, MKL_INT* ieee1 );
void    dlamc1_( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, MKL_INT* ieee1 );
void    DLAMC2( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, double* eps, MKL_INT* emin, double* rmin, MKL_INT* emax, double* rmax );
void    DLAMC2_( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, double* eps, MKL_INT* emin, double* rmin, MKL_INT* emax, double* rmax );
void    dlamc2( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, double* eps, MKL_INT* emin, double* rmin, MKL_INT* emax, double* rmax );
void    dlamc2_( MKL_INT* beta, MKL_INT* t, MKL_INT* rnd, double* eps, MKL_INT* emin, double* rmin, MKL_INT* emax, double* rmax );
double  DLAMC3( double *a, double *b );
double  DLAMC3_( double *a, double *b );
double  dlamc3( double *a, double *b );
double  dlamc3_( double *a, double *b );
void    DLAMC4( MKL_INT* emin, double* start, MKL_INT* base );
void    DLAMC4_( MKL_INT* emin, double* start, MKL_INT* base );
void    dlamc4( MKL_INT* emin, double* start, MKL_INT* base );
void    dlamc4_( MKL_INT* emin, double* start, MKL_INT* base );
void    DLAMC5( MKL_INT* beta, MKL_INT* p, MKL_INT* emin, MKL_INT* ieee, MKL_INT* emax, double* rmax );
void    DLAMC5_( MKL_INT* beta, MKL_INT* p, MKL_INT* emin, MKL_INT* ieee, MKL_INT* emax, double* rmax );
void    dlamc5( MKL_INT* beta, MKL_INT* p, MKL_INT* emin, MKL_INT* ieee, MKL_INT* emax, double* rmax );
void    dlamc5_( MKL_INT* beta, MKL_INT* p, MKL_INT* emin, MKL_INT* ieee, MKL_INT* emax, double* rmax );
double  DLAMCH( char *cmach );
double  DLAMCH_( char *cmach );
double  dlamch( char *cmach );
double  dlamch_( char *cmach );
void    DLAMRG( MKL_INT *n1, MKL_INT *n2, double *a, MKL_INT *dtrd1, MKL_INT *dtrd2, MKL_INT *index );
void    DLAMRG_( MKL_INT *n1, MKL_INT *n2, double *a, MKL_INT *dtrd1, MKL_INT *dtrd2, MKL_INT *index );
void    dlamrg( MKL_INT *n1, MKL_INT *n2, double *a, MKL_INT *dtrd1, MKL_INT *dtrd2, MKL_INT *index );
void    dlamrg_( MKL_INT *n1, MKL_INT *n2, double *a, MKL_INT *dtrd1, MKL_INT *dtrd2, MKL_INT *index );
double  DLANGB( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *work );
double  DLANGB_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *work );
double  dlangb( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *work );
double  dlangb_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *work );
double  DLANGE( char *norm, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  DLANGE_( char *norm, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  dlange( char *norm, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  dlange_( char *norm, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  DLANGT( char *norm, MKL_INT *n, double *dl, double *d, double *du );
double  DLANGT_( char *norm, MKL_INT *n, double *dl, double *d, double *du );
double  dlangt( char *norm, MKL_INT *n, double *dl, double *d, double *du );
double  dlangt_( char *norm, MKL_INT *n, double *dl, double *d, double *du );
double  DLANHS( char *norm, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  DLANHS_( char *norm, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  dlanhs( char *norm, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  dlanhs_( char *norm, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  DLANSB( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, double *ab, MKL_INT *ldab, double *work );
double  DLANSB_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, double *ab, MKL_INT *ldab, double *work );
double  dlansb( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, double *ab, MKL_INT *ldab, double *work );
double  dlansb_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, double *ab, MKL_INT *ldab, double *work );
double  DLANSP( char *norm, char *uplo, MKL_INT *n, double *ap, double *work );
double  DLANSP_( char *norm, char *uplo, MKL_INT *n, double *ap, double *work );
double  dlansp( char *norm, char *uplo, MKL_INT *n, double *ap, double *work );
double  dlansp_( char *norm, char *uplo, MKL_INT *n, double *ap, double *work );
double  DLANST( char *norm, MKL_INT *n, double *d, double *e );
double  DLANST_( char *norm, MKL_INT *n, double *d, double *e );
double  dlanst( char *norm, MKL_INT *n, double *d, double *e );
double  dlanst_( char *norm, MKL_INT *n, double *d, double *e );
double  DLANSY( char *norm, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  DLANSY_( char *norm, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  dlansy( char *norm, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  dlansy_( char *norm, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  DLANTB( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, double *ab, MKL_INT *ldab, double *work );
double  DLANTB_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, double *ab, MKL_INT *ldab, double *work );
double  dlantb( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, double *ab, MKL_INT *ldab, double *work );
double  dlantb_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, double *ab, MKL_INT *ldab, double *work );
double  DLANTP( char *norm, char *uplo, char *diag, MKL_INT *n, double *ap, double *work );
double  DLANTP_( char *norm, char *uplo, char *diag, MKL_INT *n, double *ap, double *work );
double  dlantp( char *norm, char *uplo, char *diag, MKL_INT *n, double *ap, double *work );
double  dlantp_( char *norm, char *uplo, char *diag, MKL_INT *n, double *ap, double *work );
double  DLANTR( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  DLANTR_( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  dlantr( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *work );
double  dlantr_( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *work );
void    DLANV2( double *a, double *b, double *c, double *d, double *rt1r, double *rt1i, double *rt2r, double *rt2i, double *cs, double *sn );
void    DLANV2_( double *a, double *b, double *c, double *d, double *rt1r, double *rt1i, double *rt2r, double *rt2i, double *cs, double *sn );
void    dlanv2( double *a, double *b, double *c, double *d, double *rt1r, double *rt1i, double *rt2r, double *rt2i, double *cs, double *sn );
void    dlanv2_( double *a, double *b, double *c, double *d, double *rt1r, double *rt1i, double *rt2r, double *rt2i, double *cs, double *sn );
void    DLAPLL( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *ssmin );
void    DLAPLL_( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *ssmin );
void    dlapll( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *ssmin );
void    dlapll_( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *ssmin );
void    DLAPMT( void *forwrd, MKL_INT *m, MKL_INT *n, double *x, MKL_INT *ldx, MKL_INT *k );
void    DLAPMT_( void *forwrd, MKL_INT *m, MKL_INT *n, double *x, MKL_INT *ldx, MKL_INT *k );
void    dlapmt( void *forwrd, MKL_INT *m, MKL_INT *n, double *x, MKL_INT *ldx, MKL_INT *k );
void    dlapmt_( void *forwrd, MKL_INT *m, MKL_INT *n, double *x, MKL_INT *ldx, MKL_INT *k );
double  DLAPY2( double *x, double *y );
double  DLAPY2_( double *x, double *y );
double  dlapy2( double *x, double *y );
double  dlapy2_( double *x, double *y );
double  DLAPY3( double *x, double *y, double *z );
double  DLAPY3_( double *x, double *y, double *z );
double  dlapy3( double *x, double *y, double *z );
double  dlapy3_( double *x, double *y, double *z );
void    DLAQGB( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    DLAQGB_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    dlaqgb( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    dlaqgb_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, double *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    DLAQGE( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    DLAQGE_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    dlaqge( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    dlaqge_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    DLAQP2( MKL_INT *m, MKL_INT *n, MKL_INT *offset, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *vn1, double *vn2, double *work );
void    DLAQP2_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *vn1, double *vn2, double *work );
void    dlaqp2( MKL_INT *m, MKL_INT *n, MKL_INT *offset, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *vn1, double *vn2, double *work );
void    dlaqp2_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *vn1, double *vn2, double *work );
void    DLAQPS( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *vn1, double *vn2, double *auxv, double *f, MKL_INT *ldf );
void    DLAQPS_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *vn1, double *vn2, double *auxv, double *f, MKL_INT *ldf );
void    dlaqps( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *vn1, double *vn2, double *auxv, double *f, MKL_INT *ldf );
void    dlaqps_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, double *a, MKL_INT *lda, MKL_INT *jpvt, double *tau, double *vn1, double *vn2, double *auxv, double *f, MKL_INT *ldf );
void    DLAQSB( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    DLAQSB_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    dlaqsb( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    dlaqsb_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    DLAQSP( char *uplo, MKL_INT *n, double *ap, double *s, double *scond, double *amax, char *equed );
void    DLAQSP_( char *uplo, MKL_INT *n, double *ap, double *s, double *scond, double *amax, char *equed );
void    dlaqsp( char *uplo, MKL_INT *n, double *ap, double *s, double *scond, double *amax, char *equed );
void    dlaqsp_( char *uplo, MKL_INT *n, double *ap, double *s, double *scond, double *amax, char *equed );
void    DLAQSY( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    DLAQSY_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    dlaqsy( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    dlaqsy_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
float   DLAQTR( float *ltran, void *lreal, float *n, double *t, MKL_INT *ldt, float *b, double *w, double *scale, double *x, double *work, MKL_INT *info );
float   DLAQTR_( float *ltran, void *lreal, float *n, double *t, MKL_INT *ldt, float *b, double *w, double *scale, double *x, double *work, MKL_INT *info );
float   dlaqtr( float *ltran, void *lreal, float *n, double *t, MKL_INT *ldt, float *b, double *w, double *scale, double *x, double *work, MKL_INT *info );
float   dlaqtr_( float *ltran, void *lreal, float *n, double *t, MKL_INT *ldt, float *b, double *w, double *scale, double *x, double *work, MKL_INT *info );
void    DLAR1V( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, double *sigma, double *d, double *l, double *ld, double *lld, double *gersch, double *z, double *ztz, double *mingma, MKL_INT *r, MKL_INT *isuppz, double *work );
void    DLAR1V_( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, double *sigma, double *d, double *l, double *ld, double *lld, double *gersch, double *z, double *ztz, double *mingma, MKL_INT *r, MKL_INT *isuppz, double *work );
void    dlar1v( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, double *sigma, double *d, double *l, double *ld, double *lld, double *gersch, double *z, double *ztz, double *mingma, MKL_INT *r, MKL_INT *isuppz, double *work );
void    dlar1v_( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, double *sigma, double *d, double *l, double *ld, double *lld, double *gersch, double *z, double *ztz, double *mingma, MKL_INT *r, MKL_INT *isuppz, double *work );
void    DLAR2V( MKL_INT *n, double *x, double *y, double *z, MKL_INT *incx, double *c, double *s, MKL_INT *incc );
void    DLAR2V_( MKL_INT *n, double *x, double *y, double *z, MKL_INT *incx, double *c, double *s, MKL_INT *incc );
void    dlar2v( MKL_INT *n, double *x, double *y, double *z, MKL_INT *incx, double *c, double *s, MKL_INT *incc );
void    dlar2v_( MKL_INT *n, double *x, double *y, double *z, MKL_INT *incx, double *c, double *s, MKL_INT *incc );
void    DLARF( char *side, MKL_INT *m, MKL_INT *n, double *v, MKL_INT *incv, double *tau, double *c, MKL_INT *ldc, double *work );
void    DLARF_( char *side, MKL_INT *m, MKL_INT *n, double *v, MKL_INT *incv, double *tau, double *c, MKL_INT *ldc, double *work );
void    dlarf( char *side, MKL_INT *m, MKL_INT *n, double *v, MKL_INT *incv, double *tau, double *c, MKL_INT *ldc, double *work );
void    dlarf_( char *side, MKL_INT *m, MKL_INT *n, double *v, MKL_INT *incv, double *tau, double *c, MKL_INT *ldc, double *work );
void    DLARFB( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *t, MKL_INT *ldt, double *c, MKL_INT *ldc, double *work, MKL_INT *ldwork );
void    DLARFB_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *t, MKL_INT *ldt, double *c, MKL_INT *ldc, double *work, MKL_INT *ldwork );
void    dlarfb( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *t, MKL_INT *ldt, double *c, MKL_INT *ldc, double *work, MKL_INT *ldwork );
void    dlarfb_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *t, MKL_INT *ldt, double *c, MKL_INT *ldc, double *work, MKL_INT *ldwork );
void    DLARFG( MKL_INT *n, double *alpha, double *x, MKL_INT *incx, double *tau );
void    DLARFG_( MKL_INT *n, double *alpha, double *x, MKL_INT *incx, double *tau );
void    dlarfg( MKL_INT *n, double *alpha, double *x, MKL_INT *incx, double *tau );
void    dlarfg_( MKL_INT *n, double *alpha, double *x, MKL_INT *incx, double *tau );
void    DLARFT( char *direct, char *storev, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *tau, double *t, MKL_INT *ldt );
void    DLARFT_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *tau, double *t, MKL_INT *ldt );
void    dlarft( char *direct, char *storev, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *tau, double *t, MKL_INT *ldt );
void    dlarft_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *tau, double *t, MKL_INT *ldt );
void    DLARFX( char *side, MKL_INT *m, MKL_INT *n, double *v, double *tau, double *c, MKL_INT *ldc, double *work );
void    DLARFX_( char *side, MKL_INT *m, MKL_INT *n, double *v, double *tau, double *c, MKL_INT *ldc, double *work );
void    dlarfx( char *side, MKL_INT *m, MKL_INT *n, double *v, double *tau, double *c, MKL_INT *ldc, double *work );
void    dlarfx_( char *side, MKL_INT *m, MKL_INT *n, double *v, double *tau, double *c, MKL_INT *ldc, double *work );
void    DLARGV( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *c, MKL_INT *incc );
void    DLARGV_( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *c, MKL_INT *incc );
void    dlargv( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *c, MKL_INT *incc );
void    dlargv_( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *c, MKL_INT *incc );
void    DLARNV( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, double *x );
void    DLARNV_( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, double *x );
void    dlarnv( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, double *x );
void    dlarnv_( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, double *x );
void    DLARRB( MKL_INT *n, double *d, double *l, double *ld, double *lld, MKL_INT *ifirst, MKL_INT *ilast, double *sigma, double *reltol, double *w, double *wgap, double *werr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLARRB_( MKL_INT *n, double *d, double *l, double *ld, double *lld, MKL_INT *ifirst, MKL_INT *ilast, double *sigma, double *reltol, double *w, double *wgap, double *werr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlarrb( MKL_INT *n, double *d, double *l, double *ld, double *lld, MKL_INT *ifirst, MKL_INT *ilast, double *sigma, double *reltol, double *w, double *wgap, double *werr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlarrb_( MKL_INT *n, double *d, double *l, double *ld, double *lld, MKL_INT *ifirst, MKL_INT *ilast, double *sigma, double *reltol, double *w, double *wgap, double *werr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLARRE( MKL_INT *n, double *d, double *e, double *tol, MKL_INT *nsplit, MKL_INT *isplit, MKL_INT *m, double *w, double *woff, double *gersch, double *work, MKL_INT *info );
void    DLARRE_( MKL_INT *n, double *d, double *e, double *tol, MKL_INT *nsplit, MKL_INT *isplit, MKL_INT *m, double *w, double *woff, double *gersch, double *work, MKL_INT *info );
void    dlarre( MKL_INT *n, double *d, double *e, double *tol, MKL_INT *nsplit, MKL_INT *isplit, MKL_INT *m, double *w, double *woff, double *gersch, double *work, MKL_INT *info );
void    dlarre_( MKL_INT *n, double *d, double *e, double *tol, MKL_INT *nsplit, MKL_INT *isplit, MKL_INT *m, double *w, double *woff, double *gersch, double *work, MKL_INT *info );
void    DLARRF( MKL_INT *n, double *d, double *l, double *ld, double *lld, MKL_INT *ifirst, MKL_INT *ilast, double *w, double *dplus, double *lplus, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLARRF_( MKL_INT *n, double *d, double *l, double *ld, double *lld, MKL_INT *ifirst, MKL_INT *ilast, double *w, double *dplus, double *lplus, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlarrf( MKL_INT *n, double *d, double *l, double *ld, double *lld, MKL_INT *ifirst, MKL_INT *ilast, double *w, double *dplus, double *lplus, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlarrf_( MKL_INT *n, double *d, double *l, double *ld, double *lld, MKL_INT *ifirst, MKL_INT *ilast, double *w, double *dplus, double *lplus, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLARRV( MKL_INT *n, double *d, double *l, MKL_INT *isplit, MKL_INT *m, double *w, MKL_INT *iblock, double *gersch, double *tol, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLARRV_( MKL_INT *n, double *d, double *l, MKL_INT *isplit, MKL_INT *m, double *w, MKL_INT *iblock, double *gersch, double *tol, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlarrv( MKL_INT *n, double *d, double *l, MKL_INT *isplit, MKL_INT *m, double *w, MKL_INT *iblock, double *gersch, double *tol, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlarrv_( MKL_INT *n, double *d, double *l, MKL_INT *isplit, MKL_INT *m, double *w, MKL_INT *iblock, double *gersch, double *tol, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLARTG( double *f, double *g, double *cs, double *sn, double *r );
void    DLARTG_( double *f, double *g, double *cs, double *sn, double *r );
void    dlartg( double *f, double *g, double *cs, double *sn, double *r );
void    dlartg_( double *f, double *g, double *cs, double *sn, double *r );
void    DLARTV( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *c, double *s, MKL_INT *incc );
void    DLARTV_( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *c, double *s, MKL_INT *incc );
void    dlartv( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *c, double *s, MKL_INT *incc );
void    dlartv_( MKL_INT *n, double *x, MKL_INT *incx, double *y, MKL_INT *incy, double *c, double *s, MKL_INT *incc );
void    DLARUV( MKL_INT *iseed, MKL_INT *n, double *x );
void    DLARUV_( MKL_INT *iseed, MKL_INT *n, double *x );
void    dlaruv( MKL_INT *iseed, MKL_INT *n, double *x );
void    dlaruv_( MKL_INT *iseed, MKL_INT *n, double *x );
void    DLARZ( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, double *v, MKL_INT *incv, double *tau, double *c, MKL_INT *ldc, double *work );
void    DLARZ_( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, double *v, MKL_INT *incv, double *tau, double *c, MKL_INT *ldc, double *work );
void    dlarz( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, double *v, MKL_INT *incv, double *tau, double *c, MKL_INT *ldc, double *work );
void    dlarz_( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, double *v, MKL_INT *incv, double *tau, double *c, MKL_INT *ldc, double *work );
void    DLARZB( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *v, MKL_INT *ldv, double *t, MKL_INT *ldt, double *c, MKL_INT *ldc, double *work, MKL_INT *ldwork );
void    DLARZB_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *v, MKL_INT *ldv, double *t, MKL_INT *ldt, double *c, MKL_INT *ldc, double *work, MKL_INT *ldwork );
void    dlarzb( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *v, MKL_INT *ldv, double *t, MKL_INT *ldt, double *c, MKL_INT *ldc, double *work, MKL_INT *ldwork );
void    dlarzb_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *v, MKL_INT *ldv, double *t, MKL_INT *ldt, double *c, MKL_INT *ldc, double *work, MKL_INT *ldwork );
void    DLARZT( char *direct, char *storev, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *tau, double *t, MKL_INT *ldt );
void    DLARZT_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *tau, double *t, MKL_INT *ldt );
void    dlarzt( char *direct, char *storev, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *tau, double *t, MKL_INT *ldt );
void    dlarzt_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, double *v, MKL_INT *ldv, double *tau, double *t, MKL_INT *ldt );
void    DLAS2( double *f, double *g, double *h, double *ssmin, double *ssmax );
void    DLAS2_( double *f, double *g, double *h, double *ssmin, double *ssmax );
void    dlas2( double *f, double *g, double *h, double *ssmin, double *ssmax );
void    dlas2_( double *f, double *g, double *h, double *ssmin, double *ssmax );
void    DLASCL( char *type, MKL_INT *kl, MKL_INT *ku, double *cfrom, double *cto, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DLASCL_( char *type, MKL_INT *kl, MKL_INT *ku, double *cfrom, double *cto, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dlascl( char *type, MKL_INT *kl, MKL_INT *ku, double *cfrom, double *cto, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dlascl_( char *type, MKL_INT *kl, MKL_INT *ku, double *cfrom, double *cto, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DLASD0( MKL_INT *n, MKL_INT *sqre, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, MKL_INT *smlsiz, MKL_INT *iwork, double *work, MKL_INT *info );
void    DLASD0_( MKL_INT *n, MKL_INT *sqre, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, MKL_INT *smlsiz, MKL_INT *iwork, double *work, MKL_INT *info );
void    dlasd0( MKL_INT *n, MKL_INT *sqre, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, MKL_INT *smlsiz, MKL_INT *iwork, double *work, MKL_INT *info );
void    dlasd0_( MKL_INT *n, MKL_INT *sqre, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, MKL_INT *smlsiz, MKL_INT *iwork, double *work, MKL_INT *info );
void    DLASD1( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, double *d, double *alpha, double *beta, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, MKL_INT *idxq, MKL_INT *iwork, double *work, MKL_INT *info );
void    DLASD1_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, double *d, double *alpha, double *beta, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, MKL_INT *idxq, MKL_INT *iwork, double *work, MKL_INT *info );
void    dlasd1( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, double *d, double *alpha, double *beta, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, MKL_INT *idxq, MKL_INT *iwork, double *work, MKL_INT *info );
void    dlasd1_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, double *d, double *alpha, double *beta, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, MKL_INT *idxq, MKL_INT *iwork, double *work, MKL_INT *info );
void    DLASD2( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *z, double *alpha, double *beta, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *dsigma, double *u2, MKL_INT *ldu2, double *vt2, MKL_INT *ldvt2, MKL_INT *idxp, MKL_INT *idx, MKL_INT *idxc, MKL_INT *idxq, MKL_INT *coltyp, MKL_INT *info );
void    DLASD2_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *z, double *alpha, double *beta, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *dsigma, double *u2, MKL_INT *ldu2, double *vt2, MKL_INT *ldvt2, MKL_INT *idxp, MKL_INT *idx, MKL_INT *idxc, MKL_INT *idxq, MKL_INT *coltyp, MKL_INT *info );
void    dlasd2( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *z, double *alpha, double *beta, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *dsigma, double *u2, MKL_INT *ldu2, double *vt2, MKL_INT *ldvt2, MKL_INT *idxp, MKL_INT *idx, MKL_INT *idxc, MKL_INT *idxq, MKL_INT *coltyp, MKL_INT *info );
void    dlasd2_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *z, double *alpha, double *beta, double *u, MKL_INT *ldu, double *vt, MKL_INT *ldvt, double *dsigma, double *u2, MKL_INT *ldu2, double *vt2, MKL_INT *ldvt2, MKL_INT *idxp, MKL_INT *idx, MKL_INT *idxc, MKL_INT *idxq, MKL_INT *coltyp, MKL_INT *info );
void    DLASD3( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *q, MKL_INT *ldq, double *dsigma, double *u, MKL_INT *ldu, double *u2, MKL_INT *ldu2, double *vt, MKL_INT *ldvt, double *vt2, MKL_INT *ldvt2, MKL_INT *idxc, MKL_INT *ctot, double *z, MKL_INT *info );
void    DLASD3_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *q, MKL_INT *ldq, double *dsigma, double *u, MKL_INT *ldu, double *u2, MKL_INT *ldu2, double *vt, MKL_INT *ldvt, double *vt2, MKL_INT *ldvt2, MKL_INT *idxc, MKL_INT *ctot, double *z, MKL_INT *info );
void    dlasd3( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *q, MKL_INT *ldq, double *dsigma, double *u, MKL_INT *ldu, double *u2, MKL_INT *ldu2, double *vt, MKL_INT *ldvt, double *vt2, MKL_INT *ldvt2, MKL_INT *idxc, MKL_INT *ctot, double *z, MKL_INT *info );
void    dlasd3_( MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *q, MKL_INT *ldq, double *dsigma, double *u, MKL_INT *ldu, double *u2, MKL_INT *ldu2, double *vt, MKL_INT *ldvt, double *vt2, MKL_INT *ldvt2, MKL_INT *idxc, MKL_INT *ctot, double *z, MKL_INT *info );
void    DLASD4( MKL_INT *n, MKL_INT *i, double *d, double *z, double *delta, double *rho, double *sigma, double *work, MKL_INT *info );
void    DLASD4_( MKL_INT *n, MKL_INT *i, double *d, double *z, double *delta, double *rho, double *sigma, double *work, MKL_INT *info );
void    dlasd4( MKL_INT *n, MKL_INT *i, double *d, double *z, double *delta, double *rho, double *sigma, double *work, MKL_INT *info );
void    dlasd4_( MKL_INT *n, MKL_INT *i, double *d, double *z, double *delta, double *rho, double *sigma, double *work, MKL_INT *info );
void    DLASD5( MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dsigma, double *work );
void    DLASD5_( MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dsigma, double *work );
void    dlasd5( MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dsigma, double *work );
void    dlasd5_( MKL_INT *i, double *d, double *z, double *delta, double *rho, double *dsigma, double *work );
void    DLASD6( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, double *d, double *vf, double *vl, double *alpha, double *beta, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLASD6_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, double *d, double *vf, double *vl, double *alpha, double *beta, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlasd6( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, double *d, double *vf, double *vl, double *alpha, double *beta, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlasd6_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, double *d, double *vf, double *vl, double *alpha, double *beta, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLASD7( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *z, double *zw, double *vf, double *vfw, double *vl, double *vlw, double *alpha, double *beta, double *dsigma, MKL_INT *idx, MKL_INT *idxp, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *c, double *s, MKL_INT *info );
void    DLASD7_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *z, double *zw, double *vf, double *vfw, double *vl, double *vlw, double *alpha, double *beta, double *dsigma, MKL_INT *idx, MKL_INT *idxp, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *c, double *s, MKL_INT *info );
void    dlasd7( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *z, double *zw, double *vf, double *vfw, double *vl, double *vlw, double *alpha, double *beta, double *dsigma, MKL_INT *idx, MKL_INT *idxp, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *c, double *s, MKL_INT *info );
void    dlasd7_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *k, double *d, double *z, double *zw, double *vf, double *vfw, double *vl, double *vlw, double *alpha, double *beta, double *dsigma, MKL_INT *idx, MKL_INT *idxp, MKL_INT *idxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *c, double *s, MKL_INT *info );
void    DLASD8( MKL_INT *icompq, MKL_INT *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, MKL_INT *lddifr, double *dsigma, double *work, MKL_INT *info );
void    DLASD8_( MKL_INT *icompq, MKL_INT *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, MKL_INT *lddifr, double *dsigma, double *work, MKL_INT *info );
void    dlasd8( MKL_INT *icompq, MKL_INT *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, MKL_INT *lddifr, double *dsigma, double *work, MKL_INT *info );
void    dlasd8_( MKL_INT *icompq, MKL_INT *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, MKL_INT *lddifr, double *dsigma, double *work, MKL_INT *info );
void    DLASD9( MKL_INT *icompq, MKL_INT *ldu, MKL_INT *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, double *dsigma, double *work, MKL_INT *info );
void    DLASD9_( MKL_INT *icompq, MKL_INT *ldu, MKL_INT *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, double *dsigma, double *work, MKL_INT *info );
void    dlasd9( MKL_INT *icompq, MKL_INT *ldu, MKL_INT *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, double *dsigma, double *work, MKL_INT *info );
void    dlasd9_( MKL_INT *icompq, MKL_INT *ldu, MKL_INT *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, double *dsigma, double *work, MKL_INT *info );
void    DLASDA( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *sqre, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLASDA_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *sqre, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlasda( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *sqre, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    dlasda_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *sqre, double *d, double *e, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, double *work, MKL_INT *iwork, MKL_INT *info );
void    DLASDQ( char *uplo, MKL_INT *sqre, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, double *vt, MKL_INT *ldvt, double *u, MKL_INT *ldu, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DLASDQ_( char *uplo, MKL_INT *sqre, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, double *vt, MKL_INT *ldvt, double *u, MKL_INT *ldu, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dlasdq( char *uplo, MKL_INT *sqre, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, double *vt, MKL_INT *ldvt, double *u, MKL_INT *ldu, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dlasdq_( char *uplo, MKL_INT *sqre, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, double *vt, MKL_INT *ldvt, double *u, MKL_INT *ldu, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DLASDT( MKL_INT *n, MKL_INT *lvl, MKL_INT *nd, MKL_INT *inode, MKL_INT *ndiml, MKL_INT *ndimr, MKL_INT *msub );
void    DLASDT_( MKL_INT *n, MKL_INT *lvl, MKL_INT *nd, MKL_INT *inode, MKL_INT *ndiml, MKL_INT *ndimr, MKL_INT *msub );
void    dlasdt( MKL_INT *n, MKL_INT *lvl, MKL_INT *nd, MKL_INT *inode, MKL_INT *ndiml, MKL_INT *ndimr, MKL_INT *msub );
void    dlasdt_( MKL_INT *n, MKL_INT *lvl, MKL_INT *nd, MKL_INT *inode, MKL_INT *ndiml, MKL_INT *ndimr, MKL_INT *msub );
void    DLASET( char *uplo, MKL_INT *m, MKL_INT *n, double *alpha, double *beta, double *a, MKL_INT *lda );
void    DLASET_( char *uplo, MKL_INT *m, MKL_INT *n, double *alpha, double *beta, double *a, MKL_INT *lda );
void    dlaset( char *uplo, MKL_INT *m, MKL_INT *n, double *alpha, double *beta, double *a, MKL_INT *lda );
void    dlaset_( char *uplo, MKL_INT *m, MKL_INT *n, double *alpha, double *beta, double *a, MKL_INT *lda );
void    DLASQ1( MKL_INT *n, double *d, double *e, double *work, MKL_INT *info );
void    DLASQ1_( MKL_INT *n, double *d, double *e, double *work, MKL_INT *info );
void    dlasq1( MKL_INT *n, double *d, double *e, double *work, MKL_INT *info );
void    dlasq1_( MKL_INT *n, double *d, double *e, double *work, MKL_INT *info );
void    DLASQ2( MKL_INT *n, double *z, MKL_INT *info );
void    DLASQ2_( MKL_INT *n, double *z, MKL_INT *info );
void    dlasq2( MKL_INT *n, double *z, MKL_INT *info );
void    dlasq2_( MKL_INT *n, double *z, MKL_INT *info );
void    DLASQ3( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *dmin, double *sigma, double *desig, double *qmax, MKL_INT *nfail, MKL_INT *iter, MKL_INT *ndiv, void *ieee );
void    DLASQ3_( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *dmin, double *sigma, double *desig, double *qmax, MKL_INT *nfail, MKL_INT *iter, MKL_INT *ndiv, void *ieee );
void    dlasq3( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *dmin, double *sigma, double *desig, double *qmax, MKL_INT *nfail, MKL_INT *iter, MKL_INT *ndiv, void *ieee );
void    dlasq3_( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *dmin, double *sigma, double *desig, double *qmax, MKL_INT *nfail, MKL_INT *iter, MKL_INT *ndiv, void *ieee );
void    DLASQ4( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, MKL_INT *n0in, double *dmin, double *dmin1, double *dmin2, double *dn, double *dn1, double *dn2, double *tau, MKL_INT *ttype );
void    DLASQ4_( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, MKL_INT *n0in, double *dmin, double *dmin1, double *dmin2, double *dn, double *dn1, double *dn2, double *tau, MKL_INT *ttype );
void    dlasq4( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, MKL_INT *n0in, double *dmin, double *dmin1, double *dmin2, double *dn, double *dn1, double *dn2, double *tau, MKL_INT *ttype );
void    dlasq4_( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, MKL_INT *n0in, double *dmin, double *dmin1, double *dmin2, double *dn, double *dn1, double *dn2, double *tau, MKL_INT *ttype );
void    DLASQ5( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *tau, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2, void *ieee );
void    DLASQ5_( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *tau, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2, void *ieee );
void    dlasq5( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *tau, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2, void *ieee );
void    dlasq5_( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *tau, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2, void *ieee );
void    DLASQ6( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2 );
void    DLASQ6_( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2 );
void    dlasq6( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2 );
void    dlasq6_( MKL_INT *i0, MKL_INT *n0, double *z, MKL_INT *pp, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2 );
void    DLASR( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, double *c, double *s, double *a, MKL_INT *lda );
void    DLASR_( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, double *c, double *s, double *a, MKL_INT *lda );
void    dlasr( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, double *c, double *s, double *a, MKL_INT *lda );
void    dlasr_( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, double *c, double *s, double *a, MKL_INT *lda );
void    DLASRT( char *id, MKL_INT *n, double *d, MKL_INT *info );
void    DLASRT_( char *id, MKL_INT *n, double *d, MKL_INT *info );
void    dlasrt( char *id, MKL_INT *n, double *d, MKL_INT *info );
void    dlasrt_( char *id, MKL_INT *n, double *d, MKL_INT *info );
void    DLASSQ( MKL_INT *n, double *x, MKL_INT *incx, double *scale, double *sumsq );
void    DLASSQ_( MKL_INT *n, double *x, MKL_INT *incx, double *scale, double *sumsq );
void    dlassq( MKL_INT *n, double *x, MKL_INT *incx, double *scale, double *sumsq );
void    dlassq_( MKL_INT *n, double *x, MKL_INT *incx, double *scale, double *sumsq );
void    DLASV2( double *f, double *g, double *h, double *ssmin, double *ssmax, double *snr, double *csr, double *snl, double *csl );
void    DLASV2_( double *f, double *g, double *h, double *ssmin, double *ssmax, double *snr, double *csr, double *snl, double *csl );
void    dlasv2( double *f, double *g, double *h, double *ssmin, double *ssmax, double *snr, double *csr, double *snl, double *csl );
void    dlasv2_( double *f, double *g, double *h, double *ssmin, double *ssmax, double *snr, double *csr, double *snl, double *csl );
void    DLASWP( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    DLASWP_( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    dlaswp( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    dlaswp_( MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    DLASY2( void *ltranl, void *ltranr, MKL_INT *isgn, MKL_INT *n1, MKL_INT *n2, double *tl, MKL_INT *ldtl, double *tr, MKL_INT *ldtr, double *b, MKL_INT *ldb, double *scale, double *x, MKL_INT *ldx, double *xnorm, MKL_INT *info );
void    DLASY2_( void *ltranl, void *ltranr, MKL_INT *isgn, MKL_INT *n1, MKL_INT *n2, double *tl, MKL_INT *ldtl, double *tr, MKL_INT *ldtr, double *b, MKL_INT *ldb, double *scale, double *x, MKL_INT *ldx, double *xnorm, MKL_INT *info );
void    dlasy2( void *ltranl, void *ltranr, MKL_INT *isgn, MKL_INT *n1, MKL_INT *n2, double *tl, MKL_INT *ldtl, double *tr, MKL_INT *ldtr, double *b, MKL_INT *ldb, double *scale, double *x, MKL_INT *ldx, double *xnorm, MKL_INT *info );
void    dlasy2_( void *ltranl, void *ltranr, MKL_INT *isgn, MKL_INT *n1, MKL_INT *n2, double *tl, MKL_INT *ldtl, double *tr, MKL_INT *ldtr, double *b, MKL_INT *ldb, double *scale, double *x, MKL_INT *ldx, double *xnorm, MKL_INT *info );
void    DLASYF( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, double *a, MKL_INT *lda, MKL_INT *ipiv, double *w, MKL_INT *ldw, MKL_INT *info );
void    DLASYF_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, double *a, MKL_INT *lda, MKL_INT *ipiv, double *w, MKL_INT *ldw, MKL_INT *info );
void    dlasyf( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, double *a, MKL_INT *lda, MKL_INT *ipiv, double *w, MKL_INT *ldw, MKL_INT *info );
void    dlasyf_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, double *a, MKL_INT *lda, MKL_INT *ipiv, double *w, MKL_INT *ldw, MKL_INT *info );
void    DLATBS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *x, double *scale, double *cnorm, MKL_INT *info );
void    DLATBS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *x, double *scale, double *cnorm, MKL_INT *info );
void    dlatbs( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *x, double *scale, double *cnorm, MKL_INT *info );
void    dlatbs_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *x, double *scale, double *cnorm, MKL_INT *info );
void    DLATDF( MKL_INT *ijob, MKL_INT *n, double *z, MKL_INT *ldz, double *rhs, double *rdsum, double *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    DLATDF_( MKL_INT *ijob, MKL_INT *n, double *z, MKL_INT *ldz, double *rhs, double *rdsum, double *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    dlatdf( MKL_INT *ijob, MKL_INT *n, double *z, MKL_INT *ldz, double *rhs, double *rdsum, double *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    dlatdf_( MKL_INT *ijob, MKL_INT *n, double *z, MKL_INT *ldz, double *rhs, double *rdsum, double *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    DLATPS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, double *ap, double *x, double *scale, double *cnorm, MKL_INT *info );
void    DLATPS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, double *ap, double *x, double *scale, double *cnorm, MKL_INT *info );
void    dlatps( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, double *ap, double *x, double *scale, double *cnorm, MKL_INT *info );
void    dlatps_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, double *ap, double *x, double *scale, double *cnorm, MKL_INT *info );
void    DLATRD( char *uplo, MKL_INT *n, MKL_INT *nb, double *a, MKL_INT *lda, double *e, double *tau, double *w, MKL_INT *ldw );
void    DLATRD_( char *uplo, MKL_INT *n, MKL_INT *nb, double *a, MKL_INT *lda, double *e, double *tau, double *w, MKL_INT *ldw );
void    dlatrd( char *uplo, MKL_INT *n, MKL_INT *nb, double *a, MKL_INT *lda, double *e, double *tau, double *w, MKL_INT *ldw );
void    dlatrd_( char *uplo, MKL_INT *n, MKL_INT *nb, double *a, MKL_INT *lda, double *e, double *tau, double *w, MKL_INT *ldw );
void    DLATRS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, double *a, MKL_INT *lda, double *x, double *scale, double *cnorm, MKL_INT *info );
void    DLATRS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, double *a, MKL_INT *lda, double *x, double *scale, double *cnorm, MKL_INT *info );
void    dlatrs( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, double *a, MKL_INT *lda, double *x, double *scale, double *cnorm, MKL_INT *info );
void    dlatrs_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, double *a, MKL_INT *lda, double *x, double *scale, double *cnorm, MKL_INT *info );
void    DLATRZ( MKL_INT *m, MKL_INT *n, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *work );
void    DLATRZ_( MKL_INT *m, MKL_INT *n, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *work );
void    dlatrz( MKL_INT *m, MKL_INT *n, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *work );
void    dlatrz_( MKL_INT *m, MKL_INT *n, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *work );
void    DLATZM( char *side, MKL_INT *m, MKL_INT *n, double *v, MKL_INT *incv, double *tau, double *c1, double *c2, MKL_INT *ldc, double *work );
void    DLATZM_( char *side, MKL_INT *m, MKL_INT *n, double *v, MKL_INT *incv, double *tau, double *c1, double *c2, MKL_INT *ldc, double *work );
void    dlatzm( char *side, MKL_INT *m, MKL_INT *n, double *v, MKL_INT *incv, double *tau, double *c1, double *c2, MKL_INT *ldc, double *work );
void    dlatzm_( char *side, MKL_INT *m, MKL_INT *n, double *v, MKL_INT *incv, double *tau, double *c1, double *c2, MKL_INT *ldc, double *work );
void    DLAUU2( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DLAUU2_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dlauu2( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dlauu2_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DLAUUM( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DLAUUM_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dlauum( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dlauum_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DOPGTR( char *uplo, MKL_INT *n, double *ap, double *tau, double *q, MKL_INT *ldq, double *work, MKL_INT *info );
void    DOPGTR_( char *uplo, MKL_INT *n, double *ap, double *tau, double *q, MKL_INT *ldq, double *work, MKL_INT *info );
void    dopgtr( char *uplo, MKL_INT *n, double *ap, double *tau, double *q, MKL_INT *ldq, double *work, MKL_INT *info );
void    dopgtr_( char *uplo, MKL_INT *n, double *ap, double *tau, double *q, MKL_INT *ldq, double *work, MKL_INT *info );
void    DOPMTR( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, double *ap, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DOPMTR_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, double *ap, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dopmtr( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, double *ap, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dopmtr_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, double *ap, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORG2L( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DORG2L_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dorg2l( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dorg2l_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DORG2R( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DORG2R_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dorg2r( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dorg2r_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DORGBR( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGBR_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorgbr( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorgbr_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGHR( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGHR_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorghr( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorghr_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGL2( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DORGL2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dorgl2( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dorgl2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DORGLQ( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGLQ_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorglq( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorglq_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGQL( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGQL_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorgql( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorgql_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGQR( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGQR_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorgqr( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorgqr_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGR2( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DORGR2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dorgr2( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    dorgr2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *info );
void    DORGRQ( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGRQ_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorgrq( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorgrq_( MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGTR( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORGTR_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorgtr( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dorgtr_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORM2L( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORM2L_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dorm2l( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dorm2l_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORM2R( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORM2R_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dorm2r( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dorm2r_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORMBR( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMBR_( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormbr( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormbr_( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMHR( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMHR_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormhr( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormhr_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORML2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORML2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dorml2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dorml2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORMLQ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMLQ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormlq( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormlq_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMQL( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMQL_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormql( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormql_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMQR( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMQR_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormqr( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormqr_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMR2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORMR2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dormr2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dormr2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORMR3( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORMR3_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dormr3( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    dormr3_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *info );
void    DORMRQ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMRQ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormrq( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormrq_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMRZ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMRZ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormrz( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormrz_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMTR( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DORMTR_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormtr( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    dormtr_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *c, MKL_INT *ldc, double *work, MKL_INT *lwork, MKL_INT *info );
void    DPBCON( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPBCON_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dpbcon( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dpbcon_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPBEQU( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *s, double *scond, double *amax, MKL_INT *info );
void    DPBEQU_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *s, double *scond, double *amax, MKL_INT *info );
void    dpbequ( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *s, double *scond, double *amax, MKL_INT *info );
void    dpbequ_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *s, double *scond, double *amax, MKL_INT *info );
void    DPBRFS( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPBRFS_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dpbrfs( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dpbrfs_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPBSTF( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    DPBSTF_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    dpbstf( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    dpbstf_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    DPBSV( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPBSV_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    dpbsv( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    dpbsv_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPBSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPBSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dpbsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dpbsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *afb, MKL_INT *ldafb, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPBTF2( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    DPBTF2_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    dpbtf2( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    dpbtf2_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    DPBTRF( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    DPBTRF_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    dpbtrf( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    dpbtrf_( char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, MKL_INT *info );
void    DPBTRS( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPBTRS_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    dpbtrs( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    dpbtrs_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPOCON( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPOCON_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dpocon( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dpocon_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPOEQU( MKL_INT *n, double *a, MKL_INT *lda, double *s, double *scond, double *amax, MKL_INT *info );
void    DPOEQU_( MKL_INT *n, double *a, MKL_INT *lda, double *s, double *scond, double *amax, MKL_INT *info );
void    dpoequ( MKL_INT *n, double *a, MKL_INT *lda, double *s, double *scond, double *amax, MKL_INT *info );
void    dpoequ_( MKL_INT *n, double *a, MKL_INT *lda, double *s, double *scond, double *amax, MKL_INT *info );
void    DPORFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPORFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dporfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dporfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPOSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPOSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    dposv( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    dposv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPOSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPOSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dposvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dposvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPOTF2( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DPOTF2_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dpotf2( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dpotf2_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DPOTRF( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DPOTRF_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dpotrf( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dpotrf_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DPOTRI( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DPOTRI_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dpotri( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dpotri_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DPOTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPOTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    dpotrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    dpotrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPPCON( char *uplo, MKL_INT *n, double *ap, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPPCON_( char *uplo, MKL_INT *n, double *ap, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dppcon( char *uplo, MKL_INT *n, double *ap, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dppcon_( char *uplo, MKL_INT *n, double *ap, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPPEQU( char *uplo, MKL_INT *n, double *ap, double *s, double *scond, double *amax, MKL_INT *info );
void    DPPEQU_( char *uplo, MKL_INT *n, double *ap, double *s, double *scond, double *amax, MKL_INT *info );
void    dppequ( char *uplo, MKL_INT *n, double *ap, double *s, double *scond, double *amax, MKL_INT *info );
void    dppequ_( char *uplo, MKL_INT *n, double *ap, double *s, double *scond, double *amax, MKL_INT *info );
void    DPPRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPPRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dpprfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dpprfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPPSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPPSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    dppsv( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    dppsv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPPSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPPSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dppsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dppsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, char *equed, double *s, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DPPTRF( char *uplo, MKL_INT *n, double *ap, MKL_INT *info );
void    DPPTRF_( char *uplo, MKL_INT *n, double *ap, MKL_INT *info );
void    dpptrf( char *uplo, MKL_INT *n, double *ap, MKL_INT *info );
void    dpptrf_( char *uplo, MKL_INT *n, double *ap, MKL_INT *info );
void    DPPTRI( char *uplo, MKL_INT *n, double *ap, MKL_INT *info );
void    DPPTRI_( char *uplo, MKL_INT *n, double *ap, MKL_INT *info );
void    dpptri( char *uplo, MKL_INT *n, double *ap, MKL_INT *info );
void    dpptri_( char *uplo, MKL_INT *n, double *ap, MKL_INT *info );
void    DPPTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPPTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    dpptrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    dpptrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPTCON( MKL_INT *n, double *d, double *e, double *anorm, double *rcond, double *work, MKL_INT *info );
void    DPTCON_( MKL_INT *n, double *d, double *e, double *anorm, double *rcond, double *work, MKL_INT *info );
void    dptcon( MKL_INT *n, double *d, double *e, double *anorm, double *rcond, double *work, MKL_INT *info );
void    dptcon_( MKL_INT *n, double *d, double *e, double *anorm, double *rcond, double *work, MKL_INT *info );
void    DPTEQR( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DPTEQR_( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dpteqr( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dpteqr_( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DPTRFS( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *df, double *ef, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *info );
void    DPTRFS_( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *df, double *ef, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *info );
void    dptrfs( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *df, double *ef, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *info );
void    dptrfs_( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *df, double *ef, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *info );
void    DPTSV( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPTSV_( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, MKL_INT *info );
void    dptsv( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, MKL_INT *info );
void    dptsv_( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPTSVX( char *fact, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *df, double *ef, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *info );
void    DPTSVX_( char *fact, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *df, double *ef, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *info );
void    dptsvx( char *fact, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *df, double *ef, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *info );
void    dptsvx_( char *fact, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *df, double *ef, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *info );
void    DPTTRF( MKL_INT *n, double *d, double *e, MKL_INT *info );
void    DPTTRF_( MKL_INT *n, double *d, double *e, MKL_INT *info );
void    dpttrf( MKL_INT *n, double *d, double *e, MKL_INT *info );
void    dpttrf_( MKL_INT *n, double *d, double *e, MKL_INT *info );
void    DPTTRS( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPTTRS_( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, MKL_INT *info );
void    dpttrs( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, MKL_INT *info );
void    dpttrs_( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb, MKL_INT *info );
void    DPTTS2( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb );
void    DPTTS2_( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb );
void    dptts2( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb );
void    dptts2_( MKL_INT *n, MKL_INT *nrhs, double *d, double *e, double *b, MKL_INT *ldb );
void    DRSCL( MKL_INT *n, double *sa, double *sx, MKL_INT *incx );
void    DRSCL_( MKL_INT *n, double *sa, double *sx, MKL_INT *incx );
void    drscl( MKL_INT *n, double *sa, double *sx, MKL_INT *incx );
void    drscl_( MKL_INT *n, double *sa, double *sx, MKL_INT *incx );
void    DSBEV( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSBEV_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dsbev( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dsbev_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSBEVD( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSBEVD_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dsbevd( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dsbevd_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSBEVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSBEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dsbevx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dsbevx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSBGST( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *x, MKL_INT *ldx, double *work, MKL_INT *info );
void    DSBGST_( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *x, MKL_INT *ldx, double *work, MKL_INT *info );
void    dsbgst( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *x, MKL_INT *ldx, double *work, MKL_INT *info );
void    dsbgst_( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *x, MKL_INT *ldx, double *work, MKL_INT *info );
void    DSBGV( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSBGV_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dsbgv( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dsbgv_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSBGVD( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSBGVD_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dsbgvd( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dsbgvd_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSBGVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSBGVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dsbgvx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dsbgvx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, double *ab, MKL_INT *ldab, double *bb, MKL_INT *ldbb, double *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSBTRD( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *d, double *e, double *q, MKL_INT *ldq, double *work, MKL_INT *info );
void    DSBTRD_( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *d, double *e, double *q, MKL_INT *ldq, double *work, MKL_INT *info );
void    dsbtrd( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *d, double *e, double *q, MKL_INT *ldq, double *work, MKL_INT *info );
void    dsbtrd_( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *d, double *e, double *q, MKL_INT *ldq, double *work, MKL_INT *info );
double  DSECND( );
double  DSECND_( );
double  dsecnd( );
double  dsecnd_( );
void    DSPCON( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSPCON_( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dspcon( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dspcon_( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSPEV( char *jobz, char *uplo, MKL_INT *n, double *ap, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSPEV_( char *jobz, char *uplo, MKL_INT *n, double *ap, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dspev( char *jobz, char *uplo, MKL_INT *n, double *ap, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dspev_( char *jobz, char *uplo, MKL_INT *n, double *ap, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSPEVD( char *jobz, char *uplo, MKL_INT *n, double *ap, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSPEVD_( char *jobz, char *uplo, MKL_INT *n, double *ap, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dspevd( char *jobz, char *uplo, MKL_INT *n, double *ap, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dspevd_( char *jobz, char *uplo, MKL_INT *n, double *ap, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSPEVX( char *jobz, char *range, char *uplo, MKL_INT *n, double *ap, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSPEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, double *ap, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dspevx( char *jobz, char *range, char *uplo, MKL_INT *n, double *ap, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dspevx_( char *jobz, char *range, char *uplo, MKL_INT *n, double *ap, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSPGST( MKL_INT *itype, char *uplo, MKL_INT *n, double *ap, double *bp, MKL_INT *info );
void    DSPGST_( MKL_INT *itype, char *uplo, MKL_INT *n, double *ap, double *bp, MKL_INT *info );
void    dspgst( MKL_INT *itype, char *uplo, MKL_INT *n, double *ap, double *bp, MKL_INT *info );
void    dspgst_( MKL_INT *itype, char *uplo, MKL_INT *n, double *ap, double *bp, MKL_INT *info );
void    DSPGV( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *ap, double *bp, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSPGV_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *ap, double *bp, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dspgv( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *ap, double *bp, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dspgv_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *ap, double *bp, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSPGVD( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *ap, double *bp, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSPGVD_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *ap, double *bp, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dspgvd( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *ap, double *bp, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dspgvd_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *ap, double *bp, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSPGVX( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, double *ap, double *bp, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSPGVX_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, double *ap, double *bp, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dspgvx( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, double *ap, double *bp, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dspgvx_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, double *ap, double *bp, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSPRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSPRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dsprfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dsprfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSPSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DSPSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dspsv( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dspsv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DSPSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSPSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dspsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dspsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, double *afp, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSPTRD( char *uplo, MKL_INT *n, double *ap, double *d, double *e, double *tau, MKL_INT *info );
void    DSPTRD_( char *uplo, MKL_INT *n, double *ap, double *d, double *e, double *tau, MKL_INT *info );
void    dsptrd( char *uplo, MKL_INT *n, double *ap, double *d, double *e, double *tau, MKL_INT *info );
void    dsptrd_( char *uplo, MKL_INT *n, double *ap, double *d, double *e, double *tau, MKL_INT *info );
void    DSPTRF( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, MKL_INT *info );
void    DSPTRF_( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, MKL_INT *info );
void    dsptrf( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, MKL_INT *info );
void    dsptrf_( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, MKL_INT *info );
void    DSPTRI( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, double *work, MKL_INT *info );
void    DSPTRI_( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, double *work, MKL_INT *info );
void    dsptri( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, double *work, MKL_INT *info );
void    dsptri_( char *uplo, MKL_INT *n, double *ap, MKL_INT *ipiv, double *work, MKL_INT *info );
void    DSPTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DSPTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dsptrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dsptrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *ap, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DSTEBZ( char *range, char *order, MKL_INT *n, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, double *d, double *e, MKL_INT *m, MKL_INT *nsplit, double *w, MKL_INT *iblock, MKL_INT *isplit, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSTEBZ_( char *range, char *order, MKL_INT *n, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, double *d, double *e, MKL_INT *m, MKL_INT *nsplit, double *w, MKL_INT *iblock, MKL_INT *isplit, double *work, MKL_INT *iwork, MKL_INT *info );
void    dstebz( char *range, char *order, MKL_INT *n, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, double *d, double *e, MKL_INT *m, MKL_INT *nsplit, double *w, MKL_INT *iblock, MKL_INT *isplit, double *work, MKL_INT *iwork, MKL_INT *info );
void    dstebz_( char *range, char *order, MKL_INT *n, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, double *d, double *e, MKL_INT *m, MKL_INT *nsplit, double *w, MKL_INT *iblock, MKL_INT *isplit, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSTEDC( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSTEDC_( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dstedc( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dstedc_( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSTEGR( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSTEGR_( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dstegr( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dstegr_( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSTEIN( MKL_INT *n, double *d, double *e, MKL_INT *m, double *w, MKL_INT *iblock, MKL_INT *isplit, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSTEIN_( MKL_INT *n, double *d, double *e, MKL_INT *m, double *w, MKL_INT *iblock, MKL_INT *isplit, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dstein( MKL_INT *n, double *d, double *e, MKL_INT *m, double *w, MKL_INT *iblock, MKL_INT *isplit, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dstein_( MKL_INT *n, double *d, double *e, MKL_INT *m, double *w, MKL_INT *iblock, MKL_INT *isplit, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSTEQR( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSTEQR_( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dsteqr( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dsteqr_( char *compz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSTERF( MKL_INT *n, double *d, double *e, MKL_INT *info );
void    DSTERF_( MKL_INT *n, double *d, double *e, MKL_INT *info );
void    dsterf( MKL_INT *n, double *d, double *e, MKL_INT *info );
void    dsterf_( MKL_INT *n, double *d, double *e, MKL_INT *info );
void    DSTEV( char *jobz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSTEV_( char *jobz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dstev( char *jobz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    dstev_( char *jobz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    DSTEVD( char *jobz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSTEVD_( char *jobz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dstevd( char *jobz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dstevd_( char *jobz, MKL_INT *n, double *d, double *e, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSTEVR( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSTEVR_( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dstevr( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dstevr_( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSTEVX( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSTEVX_( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dstevx( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dstevx_( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSYCON( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSYCON_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dsycon( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dsycon_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSYEV( char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *w, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYEV_( char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *w, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsyev( char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *w, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsyev_( char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *w, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYEVD( char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *w, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSYEVD_( char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *w, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dsyevd( char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *w, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dsyevd_( char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *w, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSYEVR( char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSYEVR_( char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dsyevr( char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dsyevr_( char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSYEVX( char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSYEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dsyevx( char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dsyevx_( char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSYGS2( MKL_INT *itype, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    DSYGS2_( MKL_INT *itype, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    dsygs2( MKL_INT *itype, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    dsygs2_( MKL_INT *itype, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    DSYGST( MKL_INT *itype, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    DSYGST_( MKL_INT *itype, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    dsygst( MKL_INT *itype, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    dsygst_( MKL_INT *itype, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    DSYGV( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *w, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYGV_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *w, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsygv( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *w, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsygv_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *w, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYGVD( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *w, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSYGVD_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *w, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dsygvd( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *w, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dsygvd_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *w, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DSYGVX( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSYGVX_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dsygvx( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    dsygvx_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, double *z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    DSYRDB( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *a, MKL_INT *lda, double *d, double *e, double *tau, double* z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYRDB_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *a, MKL_INT *lda, double *d, double *e, double *tau, double* z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsyrdb( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *a, MKL_INT *lda, double *d, double *e, double *tau, double* z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsyrdb_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, double *a, MKL_INT *lda, double *d, double *e, double *tau, double* z, MKL_INT *ldz, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSYRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dsyrfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dsyrfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DSYSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsysv( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsysv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DSYSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dsysvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dsysvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *af, MKL_INT *ldaf, MKL_INT *ipiv, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DSYTD2( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tau, MKL_INT *info );
void    DSYTD2_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tau, MKL_INT *info );
void    dsytd2( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tau, MKL_INT *info );
void    dsytd2_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tau, MKL_INT *info );
void    DSYTF2( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    DSYTF2_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    dsytf2( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    dsytf2_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    DSYTRD( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYTRD_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsytrd( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsytrd_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, double *d, double *e, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYTRF( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYTRF_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsytrf( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *lwork, MKL_INT *info );
void    dsytrf_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *lwork, MKL_INT *info );
void    DSYTRI( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *info );
void    DSYTRI_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *info );
void    dsytri( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *info );
void    dsytri_( char *uplo, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *ipiv, double *work, MKL_INT *info );
void    DSYTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DSYTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dsytrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    dsytrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, MKL_INT *ipiv, double *b, MKL_INT *ldb, MKL_INT *info );
void    DTBCON( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTBCON_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtbcon( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtbcon_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, double *ab, MKL_INT *ldab, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTBRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTBRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtbrfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtbrfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTBTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    DTBTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    dtbtrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    dtbtrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, double *ab, MKL_INT *ldab, double *b, MKL_INT *ldb, MKL_INT *info );
void    DTGEVC( char *side, char *howmny, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *info );
void    DTGEVC_( char *side, char *howmny, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *info );
void    dtgevc( char *side, char *howmny, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *info );
void    dtgevc_( char *side, char *howmny, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *info );
void    DTGEX2( void *wantq, void *wantz, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, double *work, MKL_INT *lwork, MKL_INT *info );
void    DTGEX2_( void *wantq, void *wantz, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, double *work, MKL_INT *lwork, MKL_INT *info );
void    dtgex2( void *wantq, void *wantz, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, double *work, MKL_INT *lwork, MKL_INT *info );
void    dtgex2_( void *wantq, void *wantz, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *n1, MKL_INT *n2, double *work, MKL_INT *lwork, MKL_INT *info );
void    DTGEXC( void *wantq, void *wantz, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, double *work, MKL_INT *lwork, MKL_INT *info );
void    DTGEXC_( void *wantq, void *wantz, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, double *work, MKL_INT *lwork, MKL_INT *info );
void    dtgexc( void *wantq, void *wantz, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, double *work, MKL_INT *lwork, MKL_INT *info );
void    dtgexc_( void *wantq, void *wantz, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, double *work, MKL_INT *lwork, MKL_INT *info );
void    DTGSEN( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *m, double *pl, double *pr, double *dif, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DTGSEN_( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *m, double *pl, double *pr, double *dif, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dtgsen( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *m, double *pl, double *pr, double *dif, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dtgsen_( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *alphar, double *alphai, double *beta, double *q, MKL_INT *ldq, double *z, MKL_INT *ldz, MKL_INT *m, double *pl, double *pr, double *dif, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DTGSJA( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *tola, double *tolb, double *alpha, double *beta, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, double *work, MKL_INT *ncycle, MKL_INT *info );
void    DTGSJA_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *tola, double *tolb, double *alpha, double *beta, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, double *work, MKL_INT *ncycle, MKL_INT *info );
void    dtgsja( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *tola, double *tolb, double *alpha, double *beta, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, double *work, MKL_INT *ncycle, MKL_INT *info );
void    dtgsja_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *tola, double *tolb, double *alpha, double *beta, double *u, MKL_INT *ldu, double *v, MKL_INT *ldv, double *q, MKL_INT *ldq, double *work, MKL_INT *ncycle, MKL_INT *info );
void    DTGSNA( char *job, char *howmny, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *s, double *dif, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DTGSNA_( char *job, char *howmny, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *s, double *dif, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dtgsna( char *job, char *howmny, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *s, double *dif, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dtgsna_( char *job, char *howmny, void *select, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *s, double *dif, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DTGSY2( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *d, MKL_INT *ldd, double *e, MKL_INT *lde, double *f, MKL_INT *ldf, double *scale, double *rdsum, double *rdscal, MKL_INT *iwork, MKL_INT *pq, MKL_INT *info );
void    DTGSY2_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *d, MKL_INT *ldd, double *e, MKL_INT *lde, double *f, MKL_INT *ldf, double *scale, double *rdsum, double *rdscal, MKL_INT *iwork, MKL_INT *pq, MKL_INT *info );
void    dtgsy2( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *d, MKL_INT *ldd, double *e, MKL_INT *lde, double *f, MKL_INT *ldf, double *scale, double *rdsum, double *rdscal, MKL_INT *iwork, MKL_INT *pq, MKL_INT *info );
void    dtgsy2_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *d, MKL_INT *ldd, double *e, MKL_INT *lde, double *f, MKL_INT *ldf, double *scale, double *rdsum, double *rdscal, MKL_INT *iwork, MKL_INT *pq, MKL_INT *info );
void    DTGSYL( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *d, MKL_INT *ldd, double *e, MKL_INT *lde, double *f, MKL_INT *ldf, double *scale, double *dif, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DTGSYL_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *d, MKL_INT *ldd, double *e, MKL_INT *lde, double *f, MKL_INT *ldf, double *scale, double *dif, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dtgsyl( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *d, MKL_INT *ldd, double *e, MKL_INT *lde, double *f, MKL_INT *ldf, double *scale, double *dif, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    dtgsyl_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *d, MKL_INT *ldd, double *e, MKL_INT *lde, double *f, MKL_INT *ldf, double *scale, double *dif, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    DTPCON( char *norm, char *uplo, char *diag, MKL_INT *n, double *ap, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTPCON_( char *norm, char *uplo, char *diag, MKL_INT *n, double *ap, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtpcon( char *norm, char *uplo, char *diag, MKL_INT *n, double *ap, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtpcon_( char *norm, char *uplo, char *diag, MKL_INT *n, double *ap, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTPRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTPRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtprfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtprfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTPTRI( char *uplo, char *diag, MKL_INT *n, double *ap, MKL_INT *info );
void    DTPTRI_( char *uplo, char *diag, MKL_INT *n, double *ap, MKL_INT *info );
void    dtptri( char *uplo, char *diag, MKL_INT *n, double *ap, MKL_INT *info );
void    dtptri_( char *uplo, char *diag, MKL_INT *n, double *ap, MKL_INT *info );
void    DTPTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    DTPTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    dtptrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    dtptrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *ap, double *b, MKL_INT *ldb, MKL_INT *info );
void    DTRCON( char *norm, char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTRCON_( char *norm, char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtrcon( char *norm, char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtrcon_( char *norm, char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, double *rcond, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTREVC( char *side, char *howmny, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *info );
void    DTREVC_( char *side, char *howmny, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *info );
void    dtrevc( char *side, char *howmny, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *info );
void    dtrevc_( char *side, char *howmny, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *info );
void    DTREXC( char *compq, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, double *work, MKL_INT *info );
void    DTREXC_( char *compq, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, double *work, MKL_INT *info );
void    dtrexc( char *compq, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, double *work, MKL_INT *info );
void    dtrexc_( char *compq, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, double *work, MKL_INT *info );
void    DTRRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTRRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtrrfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    dtrrfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *x, MKL_INT *ldx, double *ferr, double *berr, double *work, MKL_INT *iwork, MKL_INT *info );
void    DTRSEN( char *job, char *compq, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, double *wr, double *wi, MKL_INT *m, double *s, double *sep, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DTRSEN_( char *job, char *compq, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, double *wr, double *wi, MKL_INT *m, double *s, double *sep, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dtrsen( char *job, char *compq, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, double *wr, double *wi, MKL_INT *m, double *s, double *sep, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    dtrsen_( char *job, char *compq, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *q, MKL_INT *ldq, double *wr, double *wi, MKL_INT *m, double *s, double *sep, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    DTRSNA( char *job, char *howmny, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *s, double *sep, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *ldwork, MKL_INT *iwork, MKL_INT *info );
void    DTRSNA_( char *job, char *howmny, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *s, double *sep, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *ldwork, MKL_INT *iwork, MKL_INT *info );
void    dtrsna( char *job, char *howmny, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *s, double *sep, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *ldwork, MKL_INT *iwork, MKL_INT *info );
void    dtrsna_( char *job, char *howmny, void *select, MKL_INT *n, double *t, MKL_INT *ldt, double *vl, MKL_INT *ldvl, double *vr, MKL_INT *ldvr, double *s, double *sep, MKL_INT *mm, MKL_INT *m, double *work, MKL_INT *ldwork, MKL_INT *iwork, MKL_INT *info );
void    DTRSYL( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *scale, MKL_INT *info );
void    DTRSYL_( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *scale, MKL_INT *info );
void    dtrsyl( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *scale, MKL_INT *info );
void    dtrsyl_( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, double *c, MKL_INT *ldc, double *scale, MKL_INT *info );
void    DTRTI2( char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DTRTI2_( char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dtrti2( char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dtrti2_( char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DTRTRI( char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DTRTRI_( char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dtrtri( char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    dtrtri_( char *uplo, char *diag, MKL_INT *n, double *a, MKL_INT *lda, MKL_INT *info );
void    DTRTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    DTRTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    dtrtrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    dtrtrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, double *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_INT *info );
void    DTZRQF( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, MKL_INT *info );
void    DTZRQF_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, MKL_INT *info );
void    dtzrqf( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, MKL_INT *info );
void    dtzrqf_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, MKL_INT *info );
void    DTZRZF( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    DTZRZF_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dtzrzf( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
void    dtzrzf_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, double *tau, double *work, MKL_INT *lwork, MKL_INT *info );
double  DZSUM1( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx );
double  DZSUM1_( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx );
double  dzsum1( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx );
double  dzsum1_( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx );
MKL_INT     IZMAX1( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx );
MKL_INT     IZMAX1_( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx );
MKL_INT     izmax1( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx );
MKL_INT     izmax1_( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx );
void    ZBDSQR( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *c, MKL_INT *ldc, double *rwork, MKL_INT *info );
void    ZBDSQR_( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *c, MKL_INT *ldc, double *rwork, MKL_INT *info );
void    zbdsqr( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *c, MKL_INT *ldc, double *rwork, MKL_INT *info );
void    zbdsqr_( char *uplo, MKL_INT *n, MKL_INT *ncvt, MKL_INT *nru, MKL_INT *ncc, double *d, double *e, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *c, MKL_INT *ldc, double *rwork, MKL_INT *info );
void    ZDRSCL( MKL_INT *n, double *sa, MKL_Complex16 *sx, MKL_INT *incx );
void    ZDRSCL_( MKL_INT *n, double *sa, MKL_Complex16 *sx, MKL_INT *incx );
void    zdrscl( MKL_INT *n, double *sa, MKL_Complex16 *sx, MKL_INT *incx );
void    zdrscl_( MKL_INT *n, double *sa, MKL_Complex16 *sx, MKL_INT *incx );
void    ZGBBRD( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *pt, MKL_INT *ldpt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGBBRD_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *pt, MKL_INT *ldpt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgbbrd( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *pt, MKL_INT *ldpt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgbbrd_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *ncc, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *pt, MKL_INT *ldpt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGBCON( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGBCON_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgbcon( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgbcon_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGBEQU( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    ZGBEQU_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    zgbequ( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    zgbequ_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    ZGBRFS( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGBRFS_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgbrfs( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgbrfs_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGBSV( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGBSV_( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgbsv( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgbsv_( MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGBSVX( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, double *r, double *c, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGBSVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, double *r, double *c, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgbsvx( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, double *r, double *c, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgbsvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_INT *ipiv, char *equed, double *r, double *c, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGBTF2( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    ZGBTF2_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    zgbtf2( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    zgbtf2_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    ZGBTRF( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    ZGBTRF_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    zgbtrf( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    zgbtrf_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_INT *info );
void    ZGBTRS( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGBTRS_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgbtrs( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgbtrs_( char *trans, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGEBAK( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *m, MKL_Complex16 *v, MKL_INT *ldv, MKL_INT *info );
void    ZGEBAK_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *m, MKL_Complex16 *v, MKL_INT *ldv, MKL_INT *info );
void    zgebak( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *m, MKL_Complex16 *v, MKL_INT *ldv, MKL_INT *info );
void    zgebak_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *m, MKL_Complex16 *v, MKL_INT *ldv, MKL_INT *info );
void    ZGEBAL( char *job, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *info );
void    ZGEBAL_( char *job, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *info );
void    zgebal( char *job, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *info );
void    zgebal_( char *job, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ilo, MKL_INT *ihi, double *scale, MKL_INT *info );
void    ZGEBD2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *work, MKL_INT *info );
void    ZGEBD2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *work, MKL_INT *info );
void    zgebd2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *work, MKL_INT *info );
void    zgebd2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *work, MKL_INT *info );
void    ZGEBRD( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGEBRD_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgebrd( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgebrd_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGECON( char *norm, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGECON_( char *norm, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgecon( char *norm, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgecon_( char *norm, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGEEQU( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    ZGEEQU_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    zgeequ( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    zgeequ_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, MKL_INT *info );
void    ZGEES( char *jobvs, char *sort, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex16 *w, MKL_Complex16 *vs, MKL_INT *ldvs, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    ZGEES_( char *jobvs, char *sort, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex16 *w, MKL_Complex16 *vs, MKL_INT *ldvs, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    zgees( char *jobvs, char *sort, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex16 *w, MKL_Complex16 *vs, MKL_INT *ldvs, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    zgees_( char *jobvs, char *sort, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex16 *w, MKL_Complex16 *vs, MKL_INT *ldvs, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    ZGEESX( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex16 *w, MKL_Complex16 *vs, MKL_INT *ldvs, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    ZGEESX_( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex16 *w, MKL_Complex16 *vs, MKL_INT *ldvs, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    zgeesx( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex16 *w, MKL_Complex16 *vs, MKL_INT *ldvs, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    zgeesx_( char *jobvs, char *sort, void *select, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *sdim, MKL_Complex16 *w, MKL_Complex16 *vs, MKL_INT *ldvs, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    ZGEEV( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEEV_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgeev( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgeev_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEEVX( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEEVX_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgeevx( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgeevx_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEGS( char *jobvsl, char *jobvsr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEGS_( char *jobvsl, char *jobvsr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgegs( char *jobvsl, char *jobvsr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgegs_( char *jobvsl, char *jobvsr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEGV( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEGV_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgegv( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgegv_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEHD2( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGEHD2_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zgehd2( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zgehd2_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGEHRD( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGEHRD_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgehrd( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgehrd_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGELQ2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGELQ2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zgelq2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zgelq2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGELQF( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGELQF_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgelqf( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgelqf_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGELS( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGELS_( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgels( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgels_( char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGELSD( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZGELSD_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    zgelsd( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    zgelsd_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZGELSS( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGELSS_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgelss( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgelss_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *s, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGELSX( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGELSX_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgelsx( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgelsx_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGELSY( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGELSY_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgelsy( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgelsy_( MKL_INT *m, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *jpvt, double *rcond, MKL_INT *rank, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEQL2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGEQL2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zgeql2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zgeql2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGEQLF( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGEQLF_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgeqlf( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgeqlf_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGEQP3( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEQP3_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgeqp3( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgeqp3_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGEQPF( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGEQPF_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgeqpf( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgeqpf_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGEQR2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGEQR2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zgeqr2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zgeqr2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGEQRF( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGEQRF_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgeqrf( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgeqrf_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGERFS( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGERFS_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgerfs( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgerfs_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGERQ2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGERQ2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zgerq2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zgerq2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGERQF( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGERQF_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgerqf( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgerqf_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGESC2( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *rhs, MKL_INT *ipiv, MKL_INT *jpiv, double *scale );
void    ZGESC2_( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *rhs, MKL_INT *ipiv, MKL_INT *jpiv, double *scale );
void    zgesc2( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *rhs, MKL_INT *ipiv, MKL_INT *jpiv, double *scale );
void    zgesc2_( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *rhs, MKL_INT *ipiv, MKL_INT *jpiv, double *scale );
void    ZGESDD( char *jobz, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZGESDD_( char *jobz, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    zgesdd( char *jobz, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    zgesdd_( char *jobz, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZGESV( MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGESV_( MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgesv( MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgesv_( MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGESVD( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGESVD_( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgesvd( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zgesvd_( char *jobu, char *jobvt, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *vt, MKL_INT *ldvt, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGESVX( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, double *r, double *c, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGESVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, double *r, double *c, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgesvx( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, double *r, double *c, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgesvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, char *equed, double *r, double *c, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGETC2( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    ZGETC2_( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    zgetc2( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    zgetc2_( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *jpiv, MKL_INT *info );
void    ZGETF2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    ZGETF2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    zgetf2( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    zgetf2_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    ZGETRF( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    ZGETRF_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    zgetrf( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    zgetrf_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    ZGETRI( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGETRI_( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgetri( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgetri_( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGETRS( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGETRS_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgetrs( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgetrs_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGGBAK( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, MKL_INT *m, MKL_Complex16 *v, MKL_INT *ldv, MKL_INT *info );
void    ZGGBAK_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, MKL_INT *m, MKL_Complex16 *v, MKL_INT *ldv, MKL_INT *info );
void    zggbak( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, MKL_INT *m, MKL_Complex16 *v, MKL_INT *ldv, MKL_INT *info );
void    zggbak_( char *job, char *side, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, MKL_INT *m, MKL_Complex16 *v, MKL_INT *ldv, MKL_INT *info );
void    ZGGBAL( char *job, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *work, MKL_INT *info );
void    ZGGBAL_( char *job, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *work, MKL_INT *info );
void    zggbal( char *job, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *work, MKL_INT *info );
void    zggbal_( char *job, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *work, MKL_INT *info );
void    ZGGES( char *jobvsl, char *jobvsr, char *sort, void *delctg, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    ZGGES_( char *jobvsl, char *jobvsr, char *sort, void *delctg, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    zgges( char *jobvsl, char *jobvsr, char *sort, void *delctg, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    zgges_( char *jobvsl, char *jobvsr, char *sort, void *delctg, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, void *bwork, MKL_INT *info );
void    ZGGESX( char *jobvsl, char *jobvsr, char *sort, void *delctg, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    ZGGESX_( char *jobvsl, char *jobvsr, char *sort, void *delctg, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    zggesx( char *jobvsl, char *jobvsr, char *sort, void *delctg, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    zggesx_( char *jobvsl, char *jobvsr, char *sort, void *delctg, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *sdim, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vsl, MKL_INT *ldvsl, MKL_Complex16 *vsr, MKL_INT *ldvsr, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *liwork, void *bwork, MKL_INT *info );
void    ZGGEV( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGGEV_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zggev( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zggev_( char *jobvl, char *jobvr, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZGGEVX( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    ZGGEVX_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    zggevx( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    zggevx_( char *balanc, char *jobvl, char *jobvr, char *sense, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *ilo, MKL_INT *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, void *bwork, MKL_INT *info );
void    ZGGGLM( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *d, MKL_Complex16 *x, MKL_Complex16 *y, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGGGLM_( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *d, MKL_Complex16 *x, MKL_Complex16 *y, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zggglm( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *d, MKL_Complex16 *x, MKL_Complex16 *y, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zggglm_( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *d, MKL_Complex16 *x, MKL_Complex16 *y, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGGHRD( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *info );
void    ZGGHRD_( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *info );
void    zgghrd( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *info );
void    zgghrd_( char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *info );
void    ZGGLSE( MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_Complex16 *d, MKL_Complex16 *x, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGGLSE_( MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_Complex16 *d, MKL_Complex16 *x, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgglse( MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_Complex16 *d, MKL_Complex16 *x, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zgglse_( MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_Complex16 *d, MKL_Complex16 *x, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGGQRF( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *taua, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *taub, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGGQRF_( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *taua, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *taub, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zggqrf( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *taua, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *taub, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zggqrf_( MKL_INT *n, MKL_INT *m, MKL_INT *p, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *taua, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *taub, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGGRQF( MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *taua, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *taub, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGGRQF_( MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *taua, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *taub, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zggrqf( MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *taua, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *taub, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zggrqf_( MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *taua, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *taub, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZGGSVD( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *alpha, double *beta, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZGGSVD_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *alpha, double *beta, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    zggsvd( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *alpha, double *beta, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    zggsvd_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *n, MKL_INT *p, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *alpha, double *beta, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZGGSVP( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *tola, double *tolb, MKL_INT *k, MKL_INT *l, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_INT *iwork, double *rwork, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGGSVP_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *tola, double *tolb, MKL_INT *k, MKL_INT *l, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_INT *iwork, double *rwork, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zggsvp( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *tola, double *tolb, MKL_INT *k, MKL_INT *l, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_INT *iwork, double *rwork, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zggsvp_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *tola, double *tolb, MKL_INT *k, MKL_INT *l, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_INT *iwork, double *rwork, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZGTCON( char *norm, MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    ZGTCON_( char *norm, MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    zgtcon( char *norm, MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    zgtcon_( char *norm, MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    ZGTRFS( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *dlf, MKL_Complex16 *df, MKL_Complex16 *duf, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGTRFS_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *dlf, MKL_Complex16 *df, MKL_Complex16 *duf, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgtrfs( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *dlf, MKL_Complex16 *df, MKL_Complex16 *duf, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgtrfs_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *dlf, MKL_Complex16 *df, MKL_Complex16 *duf, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGTSV( MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGTSV_( MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgtsv( MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgtsv_( MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGTSVX( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *dlf, MKL_Complex16 *df, MKL_Complex16 *duf, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGTSVX_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *dlf, MKL_Complex16 *df, MKL_Complex16 *duf, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgtsvx( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *dlf, MKL_Complex16 *df, MKL_Complex16 *duf, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zgtsvx_( char *fact, char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *dlf, MKL_Complex16 *df, MKL_Complex16 *duf, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZGTTRF( MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_INT *info );
void    ZGTTRF_( MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_INT *info );
void    zgttrf( MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_INT *info );
void    zgttrf_( MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_INT *info );
void    ZGTTRS( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGTTRS_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgttrs( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zgttrs_( char *trans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZGTTS2( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb );
void    ZGTTS2_( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb );
void    zgtts2( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb );
void    zgtts2_( MKL_INT *itrans, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *du2, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb );
void    ZHBEV( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHBEV_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhbev( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhbev_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHBEVD( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHBEVD_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zhbevd( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zhbevd_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHBEVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHBEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zhbevx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zhbevx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHBGST( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, MKL_Complex16 *x, MKL_INT *ldx, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHBGST_( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, MKL_Complex16 *x, MKL_INT *ldx, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhbgst( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, MKL_Complex16 *x, MKL_INT *ldx, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhbgst_( char *vect, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, MKL_Complex16 *x, MKL_INT *ldx, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHBGV( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHBGV_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhbgv( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhbgv_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHBGVD( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHBGVD_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zhbgvd( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zhbgvd_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHBGVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, MKL_Complex16 *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHBGVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, MKL_Complex16 *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zhbgvx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, MKL_Complex16 *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zhbgvx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_INT *ka, MKL_INT *kb, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *bb, MKL_INT *ldbb, MKL_Complex16 *q, MKL_INT *ldq, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHBTRD( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *info );
void    ZHBTRD_( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *info );
void    zhbtrd( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *info );
void    zhbtrd_( char *vect, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *info );
void    ZHECON( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    ZHECON_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    zhecon( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    zhecon_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    ZHEEV( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZHEEV_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zheev( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zheev_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZHEEVD( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHEEVD_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zheevd( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zheevd_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHEEVR( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHEEVR_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zheevr( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zheevr_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHEEVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHEEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zheevx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zheevx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHEGS2( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZHEGS2_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zhegs2( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zhegs2_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZHEGST( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZHEGST_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zhegst( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zhegst_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZHEGV( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZHEGV_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zhegv( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zhegv_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZHEGVD( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHEGVD_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zhegvd( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zhegvd_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *w, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHEGVX( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHEGVX_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zhegvx( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zhegvx_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHERDB( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_Complex16* z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZHERDB_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_Complex16* z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zherdb( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_Complex16* z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zherdb_( char *jobz, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_Complex16* z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZHERFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHERFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zherfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zherfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHESV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZHESV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zhesv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zhesv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZHESVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZHESVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zhesvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zhesvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZHETD2( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_INT *info );
void    ZHETD2_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_INT *info );
void    zhetd2( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_INT *info );
void    zhetd2_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_INT *info );
void    ZHETF2( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    ZHETF2_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    zhetf2( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    zhetf2_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    ZHETRD( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZHETRD_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zhetrd( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zhetrd_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZHETRF( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZHETRF_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zhetrf( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zhetrf_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZHETRI( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    ZHETRI_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    zhetri( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    zhetri_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    ZHETRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZHETRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zhetrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zhetrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZHGEQZ( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZHGEQZ_( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zhgeqz( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zhgeqz_( char *job, char *compq, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZHPCON( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    ZHPCON_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    zhpcon( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    zhpcon_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    ZHPEV( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHPEV_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhpev( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhpev_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHPEVD( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHPEVD_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zhpevd( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zhpevd_( char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHPEVX( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHPEVX_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zhpevx( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zhpevx_( char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHPGST( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, MKL_INT *info );
void    ZHPGST_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, MKL_INT *info );
void    zhpgst( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, MKL_INT *info );
void    zhpgst_( MKL_INT *itype, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, MKL_INT *info );
void    ZHPGV( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHPGV_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhpgv( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhpgv_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHPGVD( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHPGVD_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zhpgvd( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zhpgvd_( MKL_INT *itype, char *jobz, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZHPGVX( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHPGVX_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zhpgvx( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zhpgvx_( MKL_INT *itype, char *jobz, char *range, char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *bp, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZHPRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHPRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhprfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhprfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHPSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZHPSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zhpsv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zhpsv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZHPSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHPSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhpsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zhpsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZHPTRD( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *d, double *e, MKL_Complex16 *tau, MKL_INT *info );
void    ZHPTRD_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *d, double *e, MKL_Complex16 *tau, MKL_INT *info );
void    zhptrd( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *d, double *e, MKL_Complex16 *tau, MKL_INT *info );
void    zhptrd_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *d, double *e, MKL_Complex16 *tau, MKL_INT *info );
void    ZHPTRF( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_INT *info );
void    ZHPTRF_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_INT *info );
void    zhptrf( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_INT *info );
void    zhptrf_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_INT *info );
void    ZHPTRI( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    ZHPTRI_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    zhptri( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    zhptri_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    ZHPTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZHPTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zhptrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zhptrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZHSEIN( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    ZHSEIN_( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    zhsein( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    zhsein_( char *side, char *eigsrc, char *initv, void *select, MKL_INT *n, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *ifaill, MKL_INT *ifailr, MKL_INT *info );
void    ZHSEQR( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZHSEQR_( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zhseqr( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zhseqr_( char *job, char *compz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZLABRD( MKL_INT *m, MKL_INT *n, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *x, MKL_INT *ldx, MKL_Complex16 *y, MKL_INT *ldy );
void    ZLABRD_( MKL_INT *m, MKL_INT *n, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *x, MKL_INT *ldx, MKL_Complex16 *y, MKL_INT *ldy );
void    zlabrd( MKL_INT *m, MKL_INT *n, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *x, MKL_INT *ldx, MKL_Complex16 *y, MKL_INT *ldy );
void    zlabrd_( MKL_INT *m, MKL_INT *n, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, double *d, double *e, MKL_Complex16 *tauq, MKL_Complex16 *taup, MKL_Complex16 *x, MKL_INT *ldx, MKL_Complex16 *y, MKL_INT *ldy );
void    ZLACGV( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx );
void    ZLACGV_( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx );
void    zlacgv( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx );
void    zlacgv_( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx );
void    ZLACON( MKL_INT *n, MKL_Complex16 *v, MKL_Complex16 *x, double *est, MKL_INT *kase );
void    ZLACON_( MKL_INT *n, MKL_Complex16 *v, MKL_Complex16 *x, double *est, MKL_INT *kase );
void    zlacon( MKL_INT *n, MKL_Complex16 *v, MKL_Complex16 *x, double *est, MKL_INT *kase );
void    zlacon_( MKL_INT *n, MKL_Complex16 *v, MKL_Complex16 *x, double *est, MKL_INT *kase );
void    ZLACP2( char *uplo, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb );
void    ZLACP2_( char *uplo, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb );
void    zlacp2( char *uplo, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb );
void    zlacp2_( char *uplo, MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb );
void    ZLACPY( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb );
void    ZLACPY_( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb );
void    zlacpy( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb );
void    zlacpy_( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb );
void    ZLACRM( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *rwork );
void    ZLACRM_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *rwork );
void    zlacrm( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *rwork );
void    zlacrm_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *rwork );
void    ZLACRT( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx, MKL_Complex16 *cy, MKL_INT *incy, MKL_Complex16 *c, MKL_Complex16 *s );
void    ZLACRT_( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx, MKL_Complex16 *cy, MKL_INT *incy, MKL_Complex16 *c, MKL_Complex16 *s );
void    zlacrt( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx, MKL_Complex16 *cy, MKL_INT *incy, MKL_Complex16 *c, MKL_Complex16 *s );
void    zlacrt_( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx, MKL_Complex16 *cy, MKL_INT *incy, MKL_Complex16 *c, MKL_Complex16 *s );
void    ZLADIV( MKL_Complex16 *pres, MKL_Complex16 *x, MKL_Complex16 *y );
void    ZLADIV_( MKL_Complex16 *pres, MKL_Complex16 *x, MKL_Complex16 *y );
void    zladiv( MKL_Complex16 *pres, MKL_Complex16 *x, MKL_Complex16 *y );
void    zladiv_( MKL_Complex16 *pres, MKL_Complex16 *x, MKL_Complex16 *y );
void    ZLAED0( MKL_INT *qsiz, MKL_INT *n, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *qstore, MKL_INT *ldqs, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZLAED0_( MKL_INT *qsiz, MKL_INT *n, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *qstore, MKL_INT *ldqs, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    zlaed0( MKL_INT *qsiz, MKL_INT *n, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *qstore, MKL_INT *ldqs, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    zlaed0_( MKL_INT *qsiz, MKL_INT *n, double *d, double *e, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *qstore, MKL_INT *ldqs, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZLAED7( MKL_INT *n, MKL_INT *cutpnt, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, double *d, MKL_Complex16 *q, MKL_INT *ldq, double *rho, MKL_INT *indxq, double *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZLAED7_( MKL_INT *n, MKL_INT *cutpnt, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, double *d, MKL_Complex16 *q, MKL_INT *ldq, double *rho, MKL_INT *indxq, double *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    zlaed7( MKL_INT *n, MKL_INT *cutpnt, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, double *d, MKL_Complex16 *q, MKL_INT *ldq, double *rho, MKL_INT *indxq, double *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    zlaed7_( MKL_INT *n, MKL_INT *cutpnt, MKL_INT *qsiz, MKL_INT *tlvls, MKL_INT *curlvl, MKL_INT *curpbm, double *d, MKL_Complex16 *q, MKL_INT *ldq, double *rho, MKL_INT *indxq, double *qstore, MKL_INT *qptr, MKL_INT *prmptr, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_Complex16 *work, double *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZLAED8( MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, MKL_Complex16 *q, MKL_INT *ldq, double *d, double *rho, MKL_INT *cutpnt, double *z, double *dlamda, MKL_Complex16 *q2, MKL_INT *ldq2, double *w, MKL_INT *indxp, MKL_INT *indx, MKL_INT *indxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_INT *info );
void    ZLAED8_( MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, MKL_Complex16 *q, MKL_INT *ldq, double *d, double *rho, MKL_INT *cutpnt, double *z, double *dlamda, MKL_Complex16 *q2, MKL_INT *ldq2, double *w, MKL_INT *indxp, MKL_INT *indx, MKL_INT *indxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_INT *info );
void    zlaed8( MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, MKL_Complex16 *q, MKL_INT *ldq, double *d, double *rho, MKL_INT *cutpnt, double *z, double *dlamda, MKL_Complex16 *q2, MKL_INT *ldq2, double *w, MKL_INT *indxp, MKL_INT *indx, MKL_INT *indxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_INT *info );
void    zlaed8_( MKL_INT *k, MKL_INT *n, MKL_INT *qsiz, MKL_Complex16 *q, MKL_INT *ldq, double *d, double *rho, MKL_INT *cutpnt, double *z, double *dlamda, MKL_Complex16 *q2, MKL_INT *ldq2, double *w, MKL_INT *indxp, MKL_INT *indx, MKL_INT *indxq, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, double *givnum, MKL_INT *info );
void    ZLAEIN( void *rightv, void *noinit, MKL_INT *n, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *v, MKL_Complex16 *b, MKL_INT *ldb, double *rwork, double *eps3, double *smlnum, MKL_INT *info );
void    ZLAEIN_( void *rightv, void *noinit, MKL_INT *n, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *v, MKL_Complex16 *b, MKL_INT *ldb, double *rwork, double *eps3, double *smlnum, MKL_INT *info );
void    zlaein( void *rightv, void *noinit, MKL_INT *n, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *v, MKL_Complex16 *b, MKL_INT *ldb, double *rwork, double *eps3, double *smlnum, MKL_INT *info );
void    zlaein_( void *rightv, void *noinit, MKL_INT *n, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_Complex16 *v, MKL_Complex16 *b, MKL_INT *ldb, double *rwork, double *eps3, double *smlnum, MKL_INT *info );
void    ZLAESY( MKL_Complex16 *a, MKL_Complex16 *b, MKL_Complex16 *c, MKL_Complex16 *rt1, MKL_Complex16 *rt2, MKL_Complex16 *evscal, MKL_Complex16 *cs1, MKL_Complex16 *sn1 );
void    ZLAESY_( MKL_Complex16 *a, MKL_Complex16 *b, MKL_Complex16 *c, MKL_Complex16 *rt1, MKL_Complex16 *rt2, MKL_Complex16 *evscal, MKL_Complex16 *cs1, MKL_Complex16 *sn1 );
void    zlaesy( MKL_Complex16 *a, MKL_Complex16 *b, MKL_Complex16 *c, MKL_Complex16 *rt1, MKL_Complex16 *rt2, MKL_Complex16 *evscal, MKL_Complex16 *cs1, MKL_Complex16 *sn1 );
void    zlaesy_( MKL_Complex16 *a, MKL_Complex16 *b, MKL_Complex16 *c, MKL_Complex16 *rt1, MKL_Complex16 *rt2, MKL_Complex16 *evscal, MKL_Complex16 *cs1, MKL_Complex16 *sn1 );
void    ZLAEV2( MKL_Complex16 *a, MKL_Complex16 *b, MKL_Complex16 *c, double *rt1, double *rt2, double *cs1, MKL_Complex16 *sn1 );
void    ZLAEV2_( MKL_Complex16 *a, MKL_Complex16 *b, MKL_Complex16 *c, double *rt1, double *rt2, double *cs1, MKL_Complex16 *sn1 );
void    zlaev2( MKL_Complex16 *a, MKL_Complex16 *b, MKL_Complex16 *c, double *rt1, double *rt2, double *cs1, MKL_Complex16 *sn1 );
void    zlaev2_( MKL_Complex16 *a, MKL_Complex16 *b, MKL_Complex16 *c, double *rt1, double *rt2, double *cs1, MKL_Complex16 *sn1 );
void    ZLAGS2( void *upper, double *a1, MKL_Complex16 *a2, double *a3, double *b1, MKL_Complex16 *b2, double *b3, double *csu, MKL_Complex16 *snu, double *csv, MKL_Complex16 *snv, double *csq, MKL_Complex16 *snq );
void    ZLAGS2_( void *upper, double *a1, MKL_Complex16 *a2, double *a3, double *b1, MKL_Complex16 *b2, double *b3, double *csu, MKL_Complex16 *snu, double *csv, MKL_Complex16 *snv, double *csq, MKL_Complex16 *snq );
void    zlags2( void *upper, double *a1, MKL_Complex16 *a2, double *a3, double *b1, MKL_Complex16 *b2, double *b3, double *csu, MKL_Complex16 *snu, double *csv, MKL_Complex16 *snv, double *csq, MKL_Complex16 *snq );
void    zlags2_( void *upper, double *a1, MKL_Complex16 *a2, double *a3, double *b1, MKL_Complex16 *b2, double *b3, double *csu, MKL_Complex16 *snu, double *csv, MKL_Complex16 *snv, double *csq, MKL_Complex16 *snq );
void    ZLAGTM( char *trans, MKL_INT *n, MKL_INT *nrhs, double *alpha, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *x, MKL_INT *ldx, double *beta, MKL_Complex16 *b, MKL_INT *ldb );
void    ZLAGTM_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *alpha, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *x, MKL_INT *ldx, double *beta, MKL_Complex16 *b, MKL_INT *ldb );
void    zlagtm( char *trans, MKL_INT *n, MKL_INT *nrhs, double *alpha, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *x, MKL_INT *ldx, double *beta, MKL_Complex16 *b, MKL_INT *ldb );
void    zlagtm_( char *trans, MKL_INT *n, MKL_INT *nrhs, double *alpha, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du, MKL_Complex16 *x, MKL_INT *ldx, double *beta, MKL_Complex16 *b, MKL_INT *ldb );
void    ZLAHEF( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *w, MKL_INT *ldw, MKL_INT *info );
void    ZLAHEF_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *w, MKL_INT *ldw, MKL_INT *info );
void    zlahef( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *w, MKL_INT *ldw, MKL_INT *info );
void    zlahef_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *w, MKL_INT *ldw, MKL_INT *info );
void    ZLAHQR( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_INT *iloz, MKL_INT *ihiz, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *info );
void    ZLAHQR_( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_INT *iloz, MKL_INT *ihiz, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *info );
void    zlahqr( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_INT *iloz, MKL_INT *ihiz, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *info );
void    zlahqr_( void *wantt, void *wantz, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *h, MKL_INT *ldh, MKL_Complex16 *w, MKL_INT *iloz, MKL_INT *ihiz, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *info );
void    ZLAHRD( MKL_INT *n, MKL_INT *k, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *y, MKL_INT *ldy );
void    ZLAHRD_( MKL_INT *n, MKL_INT *k, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *y, MKL_INT *ldy );
void    zlahrd( MKL_INT *n, MKL_INT *k, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *y, MKL_INT *ldy );
void    zlahrd_( MKL_INT *n, MKL_INT *k, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *y, MKL_INT *ldy );
void    ZLAIC1( MKL_INT *job, MKL_INT *j, MKL_Complex16 *x, double *sest, MKL_Complex16 *w, MKL_Complex16 *gamma, double *sestpr, MKL_Complex16 *s, MKL_Complex16 *c );
void    ZLAIC1_( MKL_INT *job, MKL_INT *j, MKL_Complex16 *x, double *sest, MKL_Complex16 *w, MKL_Complex16 *gamma, double *sestpr, MKL_Complex16 *s, MKL_Complex16 *c );
void    zlaic1( MKL_INT *job, MKL_INT *j, MKL_Complex16 *x, double *sest, MKL_Complex16 *w, MKL_Complex16 *gamma, double *sestpr, MKL_Complex16 *s, MKL_Complex16 *c );
void    zlaic1_( MKL_INT *job, MKL_INT *j, MKL_Complex16 *x, double *sest, MKL_Complex16 *w, MKL_Complex16 *gamma, double *sestpr, MKL_Complex16 *s, MKL_Complex16 *c );
void    ZLALS0( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *rwork, MKL_INT *info );
void    ZLALS0_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *rwork, MKL_INT *info );
void    zlals0( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *rwork, MKL_INT *info );
void    zlals0_( MKL_INT *icompq, MKL_INT *nl, MKL_INT *nr, MKL_INT *sqre, MKL_INT *nrhs, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *bx, MKL_INT *ldbx, MKL_INT *perm, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, double *givnum, MKL_INT *ldgnum, double *poles, double *difl, double *difr, double *z, MKL_INT *k, double *c, double *s, double *rwork, MKL_INT *info );
void    ZLALSA( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *bx, MKL_INT *ldbx, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZLALSA_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *bx, MKL_INT *ldbx, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    zlalsa( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *bx, MKL_INT *ldbx, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    zlalsa_( MKL_INT *icompq, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *bx, MKL_INT *ldbx, double *u, MKL_INT *ldu, double *vt, MKL_INT *k, double *difl, double *difr, double *z, double *poles, MKL_INT *givptr, MKL_INT *givcol, MKL_INT *ldgcol, MKL_INT *perm, double *givnum, double *c, double *s, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZLALSD( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, MKL_Complex16 *b, MKL_INT *ldb, double *rcond, MKL_INT *rank, MKL_Complex16 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    ZLALSD_( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, MKL_Complex16 *b, MKL_INT *ldb, double *rcond, MKL_INT *rank, MKL_Complex16 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    zlalsd( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, MKL_Complex16 *b, MKL_INT *ldb, double *rcond, MKL_INT *rank, MKL_Complex16 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
void    zlalsd_( char *uplo, MKL_INT *smlsiz, MKL_INT *n, MKL_INT *nrhs, double *d, double *e, MKL_Complex16 *b, MKL_INT *ldb, double *rcond, MKL_INT *rank, MKL_Complex16 *work, float *rwork, MKL_INT *iwork, MKL_INT *info );
double  ZLANGB( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  ZLANGB_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  zlangb( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  zlangb_( char *norm, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  ZLANGE( char *norm, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  ZLANGE_( char *norm, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  zlange( char *norm, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  zlange_( char *norm, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  ZLANGT( char *norm, MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du );
double  ZLANGT_( char *norm, MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du );
double  zlangt( char *norm, MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du );
double  zlangt_( char *norm, MKL_INT *n, MKL_Complex16 *dl, MKL_Complex16 *d, MKL_Complex16 *du );
double  ZLANHB( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  ZLANHB_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  zlanhb( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  zlanhb_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  ZLANHE( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  ZLANHE_( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  zlanhe( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  zlanhe_( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  ZLANHP( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  ZLANHP_( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  zlanhp( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  zlanhp_( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  ZLANHS( char *norm, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  ZLANHS_( char *norm, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  zlanhs( char *norm, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  zlanhs_( char *norm, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  ZLANHT( char *norm, MKL_INT *n, double *d, MKL_Complex16 *e );
double  ZLANHT_( char *norm, MKL_INT *n, double *d, MKL_Complex16 *e );
double  zlanht( char *norm, MKL_INT *n, double *d, MKL_Complex16 *e );
double  zlanht_( char *norm, MKL_INT *n, double *d, MKL_Complex16 *e );
double  ZLANSB( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  ZLANSB_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  zlansb( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  zlansb_( char *norm, char *uplo, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  ZLANSP( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  ZLANSP_( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  zlansp( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  zlansp_( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  ZLANSY( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  ZLANSY_( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  zlansy( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  zlansy_( char *norm, char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  ZLANTB( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  ZLANTB_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  zlantb( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  zlantb_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *k, MKL_Complex16 *ab, MKL_INT *ldab, double *work );
double  ZLANTP( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  ZLANTP_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  zlantp( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  zlantp_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, double *work );
double  ZLANTR( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  ZLANTR_( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  zlantr( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
double  zlantr_( char *norm, char *uplo, char *diag, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *work );
void    ZLAPLL( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *ssmin );
void    ZLAPLL_( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *ssmin );
void    zlapll( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *ssmin );
void    zlapll_( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *ssmin );
void    ZLAPMT( void *forwrd, MKL_INT *m, MKL_INT *n, MKL_Complex16 *x, MKL_INT *ldx, MKL_INT *k );
void    ZLAPMT_( void *forwrd, MKL_INT *m, MKL_INT *n, MKL_Complex16 *x, MKL_INT *ldx, MKL_INT *k );
void    zlapmt( void *forwrd, MKL_INT *m, MKL_INT *n, MKL_Complex16 *x, MKL_INT *ldx, MKL_INT *k );
void    zlapmt_( void *forwrd, MKL_INT *m, MKL_INT *n, MKL_Complex16 *x, MKL_INT *ldx, MKL_INT *k );
void    ZLAQGB( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    ZLAQGB_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    zlaqgb( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    zlaqgb_( MKL_INT *m, MKL_INT *n, MKL_INT *kl, MKL_INT *ku, MKL_Complex16 *ab, MKL_INT *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    ZLAQGE( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    ZLAQGE_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    zlaqge( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    zlaqge_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void    ZLAQHB( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    ZLAQHB_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    zlaqhb( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    zlaqhb_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    ZLAQHE( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    ZLAQHE_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    zlaqhe( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    zlaqhe_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    ZLAQHP( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, char *equed );
void    ZLAQHP_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, char *equed );
void    zlaqhp( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, char *equed );
void    zlaqhp_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, char *equed );
void    ZLAQP2( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, double *vn1, double *vn2, MKL_Complex16 *work );
void    ZLAQP2_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, double *vn1, double *vn2, MKL_Complex16 *work );
void    zlaqp2( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, double *vn1, double *vn2, MKL_Complex16 *work );
void    zlaqp2_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, double *vn1, double *vn2, MKL_Complex16 *work );
void    ZLAQPS( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, double *vn1, double *vn2, MKL_Complex16 *auxv, MKL_Complex16 *f, MKL_INT *ldf );
void    ZLAQPS_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, double *vn1, double *vn2, MKL_Complex16 *auxv, MKL_Complex16 *f, MKL_INT *ldf );
void    zlaqps( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, double *vn1, double *vn2, MKL_Complex16 *auxv, MKL_Complex16 *f, MKL_INT *ldf );
void    zlaqps_( MKL_INT *m, MKL_INT *n, MKL_INT *offset, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *jpvt, MKL_Complex16 *tau, double *vn1, double *vn2, MKL_Complex16 *auxv, MKL_Complex16 *f, MKL_INT *ldf );
void    ZLAQSB( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    ZLAQSB_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    zlaqsb( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    zlaqsb_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, char *equed );
void    ZLAQSP( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, char *equed );
void    ZLAQSP_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, char *equed );
void    zlaqsp( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, char *equed );
void    zlaqsp_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, char *equed );
void    ZLAQSY( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    ZLAQSY_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    zlaqsy( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    zlaqsy_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, char *equed );
void    ZLAR1V( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, double *sigma, double *d, double *l, double *ld, double *lld, double *gersch, MKL_Complex16 *z, double *ztz, double *mingma, MKL_INT *r, MKL_INT *isuppz, double *work );
void    ZLAR1V_( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, double *sigma, double *d, double *l, double *ld, double *lld, double *gersch, MKL_Complex16 *z, double *ztz, double *mingma, MKL_INT *r, MKL_INT *isuppz, double *work );
void    zlar1v( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, double *sigma, double *d, double *l, double *ld, double *lld, double *gersch, MKL_Complex16 *z, double *ztz, double *mingma, MKL_INT *r, MKL_INT *isuppz, double *work );
void    zlar1v_( MKL_INT *n, MKL_INT *b1, MKL_INT *bn, double *sigma, double *d, double *l, double *ld, double *lld, double *gersch, MKL_Complex16 *z, double *ztz, double *mingma, MKL_INT *r, MKL_INT *isuppz, double *work );
void    ZLAR2V( MKL_INT *n, MKL_Complex16 *x, MKL_Complex16 *y, MKL_Complex16 *z, MKL_INT *incx, double *c, MKL_Complex16 *s, MKL_INT *incc );
void    ZLAR2V_( MKL_INT *n, MKL_Complex16 *x, MKL_Complex16 *y, MKL_Complex16 *z, MKL_INT *incx, double *c, MKL_Complex16 *s, MKL_INT *incc );
void    zlar2v( MKL_INT *n, MKL_Complex16 *x, MKL_Complex16 *y, MKL_Complex16 *z, MKL_INT *incx, double *c, MKL_Complex16 *s, MKL_INT *incc );
void    zlar2v_( MKL_INT *n, MKL_Complex16 *x, MKL_Complex16 *y, MKL_Complex16 *z, MKL_INT *incx, double *c, MKL_Complex16 *s, MKL_INT *incc );
void    ZLARCM( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *rwork );
void    ZLARCM_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *rwork );
void    zlarcm( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *rwork );
void    zlarcm_( MKL_INT *m, MKL_INT *n, double *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *rwork );
void    ZLARF( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    ZLARF_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    zlarf( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    zlarf_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    ZLARFB( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *ldwork );
void    ZLARFB_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *ldwork );
void    zlarfb( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *ldwork );
void    zlarfb_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *ldwork );
void    ZLARFG( MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *tau );
void    ZLARFG_( MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *tau );
void    zlarfg( MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *tau );
void    zlarfg_( MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *tau );
void    ZLARFT( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt );
void    ZLARFT_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt );
void    zlarft( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt );
void    zlarft_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt );
void    ZLARFX( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    ZLARFX_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    zlarfx( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    zlarfx_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    ZLARGV( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *c, MKL_INT *incc );
void    ZLARGV_( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *c, MKL_INT *incc );
void    zlargv( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *c, MKL_INT *incc );
void    zlargv_( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *c, MKL_INT *incc );
void    ZLARNV( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, MKL_Complex16 *x );
void    ZLARNV_( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, MKL_Complex16 *x );
void    zlarnv( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, MKL_Complex16 *x );
void    zlarnv_( MKL_INT *idist, MKL_INT *iseed, MKL_INT *n, MKL_Complex16 *x );
void    ZLARRV( MKL_INT *n, double *d, double *l, MKL_INT *isplit, MKL_INT *m, double *w, MKL_INT *iblock, double *gersch, double *tol, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *iwork, MKL_INT *info );
void    ZLARRV_( MKL_INT *n, double *d, double *l, MKL_INT *isplit, MKL_INT *m, double *w, MKL_INT *iblock, double *gersch, double *tol, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *iwork, MKL_INT *info );
void    zlarrv( MKL_INT *n, double *d, double *l, MKL_INT *isplit, MKL_INT *m, double *w, MKL_INT *iblock, double *gersch, double *tol, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *iwork, MKL_INT *info );
void    zlarrv_( MKL_INT *n, double *d, double *l, MKL_INT *isplit, MKL_INT *m, double *w, MKL_INT *iblock, double *gersch, double *tol, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *iwork, MKL_INT *info );
void    ZLARTG( MKL_Complex16 *f, MKL_Complex16 *g, double *cs, MKL_Complex16 *sn, MKL_Complex16 *r );
void    ZLARTG_( MKL_Complex16 *f, MKL_Complex16 *g, double *cs, MKL_Complex16 *sn, MKL_Complex16 *r );
void    zlartg( MKL_Complex16 *f, MKL_Complex16 *g, double *cs, MKL_Complex16 *sn, MKL_Complex16 *r );
void    zlartg_( MKL_Complex16 *f, MKL_Complex16 *g, double *cs, MKL_Complex16 *sn, MKL_Complex16 *r );
void    ZLARTV( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *c, MKL_Complex16 *s, MKL_INT *incc );
void    ZLARTV_( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *c, MKL_Complex16 *s, MKL_INT *incc );
void    zlartv( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *c, MKL_Complex16 *s, MKL_INT *incc );
void    zlartv_( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *y, MKL_INT *incy, double *c, MKL_Complex16 *s, MKL_INT *incc );
void    ZLARZ( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    ZLARZ_( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    zlarz( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    zlarz_( char *side, MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work );
void    ZLARZB( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *ldwork );
void    ZLARZB_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *ldwork );
void    zlarzb( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *ldwork );
void    zlarzb_( char *side, char *trans, char *direct, char *storev, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *ldwork );
void    ZLARZT( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt );
void    ZLARZT_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt );
void    zlarzt( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt );
void    zlarzt_( char *direct, char *storev, MKL_INT *n, MKL_INT *k, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *tau, MKL_Complex16 *t, MKL_INT *ldt );
void    ZLASCL( char *type, MKL_INT *kl, MKL_INT *ku, double *cfrom, double *cto, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZLASCL_( char *type, MKL_INT *kl, MKL_INT *ku, double *cfrom, double *cto, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zlascl( char *type, MKL_INT *kl, MKL_INT *ku, double *cfrom, double *cto, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zlascl_( char *type, MKL_INT *kl, MKL_INT *ku, double *cfrom, double *cto, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZLASET( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *a, MKL_INT *lda );
void    ZLASET_( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *a, MKL_INT *lda );
void    zlaset( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *a, MKL_INT *lda );
void    zlaset_( char *uplo, MKL_INT *m, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *a, MKL_INT *lda );
void    ZLASR( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, double *c, double *s, MKL_Complex16 *a, MKL_INT *lda );
void    ZLASR_( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, double *c, double *s, MKL_Complex16 *a, MKL_INT *lda );
void    zlasr( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, double *c, double *s, MKL_Complex16 *a, MKL_INT *lda );
void    zlasr_( char *side, char *pivot, char *direct, MKL_INT *m, MKL_INT *n, double *c, double *s, MKL_Complex16 *a, MKL_INT *lda );
void    ZLASSQ( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, double *scale, double *sumsq );
void    ZLASSQ_( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, double *scale, double *sumsq );
void    zlassq( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, double *scale, double *sumsq );
void    zlassq_( MKL_INT *n, MKL_Complex16 *x, MKL_INT *incx, double *scale, double *sumsq );
void    ZLASWP( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    ZLASWP_( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    zlaswp( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    zlaswp_( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *k1, MKL_INT *k2, MKL_INT *ipiv, MKL_INT *incx );
void    ZLASYF( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *w, MKL_INT *ldw, MKL_INT *info );
void    ZLASYF_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *w, MKL_INT *ldw, MKL_INT *info );
void    zlasyf( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *w, MKL_INT *ldw, MKL_INT *info );
void    zlasyf_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_INT *kb, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *w, MKL_INT *ldw, MKL_INT *info );
void    ZLATBS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    ZLATBS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    zlatbs( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    zlatbs_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    ZLATDF( MKL_INT *ijob, MKL_INT *n, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *rhs, double *rdsum, double *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    ZLATDF_( MKL_INT *ijob, MKL_INT *n, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *rhs, double *rdsum, double *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    zlatdf( MKL_INT *ijob, MKL_INT *n, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *rhs, double *rdsum, double *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    zlatdf_( MKL_INT *ijob, MKL_INT *n, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *rhs, double *rdsum, double *rdscal, MKL_INT *ipiv, MKL_INT *jpiv );
void    ZLATPS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    ZLATPS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    zlatps( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    zlatps_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    ZLATRD( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, double *e, MKL_Complex16 *tau, MKL_Complex16 *w, MKL_INT *ldw );
void    ZLATRD_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, double *e, MKL_Complex16 *tau, MKL_Complex16 *w, MKL_INT *ldw );
void    zlatrd( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, double *e, MKL_Complex16 *tau, MKL_Complex16 *w, MKL_INT *ldw );
void    zlatrd_( char *uplo, MKL_INT *n, MKL_INT *nb, MKL_Complex16 *a, MKL_INT *lda, double *e, MKL_Complex16 *tau, MKL_Complex16 *w, MKL_INT *ldw );
void    ZLATRS( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    ZLATRS_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    zlatrs( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    zlatrs_( char *uplo, char *trans, char *diag, char *normin, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *x, double *scale, double *cnorm, MKL_INT *info );
void    ZLATRZ( MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work );
void    ZLATRZ_( MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work );
void    zlatrz( MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work );
void    zlatrz_( MKL_INT *m, MKL_INT *n, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work );
void    ZLATZM( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c1, MKL_Complex16 *c2, MKL_INT *ldc, MKL_Complex16 *work );
void    ZLATZM_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c1, MKL_Complex16 *c2, MKL_INT *ldc, MKL_Complex16 *work );
void    zlatzm( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c1, MKL_Complex16 *c2, MKL_INT *ldc, MKL_Complex16 *work );
void    zlatzm_( char *side, MKL_INT *m, MKL_INT *n, MKL_Complex16 *v, MKL_INT *incv, MKL_Complex16 *tau, MKL_Complex16 *c1, MKL_Complex16 *c2, MKL_INT *ldc, MKL_Complex16 *work );
void    ZLAUU2( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZLAUU2_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zlauu2( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zlauu2_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZLAUUM( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZLAUUM_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zlauum( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zlauum_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZPBCON( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPBCON_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zpbcon( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zpbcon_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPBEQU( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, MKL_INT *info );
void    ZPBEQU_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, MKL_INT *info );
void    zpbequ( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, MKL_INT *info );
void    zpbequ_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *s, double *scond, double *amax, MKL_INT *info );
void    ZPBRFS( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPBRFS_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zpbrfs( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zpbrfs_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPBSTF( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    ZPBSTF_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    zpbstf( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    zpbstf_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    ZPBSV( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPBSV_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zpbsv( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zpbsv_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPBSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPBSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zpbsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zpbsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *afb, MKL_INT *ldafb, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPBTF2( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    ZPBTF2_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    zpbtf2( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    zpbtf2_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    ZPBTRF( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    ZPBTRF_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    zpbtrf( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    zpbtrf_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, MKL_INT *info );
void    ZPBTRS( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPBTRS_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zpbtrs( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zpbtrs_( char *uplo, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPOCON( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPOCON_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zpocon( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zpocon_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPOEQU( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, MKL_INT *info );
void    ZPOEQU_( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, MKL_INT *info );
void    zpoequ( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, MKL_INT *info );
void    zpoequ_( MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *s, double *scond, double *amax, MKL_INT *info );
void    ZPORFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPORFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zporfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zporfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPOSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPOSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zposv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zposv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPOSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPOSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zposvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zposvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPOTF2( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZPOTF2_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zpotf2( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zpotf2_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZPOTRF( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZPOTRF_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zpotrf( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zpotrf_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZPOTRI( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZPOTRI_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zpotri( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    zpotri_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZPOTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPOTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zpotrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zpotrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPPCON( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPPCON_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zppcon( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zppcon_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *anorm, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPPEQU( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, MKL_INT *info );
void    ZPPEQU_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, MKL_INT *info );
void    zppequ( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, MKL_INT *info );
void    zppequ_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, double *s, double *scond, double *amax, MKL_INT *info );
void    ZPPRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPPRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zpprfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zpprfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPPSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPPSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zppsv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zppsv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPPSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPPSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zppsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zppsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, char *equed, double *s, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPPTRF( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    ZPPTRF_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    zpptrf( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    zpptrf_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    ZPPTRI( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    ZPPTRI_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    zpptri( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    zpptri_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    ZPPTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPPTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zpptrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zpptrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPTCON( MKL_INT *n, double *d, MKL_Complex16 *e, double *anorm, double *rcond, double *rwork, MKL_INT *info );
void    ZPTCON_( MKL_INT *n, double *d, MKL_Complex16 *e, double *anorm, double *rcond, double *rwork, MKL_INT *info );
void    zptcon( MKL_INT *n, double *d, MKL_Complex16 *e, double *anorm, double *rcond, double *rwork, MKL_INT *info );
void    zptcon_( MKL_INT *n, double *d, MKL_Complex16 *e, double *anorm, double *rcond, double *rwork, MKL_INT *info );
void    ZPTEQR( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    ZPTEQR_( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    zpteqr( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    zpteqr_( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    ZPTRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, double *df, MKL_Complex16 *ef, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPTRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, double *df, MKL_Complex16 *ef, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zptrfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, double *df, MKL_Complex16 *ef, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zptrfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, double *df, MKL_Complex16 *ef, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPTSV( MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPTSV_( MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zptsv( MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zptsv_( MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPTSVX( char *fact, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, double *df, MKL_Complex16 *ef, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPTSVX_( char *fact, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, double *df, MKL_Complex16 *ef, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zptsvx( char *fact, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, double *df, MKL_Complex16 *ef, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zptsvx_( char *fact, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, double *df, MKL_Complex16 *ef, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZPTTRF( MKL_INT *n, double *d, MKL_Complex16 *e, MKL_INT *info );
void    ZPTTRF_( MKL_INT *n, double *d, MKL_Complex16 *e, MKL_INT *info );
void    zpttrf( MKL_INT *n, double *d, MKL_Complex16 *e, MKL_INT *info );
void    zpttrf_( MKL_INT *n, double *d, MKL_Complex16 *e, MKL_INT *info );
void    ZPTTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPTTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zpttrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zpttrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZPTTS2( MKL_INT *iuplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb );
void    ZPTTS2_( MKL_INT *iuplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb );
void    zptts2( MKL_INT *iuplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb );
void    zptts2_( MKL_INT *iuplo, MKL_INT *n, MKL_INT *nrhs, double *d, MKL_Complex16 *e, MKL_Complex16 *b, MKL_INT *ldb );
void    ZROT( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx, MKL_Complex16 *cy, MKL_INT *incy, double *c, MKL_Complex16 *s );
void    ZROT_( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx, MKL_Complex16 *cy, MKL_INT *incy, double *c, MKL_Complex16 *s );
void    zrot( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx, MKL_Complex16 *cy, MKL_INT *incy, double *c, MKL_Complex16 *s );
void    zrot_( MKL_INT *n, MKL_Complex16 *cx, MKL_INT *incx, MKL_Complex16 *cy, MKL_INT *incy, double *c, MKL_Complex16 *s );
void    ZSPCON( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    ZSPCON_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    zspcon( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    zspcon_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    ZSPMV( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *ap, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *beta, MKL_Complex16 *y, MKL_INT *incy );
void    ZSPMV_( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *ap, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *beta, MKL_Complex16 *y, MKL_INT *incy );
void    zspmv( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *ap, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *beta, MKL_Complex16 *y, MKL_INT *incy );
void    zspmv_( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *ap, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *beta, MKL_Complex16 *y, MKL_INT *incy );
void    ZSPR( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *ap );
void    ZSPR_( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *ap );
void    zspr( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *ap );
void    zspr_( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *ap );
void    ZSPRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZSPRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zsprfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zsprfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZSPSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZSPSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zspsv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zspsv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZSPSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZSPSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zspsvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zspsvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *afp, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZSPTRF( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_INT *info );
void    ZSPTRF_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_INT *info );
void    zsptrf( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_INT *info );
void    zsptrf_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_INT *info );
void    ZSPTRI( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    ZSPTRI_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    zsptri( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    zsptri_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    ZSPTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZSPTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zsptrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zsptrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZSTEDC( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZSTEDC_( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zstedc( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zstedc_( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *lrwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZSTEGR( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZSTEGR_( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zstegr( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    zstegr_( char *jobz, char *range, MKL_INT *n, double *d, double *e, double *vl, double *vu, MKL_INT *il, MKL_INT *iu, double *abstol, MKL_INT *m, double *w, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *isuppz, double *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZSTEIN( MKL_INT *n, double *d, double *e, MKL_INT *m, double *w, MKL_INT *iblock, MKL_INT *isplit, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZSTEIN_( MKL_INT *n, double *d, double *e, MKL_INT *m, double *w, MKL_INT *iblock, MKL_INT *isplit, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zstein( MKL_INT *n, double *d, double *e, MKL_INT *m, double *w, MKL_INT *iblock, MKL_INT *isplit, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    zstein_( MKL_INT *n, double *d, double *e, MKL_INT *m, double *w, MKL_INT *iblock, MKL_INT *isplit, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *iwork, MKL_INT *ifail, MKL_INT *info );
void    ZSTEQR( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    ZSTEQR_( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    zsteqr( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    zsteqr_( char *compz, MKL_INT *n, double *d, double *e, MKL_Complex16 *z, MKL_INT *ldz, double *work, MKL_INT *info );
void    ZSYCON( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    ZSYCON_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    zsycon( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    zsycon_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, double *anorm, double *rcond, MKL_Complex16 *work, MKL_INT *info );
void    ZSYMV( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *beta, MKL_Complex16 *y, MKL_INT *incy );
void    ZSYMV_( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *beta, MKL_Complex16 *y, MKL_INT *incy );
void    zsymv( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *beta, MKL_Complex16 *y, MKL_INT *incy );
void    zsymv_( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *beta, MKL_Complex16 *y, MKL_INT *incy );
void    ZSYR( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *a, MKL_INT *lda );
void    ZSYR_( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *a, MKL_INT *lda );
void    zsyr( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *a, MKL_INT *lda );
void    zsyr_( char *uplo, MKL_INT *n, MKL_Complex16 *alpha, MKL_Complex16 *x, MKL_INT *incx, MKL_Complex16 *a, MKL_INT *lda );
void    ZSYRFS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZSYRFS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zsyrfs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    zsyrfs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZSYSV( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZSYSV_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zsysv( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zsysv_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZSYSVX( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZSYSVX_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zsysvx( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    zsysvx_( char *fact, char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *af, MKL_INT *ldaf, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *rcond, double *ferr, double *berr, MKL_Complex16 *work, MKL_INT *lwork, double *rwork, MKL_INT *info );
void    ZSYTF2( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    ZSYTF2_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    zsytf2( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    zsytf2_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_INT *info );
void    ZSYTRF( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZSYTRF_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zsytrf( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zsytrf_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZSYTRI( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    ZSYTRI_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    zsytri( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    zsytri_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *work, MKL_INT *info );
void    ZSYTRS( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZSYTRS_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zsytrs( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    zsytrs_( char *uplo, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *ipiv, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZTBCON( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTBCON_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztbcon( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztbcon_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_INT *kd, MKL_Complex16 *ab, MKL_INT *ldab, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTBRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTBRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztbrfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztbrfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTBTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZTBTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ztbtrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ztbtrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *kd, MKL_INT *nrhs, MKL_Complex16 *ab, MKL_INT *ldab, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZTGEVC( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTGEVC_( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztgevc( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztgevc_( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTGEX2( void *wantq, void *wantz, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *info );
void    ZTGEX2_( void *wantq, void *wantz, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *info );
void    ztgex2( void *wantq, void *wantz, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *info );
void    ztgex2_( void *wantq, void *wantz, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *j1, MKL_INT *info );
void    ZTGEXC( void *wantq, void *wantz, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ZTGEXC_( void *wantq, void *wantz, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ztgexc( void *wantq, void *wantz, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ztgexc_( void *wantq, void *wantz, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ZTGSEN( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *m, double *pl, double *pr, double *dif, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZTGSEN_( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *m, double *pl, double *pr, double *dif, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ztgsen( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *m, double *pl, double *pr, double *dif, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ztgsen_( MKL_INT *ijob, void *wantq, void *wantz, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *alpha, MKL_Complex16 *beta, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *z, MKL_INT *ldz, MKL_INT *m, double *pl, double *pr, double *dif, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *liwork, MKL_INT *info );
void    ZTGSJA( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *tola, double *tolb, double *alpha, double *beta, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *ncycle, MKL_INT *info );
void    ZTGSJA_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *tola, double *tolb, double *alpha, double *beta, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *ncycle, MKL_INT *info );
void    ztgsja( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *tola, double *tolb, double *alpha, double *beta, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *ncycle, MKL_INT *info );
void    ztgsja_( char *jobu, char *jobv, char *jobq, MKL_INT *m, MKL_INT *p, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, double *tola, double *tolb, double *alpha, double *beta, MKL_Complex16 *u, MKL_INT *ldu, MKL_Complex16 *v, MKL_INT *ldv, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *ncycle, MKL_INT *info );
void    ZTGSNA( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, double *s, double *dif, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ZTGSNA_( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, double *s, double *dif, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ztgsna( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, double *s, double *dif, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ztgsna_( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, double *s, double *dif, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ZTGSY2( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *d, MKL_INT *ldd, MKL_Complex16 *e, MKL_INT *lde, MKL_Complex16 *f, MKL_INT *ldf, double *scale, double *rdsum, double *rdscal, MKL_INT *info );
void    ZTGSY2_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *d, MKL_INT *ldd, MKL_Complex16 *e, MKL_INT *lde, MKL_Complex16 *f, MKL_INT *ldf, double *scale, double *rdsum, double *rdscal, MKL_INT *info );
void    ztgsy2( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *d, MKL_INT *ldd, MKL_Complex16 *e, MKL_INT *lde, MKL_Complex16 *f, MKL_INT *ldf, double *scale, double *rdsum, double *rdscal, MKL_INT *info );
void    ztgsy2_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *d, MKL_INT *ldd, MKL_Complex16 *e, MKL_INT *lde, MKL_Complex16 *f, MKL_INT *ldf, double *scale, double *rdsum, double *rdscal, MKL_INT *info );
void    ZTGSYL( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *d, MKL_INT *ldd, MKL_Complex16 *e, MKL_INT *lde, MKL_Complex16 *f, MKL_INT *ldf, double *scale, double *dif, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ZTGSYL_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *d, MKL_INT *ldd, MKL_Complex16 *e, MKL_INT *lde, MKL_Complex16 *f, MKL_INT *ldf, double *scale, double *dif, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ztgsyl( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *d, MKL_INT *ldd, MKL_Complex16 *e, MKL_INT *lde, MKL_Complex16 *f, MKL_INT *ldf, double *scale, double *dif, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ztgsyl_( char *trans, MKL_INT *ijob, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *d, MKL_INT *ldd, MKL_Complex16 *e, MKL_INT *lde, MKL_Complex16 *f, MKL_INT *ldf, double *scale, double *dif, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *iwork, MKL_INT *info );
void    ZTPCON( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTPCON_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztpcon( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztpcon_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTPRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTPRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztprfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztprfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTPTRI( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    ZTPTRI_( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    ztptri( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    ztptri_( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *ap, MKL_INT *info );
void    ZTPTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZTPTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ztptrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ztptrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *ap, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZTRCON( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTRCON_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztrcon( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztrcon_( char *norm, char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, double *rcond, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTREVC( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTREVC_( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztrevc( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztrevc_( char *side, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTREXC( char *compq, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ZTREXC_( char *compq, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ztrexc( char *compq, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ztrexc_( char *compq, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *q, MKL_INT *ldq, MKL_INT *ifst, MKL_INT *ilst, MKL_INT *info );
void    ZTRRFS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTRRFS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztrrfs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ztrrfs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *x, MKL_INT *ldx, double *ferr, double *berr, MKL_Complex16 *work, double *rwork, MKL_INT *info );
void    ZTRSEN( char *job, char *compq, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *w, MKL_INT *m, double *s, double *sep, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZTRSEN_( char *job, char *compq, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *w, MKL_INT *m, double *s, double *sep, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ztrsen( char *job, char *compq, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *w, MKL_INT *m, double *s, double *sep, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ztrsen_( char *job, char *compq, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *w, MKL_INT *m, double *s, double *sep, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZTRSNA( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, double *s, double *sep, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, MKL_INT *ldwork, double *rwork, MKL_INT *info );
void    ZTRSNA_( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, double *s, double *sep, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, MKL_INT *ldwork, double *rwork, MKL_INT *info );
void    ztrsna( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, double *s, double *sep, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, MKL_INT *ldwork, double *rwork, MKL_INT *info );
void    ztrsna_( char *job, char *howmny, void *select, MKL_INT *n, MKL_Complex16 *t, MKL_INT *ldt, MKL_Complex16 *vl, MKL_INT *ldvl, MKL_Complex16 *vr, MKL_INT *ldvr, double *s, double *sep, MKL_INT *mm, MKL_INT *m, MKL_Complex16 *work, MKL_INT *ldwork, double *rwork, MKL_INT *info );
void    ZTRSYL( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *scale, MKL_INT *info );
void    ZTRSYL_( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *scale, MKL_INT *info );
void    ztrsyl( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *scale, MKL_INT *info );
void    ztrsyl_( char *trana, char *tranb, MKL_INT *isgn, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_Complex16 *c, MKL_INT *ldc, double *scale, MKL_INT *info );
void    ZTRTI2( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZTRTI2_( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ztrti2( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ztrti2_( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZTRTRI( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZTRTRI_( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ztrtri( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ztrtri_( char *uplo, char *diag, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_INT *info );
void    ZTRTRS( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZTRTRS_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ztrtrs( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ztrtrs_( char *uplo, char *trans, char *diag, MKL_INT *n, MKL_INT *nrhs, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *b, MKL_INT *ldb, MKL_INT *info );
void    ZTZRQF( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_INT *info );
void    ZTZRQF_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_INT *info );
void    ztzrqf( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_INT *info );
void    ztzrqf_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_INT *info );
void    ZTZRZF( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZTZRZF_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ztzrzf( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ztzrzf_( MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNG2L( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZUNG2L_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zung2l( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zung2l_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZUNG2R( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZUNG2R_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zung2r( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zung2r_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZUNGBR( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGBR_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zungbr( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zungbr_( char *vect, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGHR( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGHR_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunghr( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunghr_( MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGL2( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZUNGL2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zungl2( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zungl2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZUNGLQ( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGLQ_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunglq( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunglq_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGQL( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGQL_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zungql( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zungql_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGQR( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGQR_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zungqr( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zungqr_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGR2( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZUNGR2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zungr2( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    zungr2_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *info );
void    ZUNGRQ( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGRQ_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zungrq( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zungrq_( MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGTR( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNGTR_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zungtr( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zungtr_( char *uplo, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNM2L( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUNM2L_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zunm2l( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zunm2l_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUNM2R( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUNM2R_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zunm2r( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zunm2r_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUNMBR( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMBR_( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmbr( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmbr_( char *vect, char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMHR( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMHR_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmhr( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmhr_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *ilo, MKL_INT *ihi, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNML2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUNML2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zunml2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zunml2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUNMLQ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMLQ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmlq( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmlq_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMQL( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMQL_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmql( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmql_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMQR( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMQR_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmqr( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmqr_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMR2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUNMR2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zunmr2( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zunmr2_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUNMR3( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUNMR3_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zunmr3( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zunmr3_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUNMRQ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMRQ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmrq( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmrq_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMRZ( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMRZ_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmrz( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmrz_( char *side, char *trans, MKL_INT *m, MKL_INT *n, MKL_INT *k, MKL_INT *l, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMTR( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUNMTR_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmtr( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    zunmtr_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex16 *a, MKL_INT *lda, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *lwork, MKL_INT *info );
void    ZUPGTR( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *tau, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *info );
void    ZUPGTR_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *tau, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *info );
void    zupgtr( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *tau, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *info );
void    zupgtr_( char *uplo, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *tau, MKL_Complex16 *q, MKL_INT *ldq, MKL_Complex16 *work, MKL_INT *info );
void    ZUPMTR( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    ZUPMTR_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zupmtr( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
void    zupmtr_( char *side, char *uplo, char *trans, MKL_INT *m, MKL_INT *n, MKL_Complex16 *ap, MKL_Complex16 *tau, MKL_Complex16 *c, MKL_INT *ldc, MKL_Complex16 *work, MKL_INT *info );
MKL_INT     ILAENV( const MKL_INT *ispec, const char *name, const char *opts, const MKL_INT *n1, const MKL_INT *n2, const MKL_INT *n3, const MKL_INT *n4 );
MKL_INT     ILAENV_( const MKL_INT *ispec, const char *name, const char *opts, const MKL_INT *n1, const MKL_INT *n2, const MKL_INT *n3, const MKL_INT *n4 );
MKL_INT     ilaenv( const MKL_INT *ispec, const char *name, const char *opts, const MKL_INT *n1, const MKL_INT *n2, const MKL_INT *n3, const MKL_INT *n4 );
MKL_INT     ilaenv_( const MKL_INT *ispec, const char *name, const char *opts, const MKL_INT *n1, const MKL_INT *n2, const MKL_INT *n3, const MKL_INT *n4 );
MKL_INT IEEECK( MKL_INT* ispec, float* zero, float* one );
MKL_INT IEEECK_( MKL_INT* ispec, float* zero, float* one );
MKL_INT ieeeck( MKL_INT* ispec, float* zero, float* one );
MKL_INT ieeeck_( MKL_INT* ispec, float* zero, float* one );
MKL_INT LSAMEN( MKL_INT* n, char* ca, char* cb );
MKL_INT LSAMEN_( MKL_INT* n, char* ca, char* cb );
MKL_INT lsamen( MKL_INT* n, char* ca, char* cb );
MKL_INT lsamen_( MKL_INT* n, char* ca, char* cb );
void DSGESV( MKL_INT* n, MKL_INT* nrhs, double* a, MKL_INT* lda, MKL_INT* ipiv, double* b, MKL_INT* ldb, double* x, MKL_INT* ldx, double* work, float* swork, MKL_INT* iter, MKL_INT* info );
void DSGESV_( MKL_INT* n, MKL_INT* nrhs, double* a, MKL_INT* lda, MKL_INT* ipiv, double* b, MKL_INT* ldb, double* x, MKL_INT* ldx, double* work, float* swork, MKL_INT* iter, MKL_INT* info );
void dsgesv( MKL_INT* n, MKL_INT* nrhs, double* a, MKL_INT* lda, MKL_INT* ipiv, double* b, MKL_INT* ldb, double* x, MKL_INT* ldx, double* work, float* swork, MKL_INT* iter, MKL_INT* info );
void dsgesv_( MKL_INT* n, MKL_INT* nrhs, double* a, MKL_INT* lda, MKL_INT* ipiv, double* b, MKL_INT* ldb, double* x, MKL_INT* ldx, double* work, float* swork, MKL_INT* iter, MKL_INT* info );
void ZCGESV( MKL_INT* n, MKL_INT* nrhs, MKL_Complex16* a, MKL_INT* lda, MKL_INT* ipiv, MKL_Complex16* b, MKL_INT* ldb, MKL_Complex16* x, MKL_INT* ldx, MKL_Complex16* work, MKL_Complex8* swork, MKL_INT* iter, MKL_INT* info );
void ZCGESV_( MKL_INT* n, MKL_INT* nrhs, MKL_Complex16* a, MKL_INT* lda, MKL_INT* ipiv, MKL_Complex16* b, MKL_INT* ldb, MKL_Complex16* x, MKL_INT* ldx, MKL_Complex16* work, MKL_Complex8* swork, MKL_INT* iter, MKL_INT* info );
void zcgesv( MKL_INT* n, MKL_INT* nrhs, MKL_Complex16* a, MKL_INT* lda, MKL_INT* ipiv, MKL_Complex16* b, MKL_INT* ldb, MKL_Complex16* x, MKL_INT* ldx, MKL_Complex16* work, MKL_Complex8* swork, MKL_INT* iter, MKL_INT* info );
void zcgesv_( MKL_INT* n, MKL_INT* nrhs, MKL_Complex16* a, MKL_INT* lda, MKL_INT* ipiv, MKL_Complex16* b, MKL_INT* ldb, MKL_Complex16* x, MKL_INT* ldx, MKL_Complex16* work, MKL_Complex8* swork, MKL_INT* iter, MKL_INT* info );
void DLAG2S( MKL_INT* m, MKL_INT* n, double* a, MKL_INT* lda, float* sa, MKL_INT* ldsa, MKL_INT* info );
void DLAG2S_( MKL_INT* m, MKL_INT* n, double* a, MKL_INT* lda, float* sa, MKL_INT* ldsa, MKL_INT* info );
void dlag2s( MKL_INT* m, MKL_INT* n, double* a, MKL_INT* lda, float* sa, MKL_INT* ldsa, MKL_INT* info );
void dlag2s_( MKL_INT* m, MKL_INT* n, double* a, MKL_INT* lda, float* sa, MKL_INT* ldsa, MKL_INT* info );
void SLAG2D( MKL_INT* m, MKL_INT* n, float* sa, MKL_INT* ldsa, double* a, MKL_INT* lda, MKL_INT* info );
void SLAG2D_( MKL_INT* m, MKL_INT* n, float* sa, MKL_INT* ldsa, double* a, MKL_INT* lda, MKL_INT* info );
void slag2d( MKL_INT* m, MKL_INT* n, float* sa, MKL_INT* ldsa, double* a, MKL_INT* lda, MKL_INT* info );
void slag2d_( MKL_INT* m, MKL_INT* n, float* sa, MKL_INT* ldsa, double* a, MKL_INT* lda, MKL_INT* info );
void ZLAG2C( MKL_INT* m, MKL_INT* n, MKL_Complex16* a, MKL_INT* lda, MKL_Complex8* sa, MKL_INT* ldsa, MKL_INT* info );
void ZLAG2C_( MKL_INT* m, MKL_INT* n, MKL_Complex16* a, MKL_INT* lda, MKL_Complex8* sa, MKL_INT* ldsa, MKL_INT* info );
void zlag2c( MKL_INT* m, MKL_INT* n, MKL_Complex16* a, MKL_INT* lda, MKL_Complex8* sa, MKL_INT* ldsa, MKL_INT* info );
void zlag2c_( MKL_INT* m, MKL_INT* n, MKL_Complex16* a, MKL_INT* lda, MKL_Complex8* sa, MKL_INT* ldsa, MKL_INT* info );
void CLAG2Z( MKL_INT* m, MKL_INT* n, MKL_Complex8* sa, MKL_INT* ldsa, MKL_Complex16* a, MKL_INT* lda, MKL_INT* info );
void CLAG2Z_( MKL_INT* m, MKL_INT* n, MKL_Complex8* sa, MKL_INT* ldsa, MKL_Complex16* a, MKL_INT* lda, MKL_INT* info );
void clag2z( MKL_INT* m, MKL_INT* n, MKL_Complex8* sa, MKL_INT* ldsa, MKL_Complex16* a, MKL_INT* lda, MKL_INT* info );
void clag2z_( MKL_INT* m, MKL_INT* n, MKL_Complex8* sa, MKL_INT* ldsa, MKL_Complex16* a, MKL_INT* lda, MKL_INT* info );

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* _MKL_LAPACK_H_ */
